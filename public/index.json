[{"authors":null,"categories":null,"content":"I’m currently a Lead Computational Scientist with over 10 years experience in statistical methods, programming and data visualization across multiple industries. My main weapons of choice are R, Shiny, git, SAS and SQL for descriptive and inferential analyses, creating custom reports or dashboard solutions and building interactive web applications.\nMy formal education includes an MSc.in Biostatistics from the University of Toronto and a Honor’s B.A. in Psychology from York University. I have taken a number of courses and workshops related to advanced analytics, software development and computing. I am a strong proponent of continuing education, self-learning and early adoption \u0026amp; experimentation. My current pursuits are expanding my Javascript, jQuery and CSS skills to enhance my web development endeavors.\nI currently live in Toronto, Ontario with my loving wife and mini labradoodle.\n","date":1678233600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1678233600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://academic-demo.netlify.app/author/matthew-kumar/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/matthew-kumar/","section":"authors","summary":"I’m currently a Lead Computational Scientist with over 10 years experience in statistical methods, programming and data visualization across multiple industries. My main weapons of choice are R, Shiny, git, SAS and SQL for descriptive and inferential analyses, creating custom reports or dashboard solutions and building interactive web applications.","tags":null,"title":"Matthew Kumar","type":"authors"},{"authors":null,"categories":null,"content":"吳恩達 is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"e87efdfe209d90ea3c6332a7cbd9d08b","permalink":"https://academic-demo.netlify.app/author/%E5%90%B3%E6%81%A9%E9%81%94/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/%E5%90%B3%E6%81%A9%E9%81%94/","section":"authors","summary":"吳恩達 is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"吳恩達","type":"authors"},{"authors":null,"categories":null,"content":"...catching Up\rThis is sort of an overdue post 😊\nI’m now sharing the supporting app to my talk on Reproducibility of Interactive Analyses, which I presented at Phuse US Connect 2023 earlier this year.\nLinks to the original slides and accompanying paper are found up above ☝\nTill next time 🍻✌\n","date":1701302400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1701302400,"objectID":"cb8ec99a64bcfdc224482b9e147436d2","permalink":"https://academic-demo.netlify.app/project/shinymeta/","publishdate":"2023-11-30T00:00:00Z","relpermalink":"/project/shinymeta/","section":"project","summary":"An example of using shinyMeta to recreate a plot designed in a shiny app","tags":["shiny","shinyMeta"],"title":"shinyMeta","type":"project"},{"authors":[],"categories":[],"content":"It pains me 😩 that whenever I contemplate using shiny for a work-related project, the question of allowing users to save and restore their progress 💬🗨 inevitably arises.\nWhile there are a variety of ways to do so in shiny (e.g. bookmarks), work-related apps aren’t always so straight forward 🔀\nFor example:\n They are usually tied to remote raw data that must be accessed with a live connection 📲 They involve intermediate calculations that aren’t easily restored by simply saving and reloading input values on the UI 👨‍🔬  Well, I finally took the time to 🔨 and I’m here to share what I’ve learned 👨‍🏫 \r⚡️Sidebar⚡️ Today is a bit of a 2 for 1. The demo app I’ve cooked up is using shinylive! In a nutshell, the app is ran serverless in the browser via webR. More on that later.\n\rApproach For simplicity, I’ve crafted a small app enabling users to upload a SAS Transport (.XPT) data file. The file is parsed using the {haven} package and presented as a table on the UI. There’s also an additional textInput field for users to enter their name.\nUpon visiting the app, users can either:\n Start by uploading a fresh file 📄 Begin by restoring a previously saved session 💾  This is achieved through a radioButtons control. Upon making a choice, the corresponding fileInput widget is displayed.\nWhen a fresh file is uploaded 📤, it is read in as binary 👨‍💻 (using readBin and writeBin) in a reactiveValues container. Additional 🛠 steps, such as implementing haven::read_xpt() to another value in the reactiveValues, occur to make it immediately available for use in the app and later. This process unfolds inside an observeEvent 🔍.\nThe “session saving” ✨ is managed by a downloadHandler 📥. The content is populated by all current values in the reactiveValues via reactiveValuesToList 💪. This includes the binary representation of the .XPT file and possibly the processed version. Additionally, other inputs 🎚 can be arbitrarily specified for storage in the file (remember the random textInput asking for your name?).\nSo, what happens when you start the app by wanting to restore a previous session❓️ Using the radioButton choice for that, the appropriate fileInput widget is first made available. Once uploaded, the processing essentially involves reassigning all values 📝 from the saved file to the current values in the reactiveValues. For other inputs, such as the textInput, the corresponding updateTextInput is used to restore that value directly. This process takes place within an observeEvent 🔍.\ntl;dr A consequence of this approach is this:\n The save file retains a binary representation of your original file. As such you can recreate that file behind the scenes thus making your app no longer depend on remote access to it. Consider that anything can be represented as binary including file types like CSVs, Docx, Images, etc. 😵\n Shinylive App You can give this a try in the live app embedded below 👇👇👇\n👉 Use this save file I generated: Download my_saved_session.RData\nWhen you upload it, you’ll see my progress. You’ll also see the contents of the save file, which shows both the binary representation of the source file (which you don’t have).\n\rThoughts I’m not sure if I’m idealizing 😍 finally having a solution to a long-standing problem, but I’m excited 🤣. The scalability remains uncertain, so it’s probably best implemented prospectively 🔜 rather than retro 🔙.\nAnother consideration is the source files themselves. In some cases, storing a “copy” of the data outside its origin might violate company policy 🕵. There’s definitely some gray area. In other roles, users already self-manage their own document files in various ways 🤔 🤔 🤔\nAnd what about file size 📈 ? In this example, the original XPT was 116 kb and the save file was 33.9 kb. Obviously some savings there, but where does that bottom out 🏋? It might depend on the format of the original file type.\nShinylive As mentioned earlier, I’ve used this post as a two-for-one. Since this app is relatively lightweight, I employed shinylive::export to convert it to a format I can host as static content (currently on GitHub pages) 🤑\nIt was pretty straight forward and overall looks promising. However, there are a few things to be ⚠️ mindful of: Because all of the work 👷 is done in the browser it may take time for things to load ⌛. Another key consideration is whether your app package dependencies 📦 are compatible with webR. Interactive documentation 📋 on the latter can be found here\nResources 👉 link to shinylive app\n👉 github repository with code\nTill next time 🍻🙏 !\n","date":1700870400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1700870400,"objectID":"98b26f5f539a57b669df15143e2842dd","permalink":"https://academic-demo.netlify.app/post/2023-11-25-shinysave/purrr/","publishdate":"2023-11-25T00:00:00Z","relpermalink":"/post/2023-11-25-shinysave/purrr/","section":"post","summary":"It pains me 😩 that whenever I contemplate using shiny for a work-related project, the question of allowing users to save and restore their progress 💬🗨 inevitably arises.\nWhile there are a variety of ways to do so in shiny (e.","tags":[],"title":"saving sessions (+ shinylive)","type":"post"},{"authors":[],"categories":[],"content":"Preface\rI’ll preface with this post is related to a project I lead at work. I can’t share too many details about it here unfortunately (including code), but what I can safely share is my experience and process 💡.\ntl;dr\rI lead the development of a medium-size shiny application that is used by users within my organization. This app has evolved to the state where I need to move it from the current platform to a platform that is capable of scaling 📈 and has storage 📁. How can I re-factor my existing app to integrate with this? Keep in mind, not only the access, but the data access too.🎯\nFirst Steps\rUntil very recently, I had almost no experience with Azure or it’s systems, or it’s esoteric lingo 💬.My first step was to attempt to read test data (prepared by an engineer in a File Container) into my local R. I’ll ⏭️ the details of this setup, mostly because I don’t quite understand all that the Azure DevOps Engineers️ 👨‍🔧 had to configure, but also my scope is restricted to R and shiny in this post.\nI looked into the AzureStor package because by it’s description alone, it’s what I was going to need to do: Access files from Azure Storage. Straight forward right 🤷‍♂️? Not exactly ❌.\nIt turns out I needed to use the AzureAuth package first, whose sole focus is on establishing authentication with services on Azure using Active Directory. OK, so game plan. Use AzureAuth to “connect”, get a token 🌕, then pass it to functions in AzureStor to do operations like read/write/list. Once I could do this, I was confident my app would work in it’s entirety. ✔️\nThis task in reality took quite a bit of time to map 🕵. Remember, I don’t speak Azure. I also don’t expect the DevOps engineers 👷 to be familiar with this R package nor support it. Enter growing pains 😭 🏋️‍♀️ 👨‍🔧.\nIn the end we did get it mapped out, some parameters / settings more obvious than others, and I could finally read Azure File Containers hosted on the platform in my local R instance. 🎉\nHere is the function I used:\nAzureAuth::get_azure_token(resource, tenant, app, password = NULL, username = NULL, certificate = NULL, auth_type = NULL, aad_host = \u0026#34;https://login.microsoftonline.com/\u0026#34;, version = 1, authorize_args = list(), token_args = list(), use_cache = NULL, on_behalf_of = NULL, auth_code = NULL, device_creds = NULL )\nShiny\rOh man, you would think just because you can produce something in a local R session, you can throw it into a shiny app and have it work right? right? Wrong ❌.. That was a learning here.\nI’ll mention too that on this new platform, we’ve chosen to use Posit Connect to host our shiny apps going forward. This product is definitely new to the DevOps team and while I have experience deploying apps to it, I don’t have experience in configuring it. 😶.\nSome weeks later, the connect server was setup, and I could deploy hello world apps to it from my local R instance. I could actually deploy my full app, but it essentially didn’t do anything since I didn’t re-factor the data connectivity. Small victories. 🏁\nHello App, with Azure\rOur first task was to setup any kind of hello world shiny app that could read the files stored in the Azure file container. We eventually got this to work by using the app-password (defined in the link above). This was a reassuring sign of being on the right track ☀️. But what we really needed was to use the user 👥 credentials (since they will be tied to data access within the app). This was a lot more challenging, but an absolute necessity given what my app does.📝\nI’ll say this vignette was super-helpful in theory, but a lot of the pains ⌛ were configurations specific to our companies internal systems 👨‍💻\nHello Matt, with Azure\rI tried for the life of me to get the app to pull my credentials with no luck. Relying on the app-password was just a non-starter for this project. Enter AzureGraph 🌄\nWe had Microsoft Graph setup in our Azure system. In the end, after many hours of googling (GPT-4 was not helpful here) and experimenting, I was able to get it working locally. Two steps forward, one step back. In the end, I managed to integrate the Graph work flow into a shiny app ✔️.\nThis is what I did:\n request a token 🌕️ using Microsoft Graph service. This toke️n did contain my user creds clone that token for use in another Microsoft Service, namely Azure Storage pass that token when listing/reading/writing files in Azure using AzureStor within the shiny app ↪️ ❓️❓️❓️ Profit 🤑.  It worked.\nBelow is the culmination of many hours and weeks of learning about Azure, and it’s integration into R and Shiny, with the added complexity of our companies systems/policies. 😝😝😝\n\r\r\rIn the above, I have a simple dashboard with a user card displaying credentials. What’s really neat is that since SSO is enabled, I only really need to click a button to actually get a token using the chain of events defined above. What’s this mean?\n\u0026lt;em\u0026gt;User’s don’t really have to “login” anymore 🔓. Even better, because the storage is setup and the ACL maintained, users only …","date":1688428800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1688428800,"objectID":"8c7196797e30a1ab83ea111291924562","permalink":"https://academic-demo.netlify.app/post/azure/","publishdate":"2023-07-04T00:00:00Z","relpermalink":"/post/azure/","section":"post","summary":"Preface\rI’ll preface with this post is related to a project I lead at work. I can’t share too many details about it here unfortunately (including code), but what I can safely share is my experience and process 💡.","tags":[],"title":"DevOps Bootcamp","type":"post"},{"authors":null,"categories":null,"content":"This was a fun 🤓 experiment to build the intuition of using Github Actions (GHA) to automate “things”. In this case, I use GHA to auto-deploy a shiny app to my personal shinyapps.io account.\nIn a nutshell, it works like this:\n Everytime a push is made to the master branch of this repo, a github action script is triggered 🏃🏃🏻🏃🏼 💨 The set of GHAs is specified using a yaml file, here ~/.github/workflows/deploy.yaml In the yaml file, you provide explicit instructions to build your app from the ground up. This includes everything from first installing R, R packages to deployment to shinyapps.io via the {rsconnect} package.🔀🔁 One the GHAs are finished, the app is made available at the destination. ✅  Pretty neat!\n\r\r\rIn order to test whether GHA was working, the sample app I created is a super-simple dashboard 📈📉📊 that takes a single reactive: the date and time of deployment ⏰. There are other, more informative ways to monitor their progress and I will be covering this and more in depth in my Quarto use-case write up 💬. Stay tuned!\nFor now, I want to make this available as it reflects a recent learning and a pattern I can see myself reusing in the future. Many thanks to the following people + resources 💪💪💪\n Kyle Cuilla Siqi Zhang Making Data Science Work for Clinical Reporting Coursera  Till next time, 🍻!\n","date":1678665600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678665600,"objectID":"2f292cd512a30db03cafdcc383d06603","permalink":"https://academic-demo.netlify.app/project/shiny_gha/","publishdate":"2023-03-13T00:00:00Z","relpermalink":"/project/shiny_gha/","section":"project","summary":"Github Actions for auto-deployment of shiny apps on shinyapps.io","tags":["CICD","Github Actions","Shiny"],"title":"GHA and Shiny","type":"project"},{"authors":[],"categories":[],"content":"I feel like there are countless examples on how to read a directory of .csv files into R using purrr 😺. However, in those examples the setup is potentially many CSV files being read in and stacked into a single data frame.\nWhat if we need to read several .csv (or other types) data files into their own data frame❓️💡\nIn my own work, this is an operation I typically do. Until recently, I haven’t bothered how to figure this out in purrr. Don’t ask how I was doing it before. 🤢\nHere’s a small snippet that will demonstrate how to use purrr::pmap() to perform this operation. Instead of .csv files, we’ll read in .xpt (SAS Transport) using haven::read_xpt()\nStep 1 Let’s first identify the relevant files we want to read in using list.files() and store this as a character vector.\nlibrary(purrr)\rlibrary(dplyr)\rfiles \u0026lt;- list.files(\u0026#34;C:\\\\\u0026#34;, pattern = \u0026#34;*.xpt\u0026#34;, full.names = TRUE)\r# preview\rfiles\r ## character(0)\r Step 2 Next, for each element of the files character vector, we’ll read in the corresponding file using a combination of purrr::map and haven::read_xpt. This will result in a list where each element corresponds to a tibble of the respective xpt file. At the sometime, we’ll attach the name to each element using purrr::setnames so we can identify what’s what.\nfilelists \u0026lt;- files %\u0026gt;%\rmap(., haven::read_xpt) %\u0026gt;%\rset_names(files %\u0026gt;% basename(.) %\u0026gt;% tools::file_path_sans_ext(.))\r Here’s what filelists looks like in R Studio:\n\r\r\rStep 3 Here’s the cool part. Let’s use purrr::pmap() and assign() to make a separate data frame for it in the global environment. We start by specifying .x to be the list of files and .y to be the names of the files. With these two inputs, we need to simply map them to a single assign() call and we’re done.💯\npurrr::pmap(.l = list(.x = filelists, .y = names(filelists)),\r.f = ~assign(.y, .x, envir = globalenv()))\r Here’s what my global environment looks like in R Studio:\n\r\r\rTill next time 🍻🙏 !\n","date":1678665600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678665600,"objectID":"fe2d31a43022661c0210105f238e7aa7","permalink":"https://academic-demo.netlify.app/post/2023-03-13-reading/purrr/","publishdate":"2023-03-13T00:00:00Z","relpermalink":"/post/2023-03-13-reading/purrr/","section":"post","summary":"I feel like there are countless examples on how to read a directory of .csv files into R using purrr 😺. However, in those examples the setup is potentially many CSV files being read in and stacked into a single data frame.","tags":[],"title":"reading files with purrr","type":"post"},{"authors":["Matthew Kumar; Srinivas Veeragoni"],"categories":null,"content":"","date":1678233600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678233600,"objectID":"a134b8bbe301333de290d0df5e6f5713","permalink":"https://academic-demo.netlify.app/talk/reproducibility-of-interactive-analyses/","publishdate":"2023-03-08T00:00:00Z","relpermalink":"/talk/reproducibility-of-interactive-analyses/","section":"event","summary":"Exploring code generation and reproducibility in the context of shiny apps","tags":[],"title":"Reproducibility of Interactive Analyses","type":"event"},{"authors":["Matthew Kumar","Srinivas Veeragoni"],"categories":null,"content":"","date":1678233600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678233600,"objectID":"3ee002ff40b925f1bfbf166885878ff6","permalink":"https://academic-demo.netlify.app/publication/shinymeta/","publishdate":"2023-03-08T00:00:00Z","relpermalink":"/publication/shinymeta/","section":"publication","summary":"","tags":null,"title":"Reproducibility of Interactive Analyses","type":"publication"},{"authors":null,"categories":null,"content":"Overview This is another entry into the ⚡R Studio 2022 Table Contest. This app enables the exploration of subgroups on-the-fly through linked, interactive tables, listings and figures (TLFs) for clinical trial data. It leverages Tplyr, reactable and reactablefmtr for computing and is presented as a dashboard using Quarto. \nMy aims for this project were two-fold:\n Investigate whether we can dynamically create tables which can be used to guide an exploratory analysis.  The analysis starts with an anchor table, where individual cells can be clicked to retrieve the study participants ID’s who comprise it. These are subsequently fed into additional tables, listings and figures through reactives.\nIn previous work, I’ve hard coded the anchor table by pre-specifying the variables to be displayed. With this work, you can now dynamically specify the anchor table to include any variables you like, which in turn can be used explore subgroups on-the-fly.\nThis work is largely enabled by utilizing the metadata building features of the Tplyr 📦.\nCurrently, no dashboard extension or package exists for Quarto. I used this opportunity to also see if I could (roughly) mimic what flexdashboard offers by using Quarto and custom css. My inspiration was the bootswatch lux theme. 👀  Approach The linked TLFs are also interactive and share the spirit of “drilling down” 🔃\nAdverse Events Table 🕵  Uses reactable’s groupBy to succinctly present a large table Cells (in the second column) are hyper-linked to open a MedlinePlus search of that term. I found this resource was helpful in learning about medical conditions when analyzing clinical trials data. A table-wide search functionality to pin-point certain SOCs/PTs of interest A button to expand all SOCs at once to show the nested PTs  Adverse Event Figure 📊  The highcharter column chart is a drill down plot. The first layer displays the top 4 System Organ Classes for a given subset Clicking each of bars lets you drill down into a stacked column chart for the Preferred Terms x Severity Customized tool tips to display information more clearly (i.e. severity of adverse event)  Patient Listing 1 📝  Uses reactable’s filter + search to navigate a potentially exhaustive table Leverages reactable’s columnGroups + formatting to organize the data layout Capable of exporting a list subject identifiers as a CSV file to enable further analyses of interesting subgroups  Patient Listing 2 📋  Uses reactablefmtr’s inline visual to show vital signs measured at three times relative to baseline (i.e. percent change) Leverages reactable’s columnGroups + formatting to organize the data layout Paired with shiny inputs to enable switching of Blood Pressure Parameters and Visits  Future This app can be extended in a number of different ways:\n Including additional, linked TLFs; the sky’s the limit! 🤩 Uploading data - the way I’ve began to structure the server will enable this in the future ⏫ More robust organization, control and validation for when the anchor table is updated 🛠  Till next time, 🍻!\n","date":1672272000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1672272000,"objectID":"ff40952afd95ef92c5b5783fdff5f117","permalink":"https://academic-demo.netlify.app/project/dynamic-tlf/","publishdate":"2022-12-29T00:00:00Z","relpermalink":"/project/dynamic-tlf/","section":"project","summary":"Exploring dynamic and interactive TLFs using Tplyr and reactable via Quarto","tags":["Data Visualization","Statistical","Table","Quarto","Shiny","CDISC"],"title":"Dynamic TLFs","type":"project"},{"authors":[],"categories":[],"content":"… or rather the latter the half of 2022 since I’m getting old and can’t remember the first half\nThis Blog I set out to initially redesign my portfolio this year. It involved migrating a lot of the content from my previous portfolio, which was hosted as a shiny app. At the same time, I said I’d try and use this portfolio as a general purpose for my “digital presence”. I’m happy that I’ve been able to keep up with writing blog posts and sharing side projects or code demonstrations. All of this is infinitely easier now that I use blogdown-github-netlify chain for content management. ⚡\nPosit 2022 Table Contest This year I decided to participate in the Posit 2022 table contest. I was quite surprised that all 3 of my entries placed! 1 received a runner-up and the other two both received honorable mentions! 🙏\nOverall, it was a rewarding experience because it was a natural outlet to experiment with new tech (Quarto, R packages) while finally putting to work some of the CSS/JS/HTML stuff I learned earlier in the year into something meaningful. ⚡\nYou can read the Posit announcement article here:\n👉 Posit Blog - Winners of the 2022 Table Contest\nAll of my entries to the contest are here on this site:\n🏃 Dynamic TLFs - Runner Up\n📣 Time Machine - Honorable Mention\n📣 Jeopardy! - Honorable Mention\nLastly, I encourage everyone to check out the full list of entries submitted my the community. Truly creative and inspiring takes on tabular representations of data! 😍 💪\nWork I want to briefly 💬 about my working or professional life this year.\nThe majority of my team is spread throughout the 🌍. In spite of this, 2022 was a year where we connected more closely than ever. I just want to say I’m super fortunate to work with my team and have their unrelenting support and encouragement. This also goes for the leadership teams that orbit my immediate and adjacent functions. I’ve never felt more empowered in a position knowing I having the trust and backing of management in my corner 🤜🤛. All things considered, I’m truly grateful to have such an amazing opportunity at Bayer. 🙏\nSo long, 2022 🍻!\n","date":1672272000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1672332424,"objectID":"6ff1e6fec709f33b27b8e6d51a344c12","permalink":"https://academic-demo.netlify.app/post/year-end/","publishdate":"2022-12-29T00:00:00Z","relpermalink":"/post/year-end/","section":"post","summary":"… or rather the latter the half of 2022 since I’m getting old and can’t remember the first half\nThis Blog I set out to initially redesign my portfolio this year.","tags":[],"title":"highlights of 2022","type":"post"},{"authors":null,"categories":null,"content":"Overview This is another entry into the ⚡R Studio 2022 Table Contest. It uses reactable, countup and css to recreate the time machine gizmo seen in the movie Back To The Future \nMy aims for this project were two-fold:\n  To think about creative uses of tables! ✅\n  Continue to experiment with reactable, css and Quarto. ✅\n  Approach My goal was to reenvision the following image as a table using R. \r\rI can divide my approach into 2 sections: general and styling\nGeneral When I first saw the above image, I thought it would make a great use-case for getting creative with tables. It was immediately apparent that the bulk of this work was going to boil down to styling. The general approach is quite simple:\n Create a data frame with the required data  data \u0026lt;- tibble::tribble(\r~MONTH, ~DAY, ~YEAR, ~AMPM, ~HOUR, ~COLON, ~MIN,\r\u0026#34;OCT\u0026#34;, 26, 1985, NA, 10, NA, 21,\r\u0026#34;OCT\u0026#34;, 26, 1985, NA, 10, NA, 22,\r\u0026#34;OCT\u0026#34;, 26, 1985, NA, 10, NA, 20\r)\r The AMPM and COLON columns are left as placeholders which get rendered in reactable.\nExecute 3 successive calls to a custom reactable function, one for each row of the table. E.g.  data %\u0026gt;%\rfilter(row_number() == 1) %\u0026gt;%\rmy_reactable()\r# etc\r my_reactable() is a wrapper that is written by me and takes care of the formatting of a single table row including the cell, column and footer rendering along with css. A great use-case for a function! 🎯\nStyling Much of my effort in this table was around styling. This involved quite a bit of work and playing around, and in the end I’m glad I saw it through to completion. 😥 ➡ 🤓\nCSS Yes, much of this table relies on custom css classes. It shouldn’t be taken for granted the amount of work needed however, including research on the following to match aesthetics:\n custom fonts, font sizes, color schemes using new html elements (i.e. \u0026lt;mark\u0026gt;\u0026lt;/mark\u0026gt;) animations with css leveraging the @extend directive to make my css file shorter and more compact 💥💥💥  Countup One neat package I was finally thrilled to have a use for was the countup by John Coene. In short, his package lets you transform the appearance of a number as if a counter were running as an html element. This integrated quite nicely with reactable and serves to give the illusion that the time machine is calibrating! 😵\n3D I also spent a bit of time learning some additional methods of css, namely perspective, skew, scale and transform. I decided to integrate this into this work as well as a separate table. 📦 This image was my inspiration: \r\rForward You can view these tables and all their interactive glory here\n🍻✌ Till next time!\n","date":1667779200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1667779200,"objectID":"836150b8fef21989254e759d0bed8fc2","permalink":"https://academic-demo.netlify.app/project/time_machine/","publishdate":"2022-11-07T00:00:00Z","relpermalink":"/project/time_machine/","section":"project","summary":"A Back To The Future time machine using reactable, countup and a lot of css","tags":["reactable","quarto","table"],"title":"Time Machine","type":"project"},{"authors":null,"categories":null,"content":"Overview This is my entry into the ⚡R Studio 2022 Table Contest. It uses reactable and scss in Quarto to style a Jeopardy! game board. \nMy aims for this project were three-fold:\n  To think about creative uses of tables! ✅\n  Learn how to use some of reactable’s custom rendering capabilities ✅\n  Continue to investigate and experiment (s)css and Quarto. ✅\n  Approach I start by pulling archived Jeopardy! game data using the whatr 📦. What’s nice is that each row of data is indexed by the row and column it appears on in the actual board 😝. This makes it simple to ensure the right content is in the right place. ✅\nIn the next step, I borrow some preexisting css for creating flip cards 🔍. I ♻️, 🔨 and 🗑 elements in order to match the aesthetic of Jeopardy! This was relatively straightforward, though researching colors and fonts took a bit of time.\nThe last step is to arrange the data once it’s been read into R into a format serviceable for display. I knew I planned to use reactable as the display table package and leverage escaping html.\nMethod 1 My first approach was to bake the html/css stuff directly into each cell, before passing it to reactable for escaping. It looked something like this:\n\r👉️ See Code\rraw_data %\u0026gt;%\r.... %\u0026gt;%\rmutate(content = if_else(row == 1,\r# html for header\rglue::glue(\u0026#39;\u0026lt;div class=\u0026#34;flip-card\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;flip-card-inner\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;flip-card-head\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;{category}\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;flip-card-head\u0026#34;\u0026gt;\r{category}\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\u0026#39;),\r# html for clues\rglue::glue(\u0026#39;\u0026lt;div class=\u0026#34;flip-card\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;flip-card-inner\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;flip-card-front\u0026#34;\u0026gt;\r{value}\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;flip-card-back\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;{clue}\u0026lt;/p\u0026gt;\r\u0026lt;details\u0026gt;\r\u0026lt;summary\u0026gt;Answer\u0026lt;/summary\u0026gt;\r\u0026lt;p\u0026gt;{answer}\u0026lt;/p\u0026gt;\r\u0026lt;/details\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\u0026#39;))) %\u0026gt;%\r.... %\u0026gt;%\rreactable(.,\rdefaultColDef = colDef(html = TRUE))\r \rWhile this certainly worked (it has in the past for me), I knew reactable had more to offer in terms of custom rendering. It was time to have a closer look at specifics. 😨\nMethod 2 It turns reactables defaultColDef argument works great for custom rendering in this case since every cell in my Jeopardy! board needs the same html/css treatment. It looks something like this:\n\r👉️ See Code\rreactable(table_data,\rsortable = FALSE,\rdefaultColDef = colDef(\rhtml = TRUE,\ralign = \u0026#34;center\u0026#34;,\r# Header Rendering\rheader = function(value) {\rtags$div(\rclass = \u0026#34;flip-card flip-card-head\u0026#34;,\rvalue\r)\r},\r# Cell Rendering\rcell = function(value, index) {\r# parse clue, answer from table cell\rcontent \u0026lt;- str_split(value, \u0026#34;;\u0026#34;, simplify = TRUE)\rclue \u0026lt;- content[1]\ranswer \u0026lt;- content[2]\r# cell content\rtags$div(\rclass = \u0026#34;flip-card\u0026#34;,\rtags$div(\rclass = \u0026#34;flip-card-inner\u0026#34;,\rtags$div(\rclass = \u0026#34;flip-card-front\u0026#34;,\r# multiply row index by 200 for tile value\rpaste(\u0026#34;$\u0026#34;, index * 200)\r),\rtags$div(\rclass = \u0026#34;flip-card-back\u0026#34;,\rclue,\rtags$details(\rtags$summary(\u0026#34;Answer\u0026#34;),\ranswer\r)\r)\r)\r)\r}\r)\r)\r \rI like this approach much better than the first because I’m keeping table and data wrangling parts of my workflow separate and hopefully more clear for readers. 🤓\nForward It’s been an awesome ride so far experimenting with Quarto and continuing to learn how to create and modify existing CSS. I’m happy that the R Studio 2022 Table Contest is currently taking place because it was a constructive outlet to build something that uses things I’ve recently learned.\n🍻✌ Enjoy!\n","date":1664323200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664323200,"objectID":"bf4a9b36827480f70a52133fb3da64c4","permalink":"https://academic-demo.netlify.app/project/jeopardy/","publishdate":"2022-09-28T00:00:00Z","relpermalink":"/project/jeopardy/","section":"project","summary":"Recreating a Jeopardy! game board using reactable and css in Quarto","tags":["reactable","quarto","table"],"title":"Jeopardy!","type":"project"},{"authors":null,"categories":null,"content":"Overview\rThis app is an initial exploration into shiny for Python which was revealed at rstudio::conf(2022) earlier this summer.🐍🐍🐍 Aim\nThe aim of the exploration was to try out the API and see whether I can recreate common patterns/functionalities I use in my other apps. The app is simple: Use the sample data (or upload your own) to run a basic linear regression analysis and display the resulting plot. Functionalities\rHere are the functionalities covered in the app:\n ✅ custom CSS (could you tell?) 🤣 ✅ data processing (file upload and external files) ✅ creating reactive objects ✅ rendering UI, plots, etc ✅ validation with req()  Deployment\rI currently have my app running on shinylive.io which seems to be a very promising serverless solution. You can also build your app as a static site (locally) and serve it via github pages or netlify.🤯🤯🤯 👉View the app + code in editor mode: make changes and\rexecute it all within the browser\rSee\rHere👈 👉 View the app served on github pages See Here👈 The one downside is that not all libraries are supported, which is understandable. I originally used the xport library to read SAS .xpt files instead of .csv files in development. Winston Chang’s talk provides more detail about this and the technology in general.\nFuture If and when this is included (or I figure out the rsconnect deployment, which is also an option by the way), the following code can be replaced easily to read .xpt import xport\rdef p():\rif input.file1() is None:\rreturn \u0026#34;Please upload a csv file\u0026#34;\rf: list[FileInfo] = input.file1()\rwith open(f[0][\u0026#34;datapath\u0026#34;], \u0026#39;rb\u0026#39;) as z:\rdf = xport.to_dataframe(z)\r That’s about it. I plan to do a blog post summarizing the experience further and my thoughts around the news of Rstudio’s “move” into the Python space later.\n🍻✌\n","date":1660953600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660953600,"objectID":"4fcc972491fe09b57ecac03e249f672a","permalink":"https://academic-demo.netlify.app/project/shinypy/","publishdate":"2022-08-20T00:00:00Z","relpermalink":"/project/shinypy/","section":"project","summary":"A relatively basic exploratory data analysis shiny app written in Python","tags":["shiny","Python"],"title":"shiny \u0026 Python","type":"project"},{"authors":[],"categories":[],"content":"… and by old, I mean really old. Like year 2008 old. Like the first R code I ever wrote.\nI recently went digging in an old dropbox account for photos and to my surprise I had saved a copy of my undergraduate thesis, complete with code.\nMy undergraduate degree was in Psychology and I had a keen interest in psychometrics. My thesis involved an application of item response theory to ordinal data.\n if you are interested, I used Samejima’s Graded Response Model to analyze responses made to the Barratt Impulsiveness Scale from a sample of first year university students\n At the time, my only experience with statistical software was with SPSS. I remember teaching myself how to use it only a year prior in order to double check my intro stats homework assignments 🤓🔬📏. I think that was a good move in retrospect because I was also able to spin that experience into a paid Stats Advisory position at the Psychology Resource Center.\nI digress.\nThe type of model I needed to fit for my thesis was only available through proprietary software. My thesis advisor recommended I look into R as he had caught wind of a package that could help. The upside was that it would be 🆓 and open source 🤑. The downside was that I was going to have to learn “syntax” 🤢. I was aware that SPSS had syntax facilities for advanced users, but it was always intimidating 😣.\nBut now I had to learn “syntax”. I’m laughing while typing this believe you me. 🤣 Anyway, I don’t quite recall the learning process, but I reckon it was difficult and in the end I was probably just relieved to get the job done. ✅🎓.I ended up having to write “syntax” for other supporting analyses in my thesis, namely Confirmatory Factor Analysis for assumption checking in LISREL. shudders\nFor historical (and sentimental reasons) I’ve included the R code in my thesis below. It marked the first steps on the path I’m on today.\nFrom what I can tell I was using R 2.8.1 and I’m happy to see the original 📦, ltm is still active on CRAN today.\nTill next time, 🍻✌\ninstall.packages(\u0026#34;ltm\u0026#34;, dependencies = TRUE)\r#downloads and installs the \u0026#39;LTM\u0026#39; packageto the user’s hard drive.\rlibrary(ltm)\r#loads the \u0026#39;LTM\u0026#39; package from the user’s hard drive\rattention = read.table(file.choose(),header=T)\r#prompts for location of data set\rgrm0 = grm(attention, constrained = TRUE, Hessian = TRUE)\r#fits the constrained GRM to the specified data set. The HESSIAN = TRUE argument computes standard error values.\rsummary(grm0)\r#returns the parameter estimates\rgrm1 = grm(attention, constrained = FALSE, Hessian = TRUE)\r#fits the unconstrained GRM and computes standard error values\rsummary(grm1)\r#returns the parameter estimates\ranova(grm0,grm1)\r#performs a likelihood ratio test on the two models.\rplot(grm1, type = \u0026#34;IIC\u0026#34;, lwd = 2, cex = 1.2, legend = TRUE, cx = \u0026#34;topleft\u0026#34;,xlab = \u0026#34;Latent\rTrait\u0026#34;, cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.1)\r#plots the IIFs\rplot(grm1, type = \u0026#34;IIC\u0026#34;, items = 0, lwd = 2, xlab = \u0026#34;Attention\u0026#34;,\rcex.main = 1.5, cex.lab = 1.3, cex.axis = 1.1)\r#plots the TIF\rplot(grm1, lwd = 2, cex = 1.2, legend = TRUE, cx = \u0026#34;left\u0026#34;,\rxlab = \u0026#34;Attention\u0026#34;, cex.main = 1.5, cex.lab = 1.3, cex.ax\ris = 1.1)\r#plots the CRCs\rplot(grm1, type = \u0026#34;OCCu\u0026#34;, lwd = 2, cex = 1.2, legend = TRUE, cx = \u0026#34;topleft\u0026#34;,\rxlab = \u0026#34;Attention\u0026#34;, cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.1)\r#plots the OCCs\r ","date":1656892800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656985624,"objectID":"18d623a7f3f8309132e76caf82bae7f0","permalink":"https://academic-demo.netlify.app/post/r-code/","publishdate":"2022-07-04T00:00:00Z","relpermalink":"/post/r-code/","section":"post","summary":"… and by old, I mean really old. Like year 2008 old. Like the first R code I ever wrote.\nI recently went digging in an old dropbox account for photos and to my surprise I had saved a copy of my undergraduate thesis, complete with code.","tags":[],"title":"old code and beginnings","type":"post"},{"authors":[],"categories":[],"content":"The default behavior in shiny::actionButton() is to open a web link in the current window. This approach has two potential implications for user-experience:\n The current progress within the shiny app will be lost; clicking 🔙 on your browser will reload the app 😭 This can (independent of #1) inadvertently divert users away from your app 🏃️💨  \r⬇️⬇️⬇️ See for yourself ⬇️⬇️⬇️ Click Me!\n\r\nSo what can we do?\n✖️ Do nothing. Leave it as is and let all the hard work you put into the app be overshadowed by the site your are linking to.\n✔️ Make the link open in a new tab or window.\n✔️ Force the link to open in a new window.\nThe distinction between the two latter choices boils down to a users default browser settings. If you use Chrome like me, opening a link (designed to open in a tab or new window) defaults to opening it in a new tab. For you, it might open in a new window. Who knows? 🎱\nIf you really need the link to open in a separate window, luckily with a little elbow grease we can make that a sure thing.🎯 We just need to explicitly specify the window height and width. You can also pass fullscreen=1 to make the new window, well, full screen. See the code snippet below.\n ⚠️Opening links in a new window may result in getting dinged by an ad-blocker. This is because the so-called new window is more of a pop-up rather than it being a truly new window (i.e. CTRL + N).\n Thank you iqis for pointing out that! 👽️\nBelow, I have three buttons and their corresponding code you might use in a shiny app. It’s pretty straight forward so I’ll end with saying keep user-experience front and center in your design! ✌🍻\n# Default - current\rshiny::actionButton(\u0026#39;btn1\u0026#39;,\r\u0026#39;Current Window\u0026#39;,\ronclick =\u0026#34;location.href=\u0026#39;http://google.com\u0026#39;;\u0026#34;)\r# New tab or window shiny::actionButton(\u0026#39;btn2\u0026#39;,\r\u0026#39;New Window or Tab\u0026#39;, onclick =\u0026#34;window.open(\u0026#39;http://google.com\u0026#39;, \u0026#39;_blank\u0026#39;)\u0026#34;)\r# New window\rshiny::actionButton(\u0026#39;btn3\u0026#39;,\r\u0026#39;New Window\u0026#39;, onclick =\u0026#34;window.open(\u0026#39;http://google.com\u0026#39;, \u0026#39;_blank\u0026#39;,\u0026#39;width=800,height=800\u0026#39;)\u0026#34;)\r Current Window New Window or Tab New Window\n","date":1655337600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655337600,"objectID":"20a440ec99507d92da7567ac9fa8ae2f","permalink":"https://academic-demo.netlify.app/post/shinybuttons/","publishdate":"2022-06-16T00:00:00Z","relpermalink":"/post/shinybuttons/","section":"post","summary":"The default behavior in shiny::actionButton() is to open a web link in the current window. This approach has two potential implications for user-experience:\n The current progress within the shiny app will be lost; clicking 🔙 on your browser will reload the app 😭 This can (independent of #1) inadvertently divert users away from your app 🏃️💨  \r⬇️⬇️⬇️ See for yourself ⬇️⬇️⬇️ Click Me!","tags":[],"title":"tweaking shiny actionButton","type":"post"},{"authors":[],"categories":[],"content":"I recently came across the whisker 📦, which is an R implementation of {{mustache}}. Say what 👨?\n … a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.\n If you’ve authored either Rmarkdown documents or shiny apps (using HTML templates) chances are this will feel familiar. ✅\nIn a previous post, I described a templating strategy to automatically generate patient profiles within a clinical trial context. Where as this strategy relied on Rmarkdown and actual R code to produce the per-patient summaries, the whisker approach is far more generic.\nIt’s also really easy to get started with. 🏁\n Create a generic template file with a placeholder for your content enclosed in {{}} Read the template into R Assign your content using placeholder name Write the results back  I’ll demonstrate with a simple template I’ve made in notepad.\n\r\r\rNow, in R we can do the following:\nlibrary(whisker)\r# read in template\rmy_template \u0026lt;- readLines(\u0026#39;template.txt\u0026#39;)\r# assign {{name}} to be \u0026#34;matt\u0026#34;\rdata \u0026lt;- list(name = \u0026#34;matt\u0026#34;)\r# write the results back\rwhisker.render(my_template, data = data) |\u0026gt;\rwriteLines(\u0026#34;output.txt\u0026#34;)\r Here is the result of the output \r\rSo what? Is this just a glorified search and replace functionality? 🤷️ No.\nThis is actually quite powerful when you start to think of the applications 🤔. ️️💡 Consider a complete R script as a “template\u0026#34;️. Something you tend to reuse in your work time to time. With whisker you can easily populate these templates and actually generate R (or other languages) scripts that can be executed as is.\nStill not convinced? Okay, think about how you could share some of this 💪 with your end users in the form a shiny app! ✌🍻\n","date":1655251200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655251200,"objectID":"ac7f58ccd92c17b61979e7190030a70d","permalink":"https://academic-demo.netlify.app/post/whisker/","publishdate":"2022-06-15T00:00:00Z","relpermalink":"/post/whisker/","section":"post","summary":"I recently came across the whisker 📦, which is an R implementation of {{mustache}}. Say what 👨?\n … a logic-less template syntax. It can be used for HTML, config files, source code - anything.","tags":[],"title":"mustaches and whiskers","type":"post"},{"authors":[],"categories":[],"content":"A prototype I was working on earlier this year needed to make use of data stored in an excel book. The data I needed were the URLS embedded in hyperlinks within cells of a sheet.\n\r\r\rThe cells in column B contain hyperlinks for which I need to extract out the URLs. For example, cell B4 has the value of: http://www.amazon.ca/. This is what I need access to.\nI figured one of the existing R packages that could extract this information. I checked the usual: readxl, xlsx, and openxlsx and was surprised that none could.\nMy next thought was to just have the URLs extracted in Excel, prior to reading them into R. Surely this was possible, right? Not without using a VBA macro. 🤢 I gave this an honest shot and it proved too cumbersome. No thanks.\nI read that it might be possible in Python with the openpyxl package. I haven’t a whole lot of experience with Python. I’ve been reading and hearing how easy it is to use Python within R and RStudio. I decided to give a go. Enter reticulate. 🐍🐍🐍\nThe example that follows can be broken down into a few steps:\n Install reticulate and figure out how it works Install python packages (openpyxl, pandas) within RStudio and figure out how they work Integrate everything into a simple workflow ❓️❓️❓️ Profit  Getting setup was actually the easy part. At least on my windows machine.\n# install reticulate\rinstall.packages(\u0026#34;reticulate\u0026#34;)\r# install a python distribution on my machine\rreticulate::install_miniconda\r# install python packages\rreticulate::py_install(\u0026#39;pandas\u0026#39;)\rreticulate::py_install(\u0026#39;openpyxl\u0026#39;)\r Next was actually figuring out how to use these packages. After a fair bit of reading documentation and tinkering, I was able to come up with the following function I’ve named get_hyperlink.py.\nimport openpyxl as xl\rimport pandas as pd\rdef get_hyperlink(path, sheet):\r# Define workbook, worksheet\rwb = xl.load_workbook(path)\rws = wb.get_sheet_by_name(sheet)\r# For all cells in the worksheet, if a hyperlink is detected:\r# 1. Extract the hyperlink target\r# 2. Otherwise just keep the original value as a string\rfor row_cells in ws.iter_rows():\rfor cell in row_cells:\rtry:\rcell.value = cell.hyperlink.target\rexcept:\rcell.value = str(cell.value)\r# Store values to a data frame, clean up headers tmp = pd.DataFrame(ws.values)\rtmp.rename(columns = tmp.iloc[0], inplace = True)\rtmp.drop(tmp.index[0], inplace = True)\rreturn tmp\r At this point, what’s left is integrating the python script into an existing R workflow so that I can actually use it.\nlibrary(reticulate)\r# Load python function\rsource_python(\u0026#34;get_hyperlink.py\u0026#34;)\r# Use python function\rmy_data \u0026lt;- get_hyperlink(path = \u0026#34;input.xlsx\u0026#34;, sheet = \u0026#34;Sheet1\u0026#34;)\r The results:\nhead(my_data)\r ## ID source1\r## 2 1 http://www.gmail.com/\r## 3 2 http://www.eventhubs.com/\r## 4 3 http://www.rstudio.com/\r## 5 4 http://www.amazon.ca/\r## 6 5 None\r And that’s a wrap! ✅🏁🍻\nActually, there’s one other feature of the reticulate package I want to share. If you’re new to Python like I am, it’s helpful to be able to tinker in a REPL (read-eval-print-loop) fashion. Calling reticulate::repl_python() provides one directly in your R session so you can tinker more naturally. 💪\n","date":1651622400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651700650,"objectID":"22b87fc4eb81d4d3ce19d4d4b09c63e0","permalink":"https://academic-demo.netlify.app/post/py-hyperlink/","publishdate":"2022-05-04T00:00:00Z","relpermalink":"/post/py-hyperlink/","section":"post","summary":"A prototype I was working on earlier this year needed to make use of data stored in an excel book. The data I needed were the URLS embedded in hyperlinks within cells of a sheet.","tags":[],"title":"Reticulate to the Rescue","type":"post"},{"authors":[],"categories":[],"content":"Welcome to my new… blog?\nThis was a long time coming. My previous portfolio was getting cumbersome to maintain. I have no idea why I structured it as a shiny app. Whoopsies.\nAnyway, if you’re reading this, this is my new digital home. I plan to share my thoughts and some of my work here going forward. I’ve started to back-port some of the previous stuff I’ve worked in and plan to add newer content here in the future.\nIf you’re into R, Shiny, or statistics I think you’ll enjoy this place. I hope you stick around!\nA special shoutout to Andreas Handel’s guide for getting started with blogdown and Hugo.\n","date":1651536000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651628824,"objectID":"1217334b30f90fb7e05ccda05ab19313","permalink":"https://academic-demo.netlify.app/post/hello-world/","publishdate":"2022-05-03T00:00:00Z","relpermalink":"/post/hello-world/","section":"post","summary":"Welcome to my new… blog?\nThis was a long time coming. My previous portfolio was getting cumbersome to maintain. I have no idea why I structured it as a shiny app.","tags":[],"title":"Hello World","type":"post"},{"authors":null,"categories":null,"content":"Overview\rOn March 31, 2022 I had the pleasure of attending the CDISC Open Source Alliance (COSA) Spotlight where from various CDISC community members shared exciting developments from their work. If you\u0026#39;re interested in the recording, it can be viewed here. Among presenters were Mike Stackhouse and Eli Miller from Atorus demonstrating a new feature coming to {Tplyr}: the ability to to query and retrieve individual observations from a summary table using a metadata-driven approach.\rImagine a generic table. Imagine clicking on a particular cell of that table. Imagine being able to easily identify patients that comprise that cell. Let that sink in for a second as I did. Pretty powerful stuff...\rAn Example\rExcited to give it a try, I spent the weekend coding up this example. It uses a demographics table as an anchor. Once a cell is selected, a variety of TLFs are linked for the patients in that cell.\r\r\rHere is the anchor TLF. I\u0026#39;ve clicked on the overall total cell for patients categorized as being  80 years of age. There are N = 77 such patients. \r\r\rHere is the first linked TLF. A simple listing of the N = 77 patients. In Tplyr, you can specify any additional columns you wish to have too.\n\r\r\rI mentioned figures! Here is a safety figure and an efficacy figure for those N = 77 patients. Each of these figures are also interactive thanks to {highcharter}.\n\r\r\rLastly, here is a TLF from a completely separate section (i.e. safety) for those N = 77 patients. I’ve leveraged some of the neat features of {reactable} to nest things.\n\r\r\rForward\rNow take this impulse and multiply it by an entire catalog of TLFs and add to it Shiny\u0026#39;s capabilities - what have you got? \r\rA Swiss army knife of productivity capable of serving many functions. Think stat analysts, statisticians, medical writing and more...\rAccess\rYou can try the app I created for this example here.\r\r\rYou can also access the specific build of `{Tplyr}` with these capabilities by going here.  remotes::install_github(\u0026#34;atorus-research/Tplyr@20beb73cd4c202308afbbb57c1f2b6e1590295b7\u0026#34;)\n I’ll definitely be keeping an eye on more developments and hope to share more with you here.\n","date":1649116800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1649116800,"objectID":"f0de75d938b899aaa6e36b51836bef2e","permalink":"https://academic-demo.netlify.app/project/tplyr/","publishdate":"2022-04-05T00:00:00Z","relpermalink":"/project/tplyr/","section":"project","summary":"Using Tplyr and Shiny to create interactive + linked tables, listings and figures","tags":["Data Visualization","Statistical","Table","Metadata","Shiny","CDISC"],"title":"Linked TLFs","type":"project"},{"authors":["Daneman N","Lee S","Bai H","Bell C","Bronskill SE","Campitelli MA","Dobell G","Fu L","Garber G","Ivers N","Matthew Kumar","Lam J","Langford B","Laur C","Morris A","Mulhall C","Pinto R","Saxena FE","Schwartz","Brown K"],"categories":null,"content":"","date":1646179200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646179200,"objectID":"67e93b4ee3b84f14ede85691e13d9a99","permalink":"https://academic-demo.netlify.app/publication/rct/","publishdate":"2022-03-02T00:00:00Z","relpermalink":"/publication/rct/","section":"publication","summary":"","tags":null,"title":"Behavioral Nudges to Improve Audit and Feedback Report Opening Among Antibiotic Prescribers A Randomized Controlled Trial","type":"publication"},{"authors":null,"categories":null,"content":"My educational background and training was in Biostatistics. Throughout my career, I’ve served many different roles, from statistician to programmer to epidemiologist to most recently, computational scientist. Over the last bit, I’ve kind of lost touch with my mathematical and statistical roots. Every so often, I will dive back into some concepts to remind myself how it works and learn of any new developments.\nBayesian statistics was an interesting course in my graduate program. Unfortunately, I haven’t used it as much as I would have wished, but I am simply fascinated by the math. At the same time, it can be challenging to wrap your head around what’s going on underneath the hood in the estimation process. This is precisely why I made this post.\n I’ll stop here to direct you towards the original (more comprehensive) post I made concerning this topic, which can be found here\n In short, this project involved a few key activities that helped refresh my memory and deepen my understanding, all through using R, animation and simulation.\n  Simulating data arising from a statistical model with known parameters. Logistic regression was the use case.\n  Fitting the model on simulated data to recover the known parameters, verifying the simulation worked.\n  Building an MCMC sampler (Random Walks Metropolis-Hastings) in order to fit a Bayesian version of the logistic regression model\n  Understand exactly what the algorithm does at each step and visualize this via animation. Understand the impact of different priors, candidate distributions, and jump steps in the algorithm.\n  Compare results obtained through the MCMC sampler against what we previously obtained.\n  To this end, I prepared three visualizations I’d like to share.\n\r\r\rThis visualization shows the first 100 iterations of a single chain in estimating the parameters of the Bayesian logistic regression analysis. I’ve overlaid a table that shows the current and previous values, and the decision taken by the algorithim.\n\r\r\rThis visualization shows the full 10,000 iterations of the single chain. I’ve removed the table of estimates. Here it’s quite clear that the chain quickly settles into the area of the known parameter estimates.\n\r\r\rThe last visualization mixes things up a bit, by providing 4 chains, each with different starting or initialization values. In the end, they all converge. Kind of.\nHope you find it useful!\n","date":1636848000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1636848000,"objectID":"e00a75198bc3ea4a399946d1923ef5e5","permalink":"https://academic-demo.netlify.app/project/mcmc/","publishdate":"2021-11-14T00:00:00Z","relpermalink":"/project/mcmc/","section":"project","summary":"Unpacking a bunch of related statistical concepts through visualization","tags":["Data Visualization","Statistical","Simulation","Animation"],"title":"Visual MCMC","type":"project"},{"authors":null,"categories":null,"content":"This was a neat experiment using the {gganimate} package for storytelling purposes. In the Kaplan-Meier plot, animation serves as the vehicle to unravel chronological events in a fictitious Oncology clinical trial.\nSome features include:\n  Animation of the individual survival curves over time - here you can see how fast the probability of survival drops quite clearly.\n  Tracking of number of events and number at risk in real time.\n  The use of stopping points to emphasize when the median survival time is achieved\n  The use of stopping points to emphasize contextual information such as planned analyses dates and results of interim stats. Note: may or may not make actual sense given the data.\n  \r\r\rI also had a bit of fun to see where else this could potentially play a role. In the below graph, we compare theoretical versus observed values from a simulation study to see where across the axes the biggest differences lie.\n\r\r\rThis was experiment sparked further discussion into how we can help our Stat colleagues during their round-table discussions. It was eventually spun off into a shiny app.\nGood times.\n","date":1626825600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626825600,"objectID":"8bb617d086444f3c788e6498846e2919","permalink":"https://academic-demo.netlify.app/project/tte_animations/","publishdate":"2021-07-21T00:00:00Z","relpermalink":"/project/tte_animations/","section":"project","summary":"An experiment in storytelling using animation for statistical analysis","tags":["Data Visualization","Statistical","Pharma","Animation"],"title":"Animated KM","type":"project"},{"authors":null,"categories":null,"content":"Trumboywg.js is a lightweight, what-you-see-is-what-you-get, text editor written in jQuery.\nI really wanted to use this library in my shiny apps (some work related, some personal), but I couldn’t locate any prior efforts in an R port. Therefore, I used this opportunity to learn to do it myself using the {htmlwidgets} package.\nI was able to successfully port over the base version of Trumbowyg and it can be called quite easily using the familiar shiny widget:\ntrumbowygInput(id = \u0026#34;id\u0026#34;,\rlabel = \u0026#34;text\u0026#34;,\rvalue = \u0026#34;Hello world!\u0026#34;)\nAt the same time, many plugins are available for Trumbowyg, such as emoji’s, text coloring, highlighting, and more. I was able to also learn enough to use them natively and to have them be a part of the package.\nThis was a great learning experience to see how javascript integrates with R and Shiny under the hood. It’s helped me develop a deeper appreciation for the work that goes into creating shiny extensions that I think we all (certainly I!) sometimes take for granted!\nA quick shoutout to John Coene and Maya Gans for their various works in describing how to bridge the gap between javascript and R!\nYou may view a demo of this here\n","date":1625184000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625184000,"objectID":"c7e3555092c1fae1e48c9ce111b20c37","permalink":"https://academic-demo.netlify.app/project/shiny-richtext/","publishdate":"2021-07-02T00:00:00Z","relpermalink":"/project/shiny-richtext/","section":"project","summary":"A 'WYSIWYG' text editor widget for Shiny and Rmarkdown","tags":["Shiny","Rmarkdown"],"title":"shinyTrumbowyg","type":"project"},{"authors":[],"categories":null,"content":"","date":1623628800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623628800,"objectID":"126b8c1bbcdf2f796227acd82d5c3106","permalink":"https://academic-demo.netlify.app/talk/table-based-data-visualizations-using-r/","publishdate":"2021-06-14T00:00:00Z","relpermalink":"/talk/table-based-data-visualizations-using-r/","section":"event","summary":"Exploring the use of table-based data visualizations in clinical trials","tags":[],"title":"Table-based Data Visualizations using R","type":"event"},{"authors":null,"categories":null,"content":"Frappe charts is a modern, open source SVG charting library written in javascript.\nI had been reading John Coene’s Javascript for R, an excellent exposition into building widgets for R, and was inspired to put my new-found knowledge to the test. I selected the Frappe charts library as my use case and wanted to see how far down the rabbit hole I could go.\nI was successful in porting over some of the charts and put them (very crudely) into a few R functions for use in Shiny, Rmarkdown and the viewer in R Studio IDE. I probably won’t flesh this package out further as it was for educational purposes.\nBelow you can find a sample of what it can currently create:\n\r\r\rNothing earth-shattering, but very satisfying in being able to do some of this myself rather than waiting for someone else to.\n","date":1623542400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623542400,"objectID":"171bf861306afb8c168c0c6eae8886f7","permalink":"https://academic-demo.netlify.app/project/frappe/","publishdate":"2021-06-13T00:00:00Z","relpermalink":"/project/frappe/","section":"project","summary":"My first attempt at porting a JS plotting library to R! Frappe Charts for all!","tags":["Shiny","Rmarkdown","Data Visualization"],"title":"frappe Charts","type":"project"},{"authors":["Yan M","Saxena F","Calzavara A","Brown K","Garber G","Gershon A","Johnstone J","Matthew Kumar","Langford B","Lee S","Schwartz K","Daneman N"],"categories":null,"content":"","date":1621555200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621555200,"objectID":"0240cf735be199dcc7e7cd9e7e1f3774","permalink":"https://academic-demo.netlify.app/publication/macrolide/","publishdate":"2021-05-21T00:00:00Z","relpermalink":"/publication/macrolide/","section":"publication","summary":"","tags":null,"title":"Long-term macrolide therapy for chronic obstructive pulmonary disease a population-based time series analysis","type":"publication"},{"authors":null,"categories":null,"content":"I had recently learned about patient safety narratives, a key deliverable in clinical study reporting that is prepared on a per-patient basis. At the same time, I was also looking to extend my Rmarkdown knowledge to create automated workflows or “pipelines”. You can see where this is going right?\nMy aim was pretty clear: I wanted to create an Rmarkdown-based reporting engine, capable of automatically creating safety narratives for all participants in a clinical trial based on a single template.\nFor this example, I borrowed the clinical trial data from the PHUSE Github Repository, openly available here\nNext, I got to work in seeing what data elements I would want to pick out for my narratives. I was less concerned with what’s actually in a narrative and more interested in the process of automating their creation. Nevertheless, I picked some elements that I think are relevant such as:\n Patient Age/Sex/Race Dates of first and last treatment Adverse Events, including reported term, severity, outcome and associated dates  The technical part of this project was interesting to think about and research. I ultimately decided with the following approach:\n Create a template or skeleton structure of a narrative that will be applied to each patients data The template includes data wrangling steps that will be repeated for each subject. In here, I also include a table object just to test out variety. Using Rmarkdown’s parameters (here each subject’s unique identifier), loop through the unique identifier list and have the corresponding report created.  This was great and I was able to get it to work almost immediately.\nHowever…\nI wanted extend the current approach by providing a user interface to the engine. This is especially useful for non-programming colleagues (or colleagues not familiar with R or Rmarkdown). Enter Shiny.\nBriefly, the user experience can be described as:\n A list of patient identifiers are populated in a DataTable, and the user is instructed to select all or some of the patients they wish to generate a report for. The user then has the option to select the format of their narratives: .docx, .html, or .pdf Once selections are made, from here the process works similar to the above, but within the Shiny server context. The last step involves collecting all generated reports, bundling them into a single zip file, and returning them to the user as a download. While this process happens in real time, a progress bar is provided to the user as feedback.  That last part still amazes me.\nI’ve since taken this a few steps further, investigating even more approaches (e.g. parent-child reports) and conditional execution of narrative text based on values of users data and including graphics. I will likely update this repo to include those enhancements, but for now enjoy as is!\n","date":1614384000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614384000,"objectID":"b16ca520b392a187a28c39451c6781ec","permalink":"https://academic-demo.netlify.app/project/rmarkdown-reporting-engine/","publishdate":"2021-02-27T00:00:00Z","relpermalink":"/project/rmarkdown-reporting-engine/","section":"project","summary":"Rmarkdown reporting engine for automating patient safety narratives in a clinical trial.","tags":["Shiny","Rmarkdown","Reporting","Automation","Pharma","CDISC","PHUSE"],"title":"Auto-Narratives","type":"project"},{"authors":null,"categories":null,"content":"The following project was a second entry into the first R Studio table contest held in 2020.\nI don’t even know where to start with this one. I was looking at creative uses of a table and I landed on the idea of using a table as a calendar.\nAt the same time, I was really into figuring out how to incorporate custom CSS into shiny. I had found this awesome 8-bit inspired CSS library and immediately wanted to use it. You can view it here.\nBuilding on my previous experience of the reactable package (and custom JS), I kind of went HAM on this one:\n  In addition to the custom bezel, added animated gifs from the super mario games\n  Added (borrwed) JS code to give the particle effect of snow falling (it was December afterall!)\n  Using JS, set custom modals on certain dates to mimic the feel of a calendar invite in Outlook. These are also stylized to match the overall aesthetic.\n  \r\r\r","date":1604448000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604448000,"objectID":"8480453c82fadf87ba30c88dcdab0eba","permalink":"https://academic-demo.netlify.app/project/calendar/","publishdate":"2020-11-04T00:00:00Z","relpermalink":"/project/calendar/","section":"project","summary":"An reactable-based calendar and a whole lot of javascript and CSS","tags":["Shiny","Data Visualization","Contest","Table","JS","CSS"],"title":"React Calendar","type":"project"},{"authors":null,"categories":null,"content":"The following project was an entry into the first R Studio table contest held in 2020.\nIt depicts a standard survival analysis using the Kaplan-Meier method. Accompanying the graph is an interactive Number at Risk (DT) table which can be clicked.\n\r\r\rUpon clicking a cell of the Number at Risk table, a second (Reactable) table is produced for those subjects.\nIn this table, contextual information is given for these subjects and an inline, interactive swimmer plot (Highcharter) is also produced.\n\r\r\rSadly this table did not place in the contest, though parts of it have made it’s way into some of our team projects.\nI learned a lot about JS and Reactable in this project, which has since become my display table package of choice within R :)\n","date":1600560000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600560000,"objectID":"4f62a39ac07397402827fb1a44c83525","permalink":"https://academic-demo.netlify.app/project/surv_tables/","publishdate":"2020-09-20T00:00:00Z","relpermalink":"/project/surv_tables/","section":"project","summary":"Interactive survival analysis tables using DT and reactable display table packages","tags":["Shiny","Data Visualization","Contest","Table","JS","Statistical","Pharma"],"title":"Survival Tables","type":"project"},{"authors":["Guttmann A","Saunders NR","Matthew Kumar","Gandhi S","Diong C","MacCon K","Cairney J"],"categories":null,"content":"","date":1596240000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596240000,"objectID":"c6f5a95bc803b83c5f5cbe1fc26887ee","permalink":"https://academic-demo.netlify.app/publication/ewbv-paper/","publishdate":"2020-08-01T00:00:00Z","relpermalink":"/publication/ewbv-paper/","section":"publication","summary":"","tags":null,"title":"Implementation of a Physician Incentive Program for 18-Month Developmental Screening in Ontario, Canada","type":"publication"},{"authors":["Weisman A","Tu K","Young J","Matthew Kumar","Austin PC","Jaakkimainen L","Lipscombe L","Aronson R","Booth G"],"categories":null,"content":"","date":1591574400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591574400,"objectID":"f996f054015c0fe2ddc0483df6cf37db","permalink":"https://academic-demo.netlify.app/publication/type2diabetes/","publishdate":"2020-06-08T00:00:00Z","relpermalink":"/publication/type2diabetes/","section":"publication","summary":"","tags":null,"title":"Validation of a type 1 diabetes algorithm using electronic medical records and administrative healthcare data to study the population incidence and prevalence of type 1 diabetes in Ontario, Canada","type":"publication"},{"authors":[],"categories":null,"content":"","date":1575417600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575417600,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://academic-demo.netlify.app/talk/data-manipulation-with-r/","publishdate":"2019-12-04T00:00:00Z","relpermalink":"/talk/data-manipulation-with-r/","section":"event","summary":"An interactive presentation on data manipulation in R geared towards SAS users","tags":[],"title":"Data Manipulation with R","type":"event"},{"authors":["Iaboni A","Campitelli MA","Bronskill SE","Diong C","Matthew Kumar","Maclagan L","Gomes T","Tadorus M","Maxwell CJ"],"categories":null,"content":"","date":1569024000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569024000,"objectID":"2e711e352db11af3b5320b3003fd74dd","permalink":"https://academic-demo.netlify.app/publication/opioid/","publishdate":"2019-09-21T00:00:00Z","relpermalink":"/publication/opioid/","section":"publication","summary":"","tags":null,"title":"Time trends in opioid prescribing among Ontario long-term care residents - a repeated cross-sectional study","type":"publication"},{"authors":null,"categories":null,"content":"In a previous role, creating forest plots were a routine task in almost any project that involved studying statistical associations between various exposures and outcomes using population-level data. These usually came in the form of logistic regression (odds ratios) or Cox models (hazard ratios) and needed to be visualized, often using a forest plot.\nWhile that role (and organization) was very SAS-centric, no macro or PROC, to my knowledge, existed at the time that made this process painless. Often analysts would turn to Excel (cringe) and spend needless hours trying to format shoehorn their results into a template.\nTo help overcome this, I created a forest plot in R and shared it with colleagues. As more and more wished to use it and adapt it, I realized this was a good candidate for a Shiny app. So, regardless of familiarity with R, all project members could craft a high-quality, publication ready forest plot for the journal article submission.\nTo help bridge the gap between SAS and R, I structured the input data set required by the shiny app around what PROC logistic or Lifetest would spit out via ODS (or something very near). This was also because at the time, most statistical analyses were not done in R.\nSo, the app works like this.\n I provide you a template with some light conventions to follow. These mimic most SAS PROCS ODS outputs. Fill in the template and upload it to the app. I provide you a good deal of aesthetic control (color, log-scaling, custom breaks, text, etc) to customize your plot. Download your plot as a high-res PDF. ??? Profit.  There’s sample data in the app. You can edit it to your liking or just click Proceed. Give it a shot.\n","date":1568246400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568246400,"objectID":"13f8df0df6f3cddde5143c1b13c5635f","permalink":"https://academic-demo.netlify.app/project/forestr/","publishdate":"2019-09-12T00:00:00Z","relpermalink":"/project/forestr/","section":"project","summary":"An interactive tool to create publication-quality forest plots","tags":["Shiny","Data Visualization","Statistical"],"title":"forestR","type":"project"},{"authors":null,"categories":null,"content":"The idea of ‘Visual Abstracts’ have recently become popular and are particularly efficient in distilling the main findings of original research.\nI wanted to create an application that enabled users (or non programmers in general) to create nice visual summaries for their research projects they could share over social media. I’ve added a fair bit of control and customization in the application mostly related to layout and aesthetics.\nThis project was entered into the first ever (2019) Shiny Competition hosted by R Studio and received an honorable mention. You can view the original blog entry here.\nI also ended up turning this app into a package, which can be installed locally on your machine from CRAN.\n install.packages(\u0026#34;abstractr\u0026#34;)\n ","date":1547337600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547337600,"objectID":"157883992b4671d519bc49ae8b0df350","permalink":"https://academic-demo.netlify.app/project/abstractr/","publishdate":"2019-01-13T00:00:00Z","relpermalink":"/project/abstractr/","section":"project","summary":"Create a visual abstract to highlight your original research.","tags":["Data Visualization"],"title":"Visual Abstracts","type":"project"},{"authors":["Campitelli MA","Matthew Kumar","Greenberg A","ICES/HQO Ontario Laboratory Information System Working Group"],"categories":null,"content":"","date":1532131200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532131200,"objectID":"0e5851279687630dd14a7c675cb98904","permalink":"https://academic-demo.netlify.app/publication/olis-ltc/","publishdate":"2018-07-21T00:00:00Z","relpermalink":"/publication/olis-ltc/","section":"publication","summary":"","tags":null,"title":"Long-term macrolide therapy for chronic obstructive pulmonary disease a population-based time series analysis","type":"publication"},{"authors":null,"categories":null,"content":"Ah yes, my first expedition into building an R package and having it submitted to CRAN.\n install.packages(\u0026#39;funnelR\u0026#39;)\n In retrospect, I’ve learned quite a bit since about package building, reproducibility and the need for tests. Many of which are absent here.\nI’ve included this entry here as it served as a major milestone for personal development. It even made the Top 40 New Package Picks shortly after it was released.\nI leave you with the vignettes to see what this package is all about. To give some context, in a previous role funnel plots were a staple of most statistical analyses involving our population-level data holdings.\n The funnelR package provides a flexible framework for creating funnel plots for proportion data. A funnel plot is a powerful visualization in the analysis of unit level performance relative to some criterion. It readily allows identification of units that are In Control or Extreme according to a benchmark at a specified level of confidence (e.g.95%).\n  Framed this way, a funnel plot can be applied to any number of fields of study to monitor and identify units that deviate from what is considered typical. For example, it could be used to differentiate schools that are high, average or low performing on a standardized test according to a National or State benchmark. From a quality improvement point of view, they might help identify which hospitals have extreme mortality or surgical complication rates relative to a benchmark prescribed by a government body.\n  The funnelR package provides many options to specify elements of a funnel plot including user defined: control limits, benchmarks, and estimation methods. It also has the capability to write scored results (i.e. a variable that records whether a unit is In Control or Extreme according to the specifications of the funnel plot) to your sample data set. This variable might then be included in further analysis such as cross-tabulations (e.g. stratification) or regression modeling (e.g. covariate).\n  While many flavors of funnel plots exist (rates, ratios, etc.), the current package considers funnel plots assuming proportion data that is binomially distributed. The interested reader is referred to Spiegelhalter (2005) for further details.\n If you’re interested in a specific use case (the one highlighted in the banner), I got you covered\nIf you want to see more flavors, I turn you to the FunnelPlotR package which is more comprehensive in types of analyses covered and actively maintained.\n","date":1520985600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1520985600,"objectID":"e870861441e1238ec105d1acf0780972","permalink":"https://academic-demo.netlify.app/project/funnelr/","publishdate":"2018-03-14T00:00:00Z","relpermalink":"/project/funnelr/","section":"project","summary":"Create funnel plots for proportion data using ggplot2.","tags":["Data Visualization","Statistical"],"title":"funnelR","type":"project"},{"authors":["Mozessohn L","Earle C","Spaner D","Cheng SY","Matthew Kumar","Buckstein R"],"categories":null,"content":"","date":1477008000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1477008000,"objectID":"f11239158fa05beb900b4ccf706ef518","permalink":"https://academic-demo.netlify.app/publication/cll/","publishdate":"2016-10-21T00:00:00Z","relpermalink":"/publication/cll/","section":"publication","summary":"","tags":null,"title":"The association of dyslipidemia with Chronic Lymphocytic Leukemia - a population-based study","type":"publication"},{"authors":["Govindarajan A","Urbach D","Matthew Kumar","Li Q","Murray BJ","Juurlink D","Kennedy E","Gagliardi A","Sutradhar R","Baxter NN"],"categories":null,"content":"","date":1440115200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1440115200,"objectID":"6647723859dbe11ed8b5310486acaa15","permalink":"https://academic-demo.netlify.app/publication/nighttime-outcomes/","publishdate":"2015-08-21T00:00:00Z","relpermalink":"/publication/nighttime-outcomes/","section":"publication","summary":"","tags":null,"title":"Outcomes of Daytime Procedures Performed by Attending Surgeons after Night Work","type":"publication"},{"authors":["Vahabi M","Lofters A","Matthew Kumar","Glazier RH"],"categories":null,"content":"","date":1436054400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1436054400,"objectID":"e30197f68c14896cf768f46e4990915a","permalink":"https://academic-demo.netlify.app/publication/breast_immigrant/","publishdate":"2015-07-05T00:00:00Z","relpermalink":"/publication/breast_immigrant/","section":"publication","summary":"","tags":null,"title":"Breast cancer screening disparities among immigrant women by world region of origin - a population-based study in Ontario, Canada","type":"publication"},{"authors":["Vahabi M","Lofters A","Matthew Kumar","Glazier RH"],"categories":null,"content":"","date":1435708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1435708800,"objectID":"950990cc06749c14f388e0fe006ff6b9","permalink":"https://academic-demo.netlify.app/publication/breast_urban/","publishdate":"2015-07-01T00:00:00Z","relpermalink":"/publication/breast_urban/","section":"publication","summary":"","tags":null,"title":"Breast cancer screening disparities among urban immigrants - a population-based study in Ontario, Canada","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://academic-demo.netlify.app/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]