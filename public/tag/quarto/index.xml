<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>quarto | Matthew Kumar</title>
    <link>https://academic-demo.netlify.app/tag/quarto/</link>
      <atom:link href="https://academic-demo.netlify.app/tag/quarto/index.xml" rel="self" type="application/rss+xml" />
    <description>quarto</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 07 Nov 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://academic-demo.netlify.app/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>quarto</title>
      <link>https://academic-demo.netlify.app/tag/quarto/</link>
    </image>
    
    <item>
      <title>Time Machine</title>
      <link>https://academic-demo.netlify.app/project/time_machine/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/time_machine/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is another entry into the ‚ö°&lt;a href=&#34;https://mattkumar.quarto.pub/time-travel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio 2022 Table Contest.&lt;/a&gt;
It uses reactable, countup and css to recreate the time machine gizmo seen in the movie &lt;a href=&#34;https://www.imdb.com/title/tt0088763/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Back To The Future&lt;/a&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;My aims for this project were two-fold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To think about creative uses of tables! ‚úÖ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue to experiment with reactable, css and Quarto. ‚úÖ&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;
&lt;p&gt;My goal was to reenvision the following image as a table using R. 
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://images.squarespace-cdn.com/content/v1/545f5b33e4b0719cb5aee3a5/1606653495764-HE8UCUWTBZR2M4IWXOLA/Screen&amp;#43;Shot&amp;#43;2020-11-29&amp;#43;at&amp;#43;12.36.14.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I can divide my approach into 2 sections: general and styling&lt;/p&gt;
&lt;h3 id=&#34;general&#34;&gt;General&lt;/h3&gt;
&lt;p&gt;When I first saw the above image, I thought it would make a great use-case for getting creative with tables. It was immediately apparent that the bulk of this work was going to boil down to styling. The general approach is quite simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a data frame with the required data&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;data &amp;lt;- tibble::tribble(
  ~MONTH, ~DAY, ~YEAR, ~AMPM, ~HOUR, ~COLON, ~MIN,
   &amp;quot;OCT&amp;quot;,   26,  1985,    NA,    10,     NA,   21,
   &amp;quot;OCT&amp;quot;,   26,  1985,    NA,    10,     NA,   22,
   &amp;quot;OCT&amp;quot;,   26,  1985,    NA,    10,     NA,   20
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;AMPM&lt;/strong&gt; and &lt;strong&gt;COLON&lt;/strong&gt; columns are left as placeholders which get rendered in &lt;code&gt;reactable&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Execute &lt;strong&gt;3&lt;/strong&gt; successive calls to a custom &lt;code&gt;reactable&lt;/code&gt; function, one for each row of the table. E.g.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;data %&amp;gt;%
  filter(row_number() == 1) %&amp;gt;%
  my_reactable()
  
# etc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;my_reactable()&lt;/code&gt; is a wrapper that is written by me and takes care of the formatting of a single table row including the cell, column and footer rendering along with css. A great use-case for a function! üéØ&lt;/p&gt;
&lt;h3 id=&#34;styling&#34;&gt;Styling&lt;/h3&gt;
&lt;p&gt;Much of my effort in this table was around styling. This involved quite a bit of work and playing around, and in the end I&amp;rsquo;m glad I saw it through to completion. üò• ‚û° ü§ì&lt;/p&gt;
&lt;h4 id=&#34;css&#34;&gt;CSS&lt;/h4&gt;
&lt;p&gt;Yes, much of this table relies on custom css classes. It shouldn&amp;rsquo;t be taken for granted the amount of work needed however, including research on the following to match aesthetics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;custom fonts, font sizes, color schemes&lt;/li&gt;
&lt;li&gt;using new html elements (i.e. &lt;code&gt;&amp;lt;mark&amp;gt;&amp;lt;/mark&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;animations with css&lt;/li&gt;
&lt;li&gt;leveraging the &lt;code&gt;@extend&lt;/code&gt; directive to make my css file shorter and more compact üí•üí•üí•&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;countup&#34;&gt;Countup&lt;/h4&gt;
&lt;p&gt;One neat package I was finally thrilled to have a use for was the &lt;a href=&#34;https://github.com/JohnCoene/countup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;countup&lt;/a&gt; by &lt;a href=&#34;https://john-coene.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Coene&lt;/a&gt;. In short, his package lets you transform the appearance of a number as if a counter were running as an html element. This integrated quite nicely with &lt;code&gt;reactable&lt;/code&gt; and serves to give the illusion that the time machine is calibrating! üòµ&lt;/p&gt;
&lt;h4 id=&#34;3d&#34;&gt;3D&lt;/h4&gt;
&lt;p&gt;I also spent a bit of time learning some additional methods of css, namely &lt;code&gt;perspective&lt;/code&gt;, &lt;code&gt;skew&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt;. I decided to integrate this into this work as well as a separate table. üì¶ This image was my inspiration:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://www.rookscastle.com/tutorials/bttf-int-016-1.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;forward&#34;&gt;Forward&lt;/h3&gt;
&lt;p&gt;You can view these tables and all their interactive glory &lt;a href=&#34;https://mattkumar.quarto.pub/time-travel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üçª‚úå  Till next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jeopardy!</title>
      <link>https://academic-demo.netlify.app/project/jeopardy/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/jeopardy/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is my entry into the ‚ö°&lt;a href=&#34;https://www.rstudio.com/blog/rstudio-table-contest-2022/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio 2022 Table Contest.&lt;/a&gt;
It uses reactable and scss in Quarto to style a Jeopardy! game board. &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;My aims for this project were three-fold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To think about creative uses of tables! ‚úÖ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn how to use some of &lt;code&gt;reactable&lt;/code&gt;&amp;rsquo;s custom rendering capabilities ‚úÖ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue to investigate and experiment (s)css and Quarto. ‚úÖ&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;
&lt;p&gt;I start by pulling archived Jeopardy! game data using the &lt;code&gt;whatr&lt;/code&gt; üì¶. What&amp;rsquo;s nice is that each row of data is indexed by the row and column it appears on in the actual board üòù. This makes it simple to ensure the &lt;em&gt;right content&lt;/em&gt; is in the &lt;em&gt;right place.&lt;/em&gt; ‚úÖ&lt;/p&gt;
&lt;p&gt;In the next step, I borrow some preexisting css for creating &lt;a href=&#34;https://www.w3schools.com/howto/howto_css_flip_card.asp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;flip cards&lt;/a&gt; üîç. I ‚ôªÔ∏è, üî®  and üóë elements in order to match the aesthetic of Jeopardy! This was relatively straightforward, though researching colors and fonts took a bit of time.&lt;/p&gt;
&lt;p&gt;The last step is to arrange the data once it&amp;rsquo;s been read into R into a format serviceable for display. I knew I planned to use &lt;code&gt;reactable&lt;/code&gt; as the display table package and leverage escaping html.&lt;/p&gt;
&lt;h3 id=&#34;method-1&#34;&gt;Method 1&lt;/h3&gt;
&lt;p&gt;My first approach was to bake the html/css stuff directly into each cell, before passing it to reactable for escaping. It looked something like this:&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;üëâÔ∏è See Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,&#34;&gt;raw_data %&amp;gt;%
  .... %&amp;gt;%
  mutate(content = if_else(row == 1,
                           # html for header
                           glue::glue(&#39;&amp;lt;div class=&amp;quot;flip-card&amp;quot;&amp;gt;
                                        &amp;lt;div class=&amp;quot;flip-card-inner&amp;quot;&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-head&amp;quot;&amp;gt;
                                            &amp;lt;p&amp;gt;{category}&amp;lt;/p&amp;gt;
                                          &amp;lt;/div&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-head&amp;quot;&amp;gt;
                                            {category}
                                          &amp;lt;/div&amp;gt;
                                        &amp;lt;/div&amp;gt;
                                      &amp;lt;/div&amp;gt;&#39;),
                           # html for clues
                           glue::glue(&#39;&amp;lt;div class=&amp;quot;flip-card&amp;quot;&amp;gt;
                                        &amp;lt;div class=&amp;quot;flip-card-inner&amp;quot;&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-front&amp;quot;&amp;gt;
                                            {value}
                                          &amp;lt;/div&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-back&amp;quot;&amp;gt;
                                            &amp;lt;p&amp;gt;{clue}&amp;lt;/p&amp;gt;
                                            &amp;lt;details&amp;gt;
                                            &amp;lt;summary&amp;gt;Answer&amp;lt;/summary&amp;gt;
                                            &amp;lt;p&amp;gt;{answer}&amp;lt;/p&amp;gt;
                                          &amp;lt;/details&amp;gt;
                                          &amp;lt;/div&amp;gt;
                                        &amp;lt;/div&amp;gt;
                                      &amp;lt;/div&amp;gt;&#39;))) %&amp;gt;%
 .... %&amp;gt;%
 reactable(.,
           defaultColDef = colDef(html = TRUE))
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;While this certainly worked (it has in the past for me), I knew reactable had more to offer in terms of custom rendering. It was time to have a closer look at specifics. üò®&lt;/p&gt;
&lt;h3 id=&#34;method-2&#34;&gt;Method 2&lt;/h3&gt;
&lt;p&gt;It turns reactables &lt;code&gt;defaultColDef&lt;/code&gt; argument works great for custom rendering in this case since every cell in my Jeopardy! board needs the same html/css treatment. It looks something like this:&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;üëâÔ∏è See Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,&#34;&gt;reactable(table_data,
  sortable = FALSE,
  defaultColDef = colDef(
    html = TRUE,
    align = &amp;quot;center&amp;quot;,
    # Header Rendering
    header = function(value) {
      tags$div(
        class = &amp;quot;flip-card flip-card-head&amp;quot;,
        value
      )
    },
    # Cell Rendering
    cell = function(value, index) {
      # parse clue, answer from table cell
      content &amp;lt;- str_split(value, &amp;quot;;&amp;quot;, simplify = TRUE)
      clue &amp;lt;- content[1]
      answer &amp;lt;- content[2]
      # cell content
      tags$div(
        class = &amp;quot;flip-card&amp;quot;,
        tags$div(
          class = &amp;quot;flip-card-inner&amp;quot;,
          tags$div(
            class = &amp;quot;flip-card-front&amp;quot;,
            # multiply row index by 200 for tile value
            paste(&amp;quot;$&amp;quot;, index * 200)
          ),
          tags$div(
            class = &amp;quot;flip-card-back&amp;quot;,
            clue,
            tags$details(
              tags$summary(&amp;quot;Answer&amp;quot;),
              answer
            )
          )
        )
      )
    }
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;I like this approach much better than the first because I&amp;rsquo;m keeping table and data wrangling parts of my workflow separate and hopefully more clear for readers. ü§ì&lt;/p&gt;
&lt;h2 id=&#34;forward&#34;&gt;Forward&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s been an awesome ride so far experimenting with Quarto and continuing to learn how to create and modify existing CSS. I&amp;rsquo;m happy that the &lt;a href=&#34;https://www.rstudio.com/blog/rstudio-table-contest-2022/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio 2022 Table Contest&lt;/a&gt; is currently taking place because it was a constructive outlet to build something that uses things I&amp;rsquo;ve recently learned.&lt;/p&gt;
&lt;p&gt;üçª‚úå Enjoy!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
