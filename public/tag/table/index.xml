<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Table | Matthew Kumar</title>
    <link>https://academic-demo.netlify.app/tag/table/</link>
      <atom:link href="https://academic-demo.netlify.app/tag/table/index.xml" rel="self" type="application/rss+xml" />
    <description>Table</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 29 Dec 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://academic-demo.netlify.app/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>Table</title>
      <link>https://academic-demo.netlify.app/tag/table/</link>
    </image>
    
    <item>
      <title>Dynamic TLFs</title>
      <link>https://academic-demo.netlify.app/project/dynamic-tlf/</link>
      <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/dynamic-tlf/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is another entry into the ⚡&lt;a href=&#34;https://mattkumar.quarto.pub/time-travel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio 2022 Table Contest.&lt;/a&gt;
This app enables the exploration of subgroups on-the-fly through linked, interactive tables, listings and figures (TLFs) for clinical trial data. It leverages Tplyr, reactable and reactablefmtr for computing and is presented as a dashboard using Quarto. &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;My aims for this project were two-fold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Investigate whether we can dynamically create tables which can be used to guide an exploratory analysis.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The analysis starts with an anchor table, where individual cells can be clicked to retrieve the study participants ID&amp;rsquo;s who comprise it. These are subsequently fed into additional tables, listings and figures through reactives.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://matt-kumar.netlify.app/project/tplyr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous work&lt;/a&gt;, I&amp;rsquo;ve hard coded the anchor table by pre-specifying the variables to be displayed. With this work, you can now dynamically specify the anchor table to include any variables you like, which in turn can be used explore subgroups on-the-fly.&lt;/p&gt;
&lt;p&gt;This work is largely enabled by utilizing the metadata building features of the &lt;a href=&#34;https://cran.r-project.org/web/packages/Tplyr/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tplyr&lt;/a&gt; 📦.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Currently, no dashboard extension or package exists for Quarto. I used this opportunity to also see if I could (roughly) mimic what flexdashboard offers by using Quarto and custom css. My inspiration was the bootswatch lux theme. 👀&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;
&lt;p&gt;The linked TLFs are also interactive and share the spirit of &amp;ldquo;drilling down&amp;rdquo; 🔃&lt;/p&gt;
&lt;h3 id=&#34;adverse-events-table-&#34;&gt;Adverse Events Table 🕵&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Uses reactable&amp;rsquo;s groupBy to succinctly present a large table&lt;/li&gt;
&lt;li&gt;Cells (in the second column) are hyper-linked to open a MedlinePlus search of that term. I found this resource was helpful in learning about medical conditions when analyzing clinical trials data.&lt;/li&gt;
&lt;li&gt;A table-wide search functionality to pin-point certain SOCs/PTs of interest&lt;/li&gt;
&lt;li&gt;A button to expand all SOCs at once to show the nested PTs&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;adverse-event-figure-&#34;&gt;Adverse Event Figure 📊&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The highcharter column chart is a drill down plot. The first layer displays the top 4 System Organ Classes for a given subset&lt;/li&gt;
&lt;li&gt;Clicking each of bars lets you drill down into a stacked column chart for the Preferred Terms x Severity&lt;/li&gt;
&lt;li&gt;Customized tool tips to display information more clearly (i.e. severity of adverse event)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;patient-listing-1-&#34;&gt;Patient Listing 1 📝&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Uses reactable&amp;rsquo;s filter + search to navigate a potentially exhaustive table&lt;/li&gt;
&lt;li&gt;Leverages reactable&amp;rsquo;s columnGroups + formatting to organize the data layout&lt;/li&gt;
&lt;li&gt;Capable of exporting a list subject identifiers as a CSV file to enable further analyses of interesting subgroups&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;patient-listing-2-&#34;&gt;Patient Listing 2 📋&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Uses reactablefmtr&amp;rsquo;s inline visual to show vital signs measured at three times relative to baseline (i.e. percent change)&lt;/li&gt;
&lt;li&gt;Leverages reactable&amp;rsquo;s columnGroups + formatting to organize the data layout&lt;/li&gt;
&lt;li&gt;Paired with shiny inputs to enable switching of Blood Pressure Parameters and Visits&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;p&gt;This app can be extended in a number of different ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Including additional, linked TLFs; the sky&amp;rsquo;s the limit! 🤩&lt;/li&gt;
&lt;li&gt;Uploading data - the way I&amp;rsquo;ve began to structure the server will enable this in the future ⏫&lt;/li&gt;
&lt;li&gt;More robust organization, control and validation for when the anchor table is updated 🛠&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Till next time, 🍻!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time Machine</title>
      <link>https://academic-demo.netlify.app/project/time_machine/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/time_machine/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is another entry into the ⚡&lt;a href=&#34;https://mattkumar.quarto.pub/time-travel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio 2022 Table Contest.&lt;/a&gt;
It uses reactable, countup and css to recreate the time machine gizmo seen in the movie &lt;a href=&#34;https://www.imdb.com/title/tt0088763/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Back To The Future&lt;/a&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;My aims for this project were two-fold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To think about creative uses of tables! ✅&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue to experiment with reactable, css and Quarto. ✅&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;
&lt;p&gt;My goal was to reenvision the following image as a table using R. 
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://images.squarespace-cdn.com/content/v1/545f5b33e4b0719cb5aee3a5/1606653495764-HE8UCUWTBZR2M4IWXOLA/Screen&amp;#43;Shot&amp;#43;2020-11-29&amp;#43;at&amp;#43;12.36.14.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I can divide my approach into 2 sections: general and styling&lt;/p&gt;
&lt;h3 id=&#34;general&#34;&gt;General&lt;/h3&gt;
&lt;p&gt;When I first saw the above image, I thought it would make a great use-case for getting creative with tables. It was immediately apparent that the bulk of this work was going to boil down to styling. The general approach is quite simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a data frame with the required data&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;data &amp;lt;- tibble::tribble(
  ~MONTH, ~DAY, ~YEAR, ~AMPM, ~HOUR, ~COLON, ~MIN,
   &amp;quot;OCT&amp;quot;,   26,  1985,    NA,    10,     NA,   21,
   &amp;quot;OCT&amp;quot;,   26,  1985,    NA,    10,     NA,   22,
   &amp;quot;OCT&amp;quot;,   26,  1985,    NA,    10,     NA,   20
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;AMPM&lt;/strong&gt; and &lt;strong&gt;COLON&lt;/strong&gt; columns are left as placeholders which get rendered in &lt;code&gt;reactable&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Execute &lt;strong&gt;3&lt;/strong&gt; successive calls to a custom &lt;code&gt;reactable&lt;/code&gt; function, one for each row of the table. E.g.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;data %&amp;gt;%
  filter(row_number() == 1) %&amp;gt;%
  my_reactable()
  
# etc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;my_reactable()&lt;/code&gt; is a wrapper that is written by me and takes care of the formatting of a single table row including the cell, column and footer rendering along with css. A great use-case for a function! 🎯&lt;/p&gt;
&lt;h3 id=&#34;styling&#34;&gt;Styling&lt;/h3&gt;
&lt;p&gt;Much of my effort in this table was around styling. This involved quite a bit of work and playing around, and in the end I&amp;rsquo;m glad I saw it through to completion. 😥 ➡ 🤓&lt;/p&gt;
&lt;h4 id=&#34;css&#34;&gt;CSS&lt;/h4&gt;
&lt;p&gt;Yes, much of this table relies on custom css classes. It shouldn&amp;rsquo;t be taken for granted the amount of work needed however, including research on the following to match aesthetics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;custom fonts, font sizes, color schemes&lt;/li&gt;
&lt;li&gt;using new html elements (i.e. &lt;code&gt;&amp;lt;mark&amp;gt;&amp;lt;/mark&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;animations with css&lt;/li&gt;
&lt;li&gt;leveraging the &lt;code&gt;@extend&lt;/code&gt; directive to make my css file shorter and more compact 💥💥💥&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;countup&#34;&gt;Countup&lt;/h4&gt;
&lt;p&gt;One neat package I was finally thrilled to have a use for was the &lt;a href=&#34;https://github.com/JohnCoene/countup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;countup&lt;/a&gt; by &lt;a href=&#34;https://john-coene.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Coene&lt;/a&gt;. In short, his package lets you transform the appearance of a number as if a counter were running as an html element. This integrated quite nicely with &lt;code&gt;reactable&lt;/code&gt; and serves to give the illusion that the time machine is calibrating! 😵&lt;/p&gt;
&lt;h4 id=&#34;3d&#34;&gt;3D&lt;/h4&gt;
&lt;p&gt;I also spent a bit of time learning some additional methods of css, namely &lt;code&gt;perspective&lt;/code&gt;, &lt;code&gt;skew&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt;. I decided to integrate this into this work as well as a separate table. 📦 This image was my inspiration:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://www.rookscastle.com/tutorials/bttf-int-016-1.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;forward&#34;&gt;Forward&lt;/h3&gt;
&lt;p&gt;You can view these tables and all their interactive glory &lt;a href=&#34;https://mattkumar.quarto.pub/time-travel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🍻✌  Till next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jeopardy!</title>
      <link>https://academic-demo.netlify.app/project/jeopardy/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/jeopardy/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is my entry into the ⚡&lt;a href=&#34;https://www.rstudio.com/blog/rstudio-table-contest-2022/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio 2022 Table Contest.&lt;/a&gt;
It uses reactable and scss in Quarto to style a Jeopardy! game board. &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;My aims for this project were three-fold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To think about creative uses of tables! ✅&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn how to use some of &lt;code&gt;reactable&lt;/code&gt;&amp;rsquo;s custom rendering capabilities ✅&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue to investigate and experiment (s)css and Quarto. ✅&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;
&lt;p&gt;I start by pulling archived Jeopardy! game data using the &lt;code&gt;whatr&lt;/code&gt; 📦. What&amp;rsquo;s nice is that each row of data is indexed by the row and column it appears on in the actual board 😝. This makes it simple to ensure the &lt;em&gt;right content&lt;/em&gt; is in the &lt;em&gt;right place.&lt;/em&gt; ✅&lt;/p&gt;
&lt;p&gt;In the next step, I borrow some preexisting css for creating &lt;a href=&#34;https://www.w3schools.com/howto/howto_css_flip_card.asp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;flip cards&lt;/a&gt; 🔍. I ♻️, 🔨  and 🗑 elements in order to match the aesthetic of Jeopardy! This was relatively straightforward, though researching colors and fonts took a bit of time.&lt;/p&gt;
&lt;p&gt;The last step is to arrange the data once it&amp;rsquo;s been read into R into a format serviceable for display. I knew I planned to use &lt;code&gt;reactable&lt;/code&gt; as the display table package and leverage escaping html.&lt;/p&gt;
&lt;h3 id=&#34;method-1&#34;&gt;Method 1&lt;/h3&gt;
&lt;p&gt;My first approach was to bake the html/css stuff directly into each cell, before passing it to reactable for escaping. It looked something like this:&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;👉️ See Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,&#34;&gt;raw_data %&amp;gt;%
  .... %&amp;gt;%
  mutate(content = if_else(row == 1,
                           # html for header
                           glue::glue(&#39;&amp;lt;div class=&amp;quot;flip-card&amp;quot;&amp;gt;
                                        &amp;lt;div class=&amp;quot;flip-card-inner&amp;quot;&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-head&amp;quot;&amp;gt;
                                            &amp;lt;p&amp;gt;{category}&amp;lt;/p&amp;gt;
                                          &amp;lt;/div&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-head&amp;quot;&amp;gt;
                                            {category}
                                          &amp;lt;/div&amp;gt;
                                        &amp;lt;/div&amp;gt;
                                      &amp;lt;/div&amp;gt;&#39;),
                           # html for clues
                           glue::glue(&#39;&amp;lt;div class=&amp;quot;flip-card&amp;quot;&amp;gt;
                                        &amp;lt;div class=&amp;quot;flip-card-inner&amp;quot;&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-front&amp;quot;&amp;gt;
                                            {value}
                                          &amp;lt;/div&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-back&amp;quot;&amp;gt;
                                            &amp;lt;p&amp;gt;{clue}&amp;lt;/p&amp;gt;
                                            &amp;lt;details&amp;gt;
                                            &amp;lt;summary&amp;gt;Answer&amp;lt;/summary&amp;gt;
                                            &amp;lt;p&amp;gt;{answer}&amp;lt;/p&amp;gt;
                                          &amp;lt;/details&amp;gt;
                                          &amp;lt;/div&amp;gt;
                                        &amp;lt;/div&amp;gt;
                                      &amp;lt;/div&amp;gt;&#39;))) %&amp;gt;%
 .... %&amp;gt;%
 reactable(.,
           defaultColDef = colDef(html = TRUE))
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;While this certainly worked (it has in the past for me), I knew reactable had more to offer in terms of custom rendering. It was time to have a closer look at specifics. 😨&lt;/p&gt;
&lt;h3 id=&#34;method-2&#34;&gt;Method 2&lt;/h3&gt;
&lt;p&gt;It turns reactables &lt;code&gt;defaultColDef&lt;/code&gt; argument works great for custom rendering in this case since every cell in my Jeopardy! board needs the same html/css treatment. It looks something like this:&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;👉️ See Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,&#34;&gt;reactable(table_data,
  sortable = FALSE,
  defaultColDef = colDef(
    html = TRUE,
    align = &amp;quot;center&amp;quot;,
    # Header Rendering
    header = function(value) {
      tags$div(
        class = &amp;quot;flip-card flip-card-head&amp;quot;,
        value
      )
    },
    # Cell Rendering
    cell = function(value, index) {
      # parse clue, answer from table cell
      content &amp;lt;- str_split(value, &amp;quot;;&amp;quot;, simplify = TRUE)
      clue &amp;lt;- content[1]
      answer &amp;lt;- content[2]
      # cell content
      tags$div(
        class = &amp;quot;flip-card&amp;quot;,
        tags$div(
          class = &amp;quot;flip-card-inner&amp;quot;,
          tags$div(
            class = &amp;quot;flip-card-front&amp;quot;,
            # multiply row index by 200 for tile value
            paste(&amp;quot;$&amp;quot;, index * 200)
          ),
          tags$div(
            class = &amp;quot;flip-card-back&amp;quot;,
            clue,
            tags$details(
              tags$summary(&amp;quot;Answer&amp;quot;),
              answer
            )
          )
        )
      )
    }
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;I like this approach much better than the first because I&amp;rsquo;m keeping table and data wrangling parts of my workflow separate and hopefully more clear for readers. 🤓&lt;/p&gt;
&lt;h2 id=&#34;forward&#34;&gt;Forward&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s been an awesome ride so far experimenting with Quarto and continuing to learn how to create and modify existing CSS. I&amp;rsquo;m happy that the &lt;a href=&#34;https://www.rstudio.com/blog/rstudio-table-contest-2022/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio 2022 Table Contest&lt;/a&gt; is currently taking place because it was a constructive outlet to build something that uses things I&amp;rsquo;ve recently learned.&lt;/p&gt;
&lt;p&gt;🍻✌ Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linked TLFs</title>
      <link>https://academic-demo.netlify.app/project/tplyr/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/tplyr/</guid>
      <description>&lt;h2&gt;Overview&lt;/h2&gt;
On March 31, 2022 I had the pleasure of attending the CDISC Open Source Alliance (COSA) Spotlight where  from various CDISC community members shared exciting developments from their work. If you&#39;re interested in the recording, it can be viewed &lt;a href=&#34;https://www.cdisc.org/events/webinar/cdisc-open-source-alliance-spotlight&#34;&gt;here.&lt;/a&gt; 
&lt;br&gt;
&lt;br&gt;
Among presenters were &lt;a href=&#34;https://www.linkedin.com/in/michael-s-stackhouse/&#34;&gt;Mike Stackhouse&lt;/a&gt; and &lt;a href=&#34;https://www.linkedin.com/in/eli-miller-90532a87/&#34;&gt;Eli Miller&lt;/a&gt; from &lt;a href=&#34;https://www.atorusresearch.com/&#34;&gt;Atorus&lt;/a&gt; demonstrating a new feature coming to &lt;code&gt;{Tplyr}&lt;/code&gt;: &lt;b&gt;the ability to to query and retrieve individual observations from a summary table using a metadata-driven approach.&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
Imagine a generic table. Imagine clicking on a particular cell of that table. Imagine being able to easily identify patients that comprise that cell. Let that sink in for a second as I did. Pretty powerful stuff...
&lt;h2&gt;An Example&lt;/h2&gt;
Excited to give it a try, I spent the weekend coding up this example. It uses a demographics table as an anchor. Once a cell is selected, a variety of TLFs are &lt;b&gt;linked&lt;/b&gt; for the patients in that cell.
&lt;/br&gt;
&lt;/br&gt;
Here is the anchor TLF. I&#39;ve clicked on the overall total cell for patients categorized as being &gt; 80 years of age. There are N = 77 such patients.  
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;anchor&#34; srcset=&#34;
               /project/tplyr/t1_hud0f9c355be00ffbf55516980e7c03402_68375_0c95c0e0468d3f309507d0db1191fe2a.webp 400w,
               /project/tplyr/t1_hud0f9c355be00ffbf55516980e7c03402_68375_5cacf636a8e0ff3b5e2ea314ccc7dbd4.webp 760w,
               /project/tplyr/t1_hud0f9c355be00ffbf55516980e7c03402_68375_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/tplyr/t1_hud0f9c355be00ffbf55516980e7c03402_68375_0c95c0e0468d3f309507d0db1191fe2a.webp&#34;
               width=&#34;760&#34;
               height=&#34;576&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Here is the first linked TLF. A simple listing of the N = 77 patients. In Tplyr, you can specify any additional columns you wish to have too.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;listing&#34; srcset=&#34;
               /project/tplyr/t2_hub2aa4f4dd0f50af8aad19c52f1210e24_29694_d84f335c4a6db0c54a46a4bc5efef0d8.webp 400w,
               /project/tplyr/t2_hub2aa4f4dd0f50af8aad19c52f1210e24_29694_7f824f4b050aa6f41cedf060f8a2aa38.webp 760w,
               /project/tplyr/t2_hub2aa4f4dd0f50af8aad19c52f1210e24_29694_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/tplyr/t2_hub2aa4f4dd0f50af8aad19c52f1210e24_29694_d84f335c4a6db0c54a46a4bc5efef0d8.webp&#34;
               width=&#34;424&#34;
               height=&#34;638&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I mentioned figures! Here is a safety figure and an efficacy figure for those N = 77 patients. Each of these figures are also interactive thanks to &lt;code&gt;{highcharter}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;figures&#34; srcset=&#34;
               /project/tplyr/t3_hued9bccd0b40c21f207dcbcb72b66b4a6_61270_923ea559bc1feafdbb493019fd48bdd7.webp 400w,
               /project/tplyr/t3_hued9bccd0b40c21f207dcbcb72b66b4a6_61270_13fb13383987b3630ef29e490962230e.webp 760w,
               /project/tplyr/t3_hued9bccd0b40c21f207dcbcb72b66b4a6_61270_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/tplyr/t3_hued9bccd0b40c21f207dcbcb72b66b4a6_61270_923ea559bc1feafdbb493019fd48bdd7.webp&#34;
               width=&#34;760&#34;
               height=&#34;398&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Lastly, here is a TLF from a completely separate section (i.e. safety) for those N = 77 patients. I&amp;rsquo;ve leveraged some of the neat features of &lt;code&gt;{reactable}&lt;/code&gt; to nest things.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;tlf2&#34; srcset=&#34;
               /project/tplyr/t4_hu661b4305fbdc0509785935e60a5a364d_94981_925eb2975b88deec5721e76c49608dd0.webp 400w,
               /project/tplyr/t4_hu661b4305fbdc0509785935e60a5a364d_94981_777df67d149219e193c4b64b479f2e72.webp 760w,
               /project/tplyr/t4_hu661b4305fbdc0509785935e60a5a364d_94981_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/tplyr/t4_hu661b4305fbdc0509785935e60a5a364d_94981_925eb2975b88deec5721e76c49608dd0.webp&#34;
               width=&#34;760&#34;
               height=&#34;446&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2&gt;Forward&lt;/h2&gt;
Now take this impulse and multiply it by an entire catalog of TLFs and add to it Shiny&#39;s capabilities - what have you got? 
&lt;/br&gt;
&lt;/br&gt;
A Swiss army knife of productivity capable of serving many functions. Think stat analysts, statisticians, medical writing and more...
&lt;h2&gt;Access&lt;/h2&gt;
You can try the app I created for this example &lt;a href=&#34;https://matt-kumar.shinyapps.io/linked_tlfs/&#34;&gt;here.&lt;/a&gt;
&lt;/br&gt;
&lt;/br&gt;
You can also access the specific build of `{Tplyr}` with these capabilities by going &lt;a href=&#34;https://github.com/atorus-research/Tplyr/tree/gh_issue_32&#34;&gt;here.&lt;/a&gt; 
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;remotes::install_github(&amp;quot;atorus-research/Tplyr@20beb73cd4c202308afbbb57c1f2b6e1590295b7&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ll definitely be keeping an eye on more developments and hope to share more with you here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React Calendar</title>
      <link>https://academic-demo.netlify.app/project/calendar/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/calendar/</guid>
      <description>&lt;p&gt;The following project was a second entry into the first R Studio table contest held in 2020.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t even know where to start with this one. I was looking at creative uses of a table and I landed on the idea of using a table as a calendar.&lt;/p&gt;
&lt;p&gt;At the same time, I was really into figuring out how to incorporate custom CSS into shiny. I had found this awesome 8-bit inspired CSS library and immediately wanted to use it. You can view it &lt;a href=&#34;https://nostalgic-css.github.io/NES.css/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Building on my previous experience of the &lt;code&gt;reactable&lt;/code&gt; package (and custom JS), I kind of went HAM on this one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In addition to the custom bezel, added animated gifs from the super mario games&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added (borrwed) JS code to give the particle effect of snow falling (it was December afterall!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using JS, set custom modals on certain dates to mimic the feel of a calendar invite in Outlook. These are also stylized to match the overall aesthetic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;NAR Table&#34;
           src=&#34;https://academic-demo.netlify.app/project/calendar/screencap.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Survival Tables</title>
      <link>https://academic-demo.netlify.app/project/surv_tables/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/surv_tables/</guid>
      <description>&lt;p&gt;The following project was an entry into the first R Studio table contest held in 2020.&lt;/p&gt;
&lt;p&gt;It depicts a standard survival analysis using the Kaplan-Meier method. Accompanying the graph is an interactive Number at Risk (DT) table which can be clicked.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;NAR Table&#34; srcset=&#34;
               /project/surv_tables/t1_hu115f7e56b7edb68c77d990046f66e7aa_42029_7ccfc8aca693c795dfbdcca2fd3e291a.webp 400w,
               /project/surv_tables/t1_hu115f7e56b7edb68c77d990046f66e7aa_42029_74ae0797eaee4fe1d814d48d3646fc3d.webp 760w,
               /project/surv_tables/t1_hu115f7e56b7edb68c77d990046f66e7aa_42029_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/surv_tables/t1_hu115f7e56b7edb68c77d990046f66e7aa_42029_7ccfc8aca693c795dfbdcca2fd3e291a.webp&#34;
               width=&#34;760&#34;
               height=&#34;718&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Upon clicking a cell of the Number at Risk table, a second (Reactable) table is produced for those subjects.&lt;/p&gt;
&lt;p&gt;In this table, contextual information is given for these subjects and an inline, interactive swimmer plot (Highcharter) is also produced.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Swimmer Table&#34; srcset=&#34;
               /project/surv_tables/t2_hu2daaac5208347fb142655b02ef0e3d02_34684_13a00c72137e35a3b6b3e702ad6c6803.webp 400w,
               /project/surv_tables/t2_hu2daaac5208347fb142655b02ef0e3d02_34684_99b60cee1f737c3e250fb08ed2ed9f5c.webp 760w,
               /project/surv_tables/t2_hu2daaac5208347fb142655b02ef0e3d02_34684_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/surv_tables/t2_hu2daaac5208347fb142655b02ef0e3d02_34684_13a00c72137e35a3b6b3e702ad6c6803.webp&#34;
               width=&#34;760&#34;
               height=&#34;650&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Sadly this table did not place in the contest, though parts of it have made it&amp;rsquo;s way into some of our team projects.&lt;/p&gt;
&lt;p&gt;I learned a lot about JS and Reactable in this project, which has since become my display table package of choice within R :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
