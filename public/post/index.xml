<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Matthew Kumar</title>
    <link>https://academic-demo.netlify.app/post/</link>
      <atom:link href="https://academic-demo.netlify.app/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 16 Jun 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://academic-demo.netlify.app/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://academic-demo.netlify.app/post/</link>
    </image>
    
    <item>
      <title>tweaking shiny actionButtons</title>
      <link>https://academic-demo.netlify.app/post/shinybuttons/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/shinybuttons/</guid>
      <description>&lt;p&gt;The default behavior in &lt;code&gt;shiny::actionButton()&lt;/code&gt; is to open a web link in the &lt;em&gt;current&lt;/em&gt; window. This approach has two potential implications for user-experience:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The current progress within the shiny app will be lost; clicking üîô on your browser will reload the app üò≠&lt;/li&gt;
&lt;li&gt;This can (independent of #1) inadvertently divert users away from your app üèÉÔ∏èüí®&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See for yourself ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è&lt;/p&gt;
&lt;p&gt;&lt;button class=&#34;btn btn-default action-button btn-warning&#34; id=&#34;btn0&#34; onclick=&#34;alert(&amp;quot;Just kidding! Youre not going anywhere!&amp;quot;)&#34; type=&#34;button&#34;&gt;Click Me!&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;So what can we do?&lt;/p&gt;
&lt;p&gt;‚úñÔ∏è Do nothing. Leave it as is and let all the hard work you put into the app be overshadowed by the site your are linking to.&lt;/p&gt;
&lt;p&gt;‚úîÔ∏è Make the link open in a new tab or window.&lt;/p&gt;
&lt;p&gt;‚úîÔ∏è Force the link to open in a new window.&lt;/p&gt;
&lt;p&gt;The distinction between the two latter choices boils down to a users default browser settings. If you use Chrome like me, opening a link (designed to open in a tab or new window) defaults to opening it in a new tab. In other instances, it &lt;em&gt;might&lt;/em&gt; open in a new window. Who knows? üé±&lt;/p&gt;
&lt;p&gt;If you really need the link to open in a separate window, luckily with a little elbow grease we can make that a sure thing.üéØ&lt;/p&gt;
&lt;p&gt;Below, I have three buttons and their corresponding code you might use in a shiny app. It‚Äôs pretty straight forward so I‚Äôll end here. ‚úåüçª&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Open in the current window
shiny::actionButton(&#39;btn1&#39;,
                    &#39;Current&#39;,
                    class = &amp;quot;btn-warning&amp;quot;,
                    onclick =&amp;quot;location.href=&#39;http://google.com&#39;;&amp;quot;)

# Open in a new tab (or new window depending on browser)
shiny::actionButton(&#39;btn2&#39;,
                    &#39;New Window or Tab&#39;, 
                    class = &amp;quot;btn-warning&amp;quot;,
                    onclick =&amp;quot;window.open(&#39;http://google.com&#39;, &#39;_blank&#39;)&amp;quot;)

# Open in a new window - width and height are in px
shiny::actionButton(&#39;btn3&#39;,
                    &#39;New Window&#39;, 
                    class = &amp;quot;btn-warning&amp;quot;,
                    onclick =&amp;quot;window.open(&#39;http://google.com&#39;, &#39;_blank&#39;,&#39;width=800,height=800&#39;)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;button class=&#34;btn btn-default action-button btn-warning&#34; id=&#34;btn1&#34; onclick=&#34;location.href=&amp;#39;http://google.com&amp;#39;;&#34; type=&#34;button&#34;&gt;Current&lt;/button&gt;¬†&lt;button class=&#34;btn btn-default action-button btn-warning&#34; id=&#34;btn2&#34; onclick=&#34;window.open(&amp;#39;http://google.com&amp;#39;, &amp;#39;_blank&amp;#39;)&#34; type=&#34;button&#34;&gt;New Window or Tab&lt;/button&gt;¬†&lt;button class=&#34;btn btn-default action-button btn-warning&#34; id=&#34;btn3&#34; onclick=&#34;window.open(&amp;#39;http://google.com&amp;#39;, &amp;#39;_blank&amp;#39;,&amp;#39;width=800,height=800&amp;#39;)&#34; type=&#34;button&#34;&gt;New Window&lt;/button&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mustaches and whiskers</title>
      <link>https://academic-demo.netlify.app/post/whisker/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/whisker/</guid>
      <description>&lt;p&gt;I recently came across the &lt;code&gt;whisker&lt;/code&gt; üì¶, which is an R implementation of &lt;a href=&#34;https://mustache.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;{{mustache}}.&lt;/a&gt; Say what üë®?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&amp;rsquo;ve authored either Rmarkdown documents or shiny apps (using &lt;a href=&#34;https://shiny.rstudio.com/articles/templates.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTML templates&lt;/a&gt;) chances are this will feel familiar. ‚úÖ&lt;/p&gt;
&lt;p&gt;In a &lt;a href=&#34;https://matt-kumar.netlify.app/project/rmarkdown-reporting-engine/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous post&lt;/a&gt;, I described a templating strategy to automatically generate patient profiles within a clinical trial context. Where as this strategy relied on Rmarkdown and &lt;em&gt;actual R code&lt;/em&gt; to produce the per-patient summaries, the &lt;code&gt;whisker&lt;/code&gt; approach is far more generic.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also &lt;em&gt;really&lt;/em&gt; easy to get started with. üèÅ&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a generic template file with a placeholder for your content enclosed in &lt;code&gt;{{}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Read the template into R&lt;/li&gt;
&lt;li&gt;Assign your content using placeholder name&lt;/li&gt;
&lt;li&gt;Write the results back&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;ll demonstrate with a simple template I&amp;rsquo;ve made in notepad.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;template&#34; srcset=&#34;
               /post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_da963397c1c88fb6e549c8674a177de1.webp 400w,
               /post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_053a1ef8ed0c11c9793b36f78e122af3.webp 760w,
               /post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_da963397c1c88fb6e549c8674a177de1.webp&#34;
               width=&#34;498&#34;
               height=&#34;215&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Now, in R we can do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(whisker)

# read in template
my_template &amp;lt;- readLines(&#39;template.txt&#39;)

# assign {{name}} to be &amp;quot;matt&amp;quot;
data &amp;lt;- list(name = &amp;quot;matt&amp;quot;)

# write the results back
whisker.render(my_template, data = data) |&amp;gt;
  writeLines(&amp;quot;output.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the result of the output
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;output&#34; srcset=&#34;
               /post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_f29f2fe3142dadab86b1215a5074f7f6.webp 400w,
               /post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_0f7578ade967b757ec39cff773d61154.webp 760w,
               /post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_f29f2fe3142dadab86b1215a5074f7f6.webp&#34;
               width=&#34;498&#34;
               height=&#34;215&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;So what? Is this just a glorified search and replace functionality? ü§∑Ô∏è No.&lt;/p&gt;
&lt;p&gt;This is actually quite powerful when you start to think of the applications ü§î. Ô∏èÔ∏èüí° Consider a complete R script as a &amp;ldquo;template&amp;quot;Ô∏è. Something you tend to reuse in your work time to time. With &lt;code&gt;whisker&lt;/code&gt; you can easily populate these templates and actually generate R (or other languages) scripts that can be executed &lt;strong&gt;as is&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Still not convinced? Okay, think about how you could share some of this üí™ with your end users in the form a shiny app! ‚úåüçª&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reticulate to the Rescue</title>
      <link>https://academic-demo.netlify.app/post/py-hyperlink/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/py-hyperlink/</guid>
      <description>&lt;p&gt;A prototype I was working on earlier this year needed to make use of data stored in an excel book. The data I needed were the &lt;strong&gt;URLS embedded in hyperlinks&lt;/strong&gt; within cells of a sheet.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;pre&#34; srcset=&#34;
               /post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_169e4ba0dabe10b7f3bac4d8eaa0aa07.webp 400w,
               /post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_6383141bb5eede82c62300f06d9c3994.webp 760w,
               /post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_169e4ba0dabe10b7f3bac4d8eaa0aa07.webp&#34;
               width=&#34;470&#34;
               height=&#34;370&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The cells in column B contain hyperlinks for which I need to extract out the URLs. For example, cell B4 has the value of: &lt;code&gt;http://www.amazon.ca/&lt;/code&gt;. This is what I need access to.&lt;/p&gt;
&lt;p&gt;I figured one of the existing R packages that could extract this information. I checked the usual: &lt;code&gt;readxl&lt;/code&gt;, &lt;code&gt;xlsx&lt;/code&gt;, and &lt;code&gt;openxlsx&lt;/code&gt; and was surprised that none could.&lt;/p&gt;
&lt;p&gt;My next thought was to just have the URLs extracted in Excel, prior to reading them into R. Surely this was possible, right? Not without using a VBA macro. ü§¢ I gave this an honest shot and it proved too cumbersome. No thanks.&lt;/p&gt;
&lt;p&gt;I read that it might be possible in Python with the &lt;code&gt;openpyxl&lt;/code&gt; package. I haven&amp;rsquo;t a whole lot of experience with Python. I&amp;rsquo;ve been reading and hearing how easy it is to &lt;a href=&#34;https://rstudio.github.io/reticulate/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;use Python within R and RStudio&lt;/a&gt;. I decided to give a go. Enter &lt;code&gt;reticulate&lt;/code&gt;. üêçüêçüêç&lt;/p&gt;
&lt;p&gt;The example that follows can be broken down into a few steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install reticulate and figure out how it works&lt;/li&gt;
&lt;li&gt;Install python packages (&lt;code&gt;openpyxl&lt;/code&gt;, &lt;code&gt;pandas&lt;/code&gt;) within RStudio and figure out how &lt;em&gt;they&lt;/em&gt; work&lt;/li&gt;
&lt;li&gt;Integrate everything into a simple workflow&lt;/li&gt;
&lt;li&gt;‚ùìÔ∏è‚ùìÔ∏è‚ùìÔ∏è&lt;/li&gt;
&lt;li&gt;Profit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Getting setup was actually the easy part. At least on my windows machine.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install reticulate
install.packages(&amp;quot;reticulate&amp;quot;)

# install a python distribution on my machine
reticulate::install_miniconda

# install python packages
reticulate::py_install(&#39;pandas&#39;)
reticulate::py_install(&#39;openpyxl&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next was actually figuring out how to use these packages. After a fair bit of reading documentation and tinkering, I was able to come up with the following function I&amp;rsquo;ve named &lt;code&gt;get_hyperlink.py&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import openpyxl as xl
import pandas as pd

def get_hyperlink(path, sheet):

  # Define workbook, worksheet
  wb = xl.load_workbook(path)
  ws = wb.get_sheet_by_name(sheet)
  
  # For all cells in the worksheet, if a hyperlink is detected:
  # 1. Extract the hyperlink target
  # 2. Otherwise just keep the original value as a string
  for row_cells in ws.iter_rows():
    for cell in row_cells:
      try:
        cell.value = cell.hyperlink.target
      except:
        cell.value = str(cell.value)
    
  # Store values to a data frame, clean up headers 
  tmp = pd.DataFrame(ws.values)
  tmp.rename(columns = tmp.iloc[0], inplace = True)
  tmp.drop(tmp.index[0], inplace = True)
  
  return tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, what&amp;rsquo;s left is integrating the python script into an existing R workflow so that I can actually use it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(reticulate)

# Load python function
source_python(&amp;quot;get_hyperlink.py&amp;quot;)

# Use python function
my_data &amp;lt;- get_hyperlink(path = &amp;quot;input.xlsx&amp;quot;, sheet = &amp;quot;Sheet1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(my_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   ID                   source1
## 1  1     http://www.gmail.com/
## 2  2 http://www.eventhubs.com/
## 3  3   http://www.rstudio.com/
## 4  4     http://www.amazon.ca/
## 5  5                      None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;rsquo;s a wrap! ‚úÖüèÅüçª&lt;/p&gt;
&lt;p&gt;Actually, there&amp;rsquo;s one other feature of the &lt;code&gt;reticulate&lt;/code&gt; package I want to share. If you&amp;rsquo;re new to Python like I am, it&amp;rsquo;s helpful to be able to tinker in a REPL (&lt;strong&gt;read-eval-print-loop&lt;/strong&gt;) fashion. Calling &lt;code&gt;reticulate::repl_python()&lt;/code&gt; provides one directly in your R session so you can tinker more naturally. üí™&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://academic-demo.netlify.app/post/hello-world/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/hello-world/</guid>
      <description>&lt;p&gt;Welcome to my new&amp;hellip; blog?&lt;/p&gt;
&lt;p&gt;This was a long time coming. My &lt;a href=&#34;https://matt-kumar.shinyapps.io/portfolio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous portfolio&lt;/a&gt; was getting cumbersome to maintain. I have no idea why I structured it as a shiny app. Whoopsies.&lt;/p&gt;
&lt;p&gt;Anyway, if you&amp;rsquo;re reading this, this is my new digital home. I plan to share my thoughts and some of my work here going forward. I&amp;rsquo;ve started to back-port some of the previous stuff I&amp;rsquo;ve worked in and plan to add newer content here in the future.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re into R, Shiny, or statistics I think you&amp;rsquo;ll enjoy this place. I hope you stick around!&lt;/p&gt;
&lt;p&gt;A special shoutout to Andreas Handel&amp;rsquo;s &lt;a href=&#34;https://www.andreashandel.com/posts/blogdown-website-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;guide&lt;/a&gt; for getting started with blogdown and Hugo.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
