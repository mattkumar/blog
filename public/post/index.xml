<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Matthew Kumar</title>
    <link>https://academic-demo.netlify.app/post/</link>
      <atom:link href="https://academic-demo.netlify.app/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 04 Jul 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://academic-demo.netlify.app/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://academic-demo.netlify.app/post/</link>
    </image>
    
    <item>
      <title>DevOps Bootcamp</title>
      <link>https://academic-demo.netlify.app/post/azure/</link>
      <pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/azure/</guid>
      <description>&lt;h4&gt;Preface&lt;/h4&gt;
&lt;p&gt;I&amp;rsquo;ll preface with this post is related to a project I lead at work. I can&amp;rsquo;t share too many details about it here unfortunately (including code), but what I can safely share is my experience and process 💡.&lt;/p&gt;
&lt;h4&gt;tl;dr&lt;/h4&gt;
&lt;p&gt;I lead the development of a medium-size shiny application that is used by users within my organization. This app has evolved to the state where I need to move it from the current platform to a platform that is capable of scaling 📈 and has storage 📁. The issue? Well, data connectivity. The old way of accessing data via ssh is not tenable anymore, and so we must rely on the new platforms Azure-based systems. How can I re-factor my existing app to integrate with this? 🎯&lt;/p&gt;
&lt;h4&gt;First Steps&lt;/h4&gt;
&lt;p&gt;Until very recently, I had almost no experience with Azure or it&amp;rsquo;s systems, or, it&amp;rsquo;s lingo 💬. Our first steps were to attempt to read data in a local R session from a file container on Azure. I&amp;rsquo;ll ⏭️ the details of this setup, mostly because I don&amp;rsquo;t quite understand all that the Azure DevOps had to configure, but also my scope is restricted to R and shiny in this post.&lt;/p&gt;
&lt;p&gt;I looked into the &lt;code&gt;AzureStor&lt;/code&gt; package because by it&amp;rsquo;s description alone, it&amp;rsquo;s what I was going to need to do: Access files from Azure Storage. Straight forward right? Not exactly.&lt;/p&gt;
&lt;p&gt;It turns out I needed to use the &lt;code&gt;AzureAuth&lt;/code&gt; package first, whose sole focus is on establishing authentication with services on Azure. OK, so gameplan. Use &lt;code&gt;AzureAuth&lt;/code&gt; to connect, get a token, then pass it to functions in &lt;code&gt;AzureStor&lt;/code&gt; to do operations like download/upload/list. Once I could do this, I was confident my app would work in it&amp;rsquo;s entirety.&lt;/p&gt;
&lt;p&gt;This task in reality took quite a bit of time to map 🕵. Remember, I don&amp;rsquo;t speak Azure. I also don&amp;rsquo;t expect the DevOps engineers 👷 to be familiar with this R package and support it. Enter growing pains 😭 🏋️‍♀️ 👨‍🔧.&lt;/p&gt;
&lt;p&gt;In the end we did get it mapped out, some parameters / settings more obvious than others, and I could finally read local Azure file containers on my local session ✅.&lt;/p&gt;
&lt;p&gt;Here is the function I used:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AzureAuth::get_azure_token(resource,   tenant,   app,   password = NULL,   username = NULL,   certificate = NULL,   auth_type = NULL,   aad_host = &amp;quot;https://login.microsoftonline.com/&amp;quot;,   version = 1,   authorize_args = list(),   token_args = list(),   use_cache = NULL,   on_behalf_of = NULL,   auth_code = NULL,   device_creds = NULL )&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Shiny&lt;/h4&gt;
&lt;p&gt;Oh man, you would think just because you can produce something in a local R session, you can throw it into a shiny app and have it work right? right? Wrong. That was a learning here.&lt;/p&gt;
&lt;img src = &#34;https://i.imgflip.com/5c7lwq.png&#34;&gt;
&lt;p&gt;I&amp;rsquo;ll mention too that on this new platform, we&amp;rsquo;ve chosen to use Posit Connect to host our shiny apps going forward. This product is definitely new to the DevOps team and while I have experience deploying apps to it, I don&amp;rsquo;t have experience in configuring it.&lt;/p&gt;
&lt;p&gt;Some weeks later, the connect server was setup, and I could deploy hello world apps to it from my local instance. I could actually deploy my full app, but it essentially didn&amp;rsquo;t do anything since the data connectivity wasn&amp;rsquo;t ironed out. I&amp;rsquo;ll say this vignette was &lt;a href=&#34;https://cran.r-project.org/web/packages/AzureAuth/vignettes/shiny.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;super-helpful&lt;/a&gt; in theory, but a lottttttttttttttttttttttttt of the pains were configurations specific to &lt;strong&gt;our internal systems&lt;/strong&gt;&lt;/p&gt;
&lt;h5&gt;Hello App, with Azure&lt;/h5&gt;
&lt;p&gt;Our first task was to setup any kind of hello world shiny app that could read the files through the Azure file container. We eventually got this to work by using the &lt;strong&gt;app-password&lt;/strong&gt; (defined in the link above). This was a reassuring sign of being on the right track ☀️. But what we really needed was to use the &lt;strong&gt;user&lt;/strong&gt; 👥 credentials (since they will be tied to data access within the app). This was a lot more challenging, but an absolute necessity given what my app does.&lt;/p&gt;
&lt;h5&gt;Hello Matt, with Azure&lt;/h5&gt;
&lt;p&gt;I tried for the life of me to get the app to pull my credentials with no luck. Relying on the app-password was just a non-starter for this project. Enter &lt;code&gt;AzureGraph&lt;/code&gt; 🌄&lt;/p&gt;
&lt;p&gt;We had Microsoft Graph setup in our Azure system. In the end, after many hours of googling (GPT-4 was not helpful here) and experimenting, this is what I did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request a token 🌕️ using Microsoft Graph service. This toke 🌕️n &lt;strong&gt;did&lt;/strong&gt; contain my user credential🕵s&lt;/li&gt;
&lt;li&gt;clone that token for use in another Microsoft Service, namely Azure Storage&lt;/li&gt;
&lt;li&gt;pass that token when listing/reading/writing files in Azure using &lt;code&gt;AzureStor&lt;/code&gt; within the shiny app ↪️&lt;/li&gt;
&lt;li&gt;❓️❓️❓️&lt;/li&gt;
&lt;li&gt;Profit 🤑.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It worked.&lt;/p&gt;
&lt;p&gt;Below is the culmination of many hours and weeks of learning about Azure, and it&amp;rsquo;s integration into R and Shiny, with the added complexity of our companies systems/policies. 😝😝😝&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/azure/azure_huf0740c0fe63961dde67ca094cffb01c3_38534_c2446936da907ae750a0476b05a7cb0c.webp 400w,
               /post/azure/azure_huf0740c0fe63961dde67ca094cffb01c3_38534_903ef077fa60c597f8c14469be9b08e0.webp 760w,
               /post/azure/azure_huf0740c0fe63961dde67ca094cffb01c3_38534_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/post/azure/azure_huf0740c0fe63961dde67ca094cffb01c3_38534_c2446936da907ae750a0476b05a7cb0c.webp&#34;
               width=&#34;760&#34;
               height=&#34;367&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;See those credentials? Those are automatically obtained through configuring the 1) SSO 2) Azure Graph. User&amp;rsquo;s don&amp;rsquo;t really have to &amp;ldquo;login&amp;rdquo; any further 🔓. Even better, because the storage is setup and the ACL maintained, users only see what they are supposed to see. No more manual setups ☑️ &amp;hellip;at least from my end and from the perspective of Shiny.&lt;/p&gt;
&lt;p&gt;Okay that&amp;rsquo;s it. I just want to also say I&amp;rsquo;ve learned so much from working with the Azure folks 💪🏻; really I have 🙏. They were super patient with me, and really took the time to explain micro-concepts (much of which abbreviated here or skipped for brevity).&lt;/p&gt;
&lt;p&gt;Till next time, 🍻🥂🥃&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>reading files with purrr</title>
      <link>https://academic-demo.netlify.app/post/2023-03-13-reading/purrr/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/2023-03-13-reading/purrr/</guid>
      <description>&lt;p&gt;I feel like there are countless examples on how to read a directory of .csv files into R using &lt;code&gt;purrr&lt;/code&gt; 😺. However, in those examples the setup is potentially many CSV files being read in &lt;strong&gt;and stacked into a single data frame&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What if we need to read several .csv (or other types) data files into &lt;em&gt;their own data frame&lt;/em&gt;❓️💡&lt;/p&gt;
&lt;p&gt;In my own work, this is an operation I typically do. Until recently, I haven&amp;rsquo;t bothered how to figure this out in &lt;code&gt;purrr&lt;/code&gt;. Don&amp;rsquo;t ask how I was doing it before. 🤢&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a small snippet that will demonstrate how to use &lt;code&gt;purrr::pmap()&lt;/code&gt; to perform this operation. Instead of .csv files, we&amp;rsquo;ll read in .xpt (SAS Transport) using &lt;code&gt;haven::read_xpt()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-1&#34;&gt;Step 1&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s first identify the relevant files we want to read in using &lt;code&gt;list.files()&lt;/code&gt; and store this as a character vector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(purrr)
library(dplyr)

files &amp;lt;- list.files(&amp;quot;C:\\&amp;quot;, pattern = &amp;quot;*.xpt&amp;quot;, full.names = TRUE)

# preview
files
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## character(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;step-2&#34;&gt;Step 2&lt;/h2&gt;
&lt;p&gt;Next, for each element of the files character vector, we&amp;rsquo;ll read in the corresponding file using a combination of &lt;code&gt;purrr::map&lt;/code&gt; and &lt;code&gt;haven::read_xpt&lt;/code&gt;. This will result in a list where each element corresponds to a tibble of the respective xpt file. At the sometime, we&amp;rsquo;ll attach the name to each element using &lt;code&gt;purrr::setnames&lt;/code&gt; so we can identify what&amp;rsquo;s what.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;filelists &amp;lt;- files %&amp;gt;%
  map(., haven::read_xpt) %&amp;gt;%
  set_names(files %&amp;gt;% basename(.) %&amp;gt;% tools::file_path_sans_ext(.))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s what &lt;code&gt;filelists&lt;/code&gt; looks like in R Studio:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;file1.png&#34; alt=&#34;filelist&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;step-3&#34;&gt;Step 3&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s the cool part. Let&amp;rsquo;s use &lt;code&gt;purrr::pmap()&lt;/code&gt; and &lt;code&gt;assign()&lt;/code&gt; to make a separate data frame for it in the global environment. We start by specifying .x to be the list of files and .y to be the names of the files. With these two inputs, we need to simply map them to a single &lt;code&gt;assign()&lt;/code&gt; call and we&amp;rsquo;re done.💯&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;purrr::pmap(.l = list(.x = filelists, .y = names(filelists)),
            .f = ~assign(.y, .x, envir = globalenv()))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s what my global environment looks like in R Studio:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;file2.png&#34; alt=&#34;globalenv&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Till next time 🍻🙏 !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>highlights of 2022</title>
      <link>https://academic-demo.netlify.app/post/year-end/</link>
      <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/year-end/</guid>
      <description>&lt;p&gt;&amp;hellip; or rather the latter the half of 2022 since I&amp;rsquo;m getting old and can&amp;rsquo;t remember the first half&lt;/p&gt;
&lt;h2 id=&#34;this-blog&#34;&gt;This Blog&lt;/h2&gt;
&lt;p&gt;I set out to initially redesign my portfolio this year. It involved migrating a lot of the content from my previous portfolio, which was hosted as a shiny app. At the same time, I said I&amp;rsquo;d try and use this portfolio as a general purpose for my &amp;ldquo;digital presence&amp;rdquo;. I&amp;rsquo;m happy that I&amp;rsquo;ve been able to keep up with writing blog posts and sharing side projects or code demonstrations. All of this is infinitely easier now that I use blogdown-github-netlify chain for content management. ⚡&lt;/p&gt;
&lt;h2 id=&#34;posit-2022-table-contest&#34;&gt;Posit 2022 Table Contest&lt;/h2&gt;
&lt;p&gt;This year I decided to participate in the Posit 2022 table contest. I was quite surprised that all 3 of my entries placed! 1 received a runner-up and the other two both received honorable mentions! 🙏&lt;/p&gt;
&lt;p&gt;Overall, it was a rewarding experience because it was a natural outlet to experiment with new tech (Quarto, R packages) while finally putting to work some of the &lt;a href=&#34;https://www.coursera.org/learn/html-css-javascript-for-web-developers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS/JS/HTML stuff I learned&lt;/a&gt; earlier in the year into something meaningful. ⚡&lt;/p&gt;
&lt;p&gt;You can read the Posit announcement article here:&lt;br&gt;
👉 &lt;a href=&#34;https://posit.co/blog/winners-of-the-2022-table-contest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Posit Blog - Winners of the 2022 Table Contest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All of my entries to the contest are &lt;a href=&#34;https://matt-kumar.netlify.app/#projects&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; on this site:&lt;br&gt;
🏃 &lt;a href=&#34;https://matt-kumar.netlify.app/project/dynamic-tlf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dynamic TLFs&lt;/a&gt; - Runner Up&lt;br&gt;
📣 &lt;a href=&#34;https://matt-kumar.netlify.app/project/time_machine/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Time Machine&lt;/a&gt; - Honorable Mention&lt;br&gt;
📣 &lt;a href=&#34;https://matt-kumar.netlify.app/project/jeopardy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jeopardy!&lt;/a&gt; - Honorable Mention&lt;/p&gt;
&lt;p&gt;Lastly, I encourage everyone to check out the full list of entries submitted my the community. Truly creative and inspiring takes on tabular representations of data! 😍 💪&lt;/p&gt;
&lt;h2 id=&#34;work&#34;&gt;Work&lt;/h2&gt;
&lt;p&gt;I want to briefly 💬 about my working or professional life this year.&lt;/p&gt;
&lt;p&gt;The majority of my team is spread throughout the 🌍. In spite of this, 2022 was a year where we connected more closely than ever. I just want to say I&amp;rsquo;m super fortunate to work with my team and have their unrelenting support and encouragement. This also goes for the leadership teams that orbit my immediate and adjacent functions. I&amp;rsquo;ve never felt more empowered in a position knowing I having the trust and backing of management in my corner 🤜🤛. All things considered, I&amp;rsquo;m truly grateful to have such an amazing opportunity at Bayer. 🙏&lt;/p&gt;
&lt;p&gt;So long, 2022 🍻!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>old code and beginnings</title>
      <link>https://academic-demo.netlify.app/post/r-code/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/r-code/</guid>
      <description>&lt;p&gt;&amp;hellip; and by old, I mean really old. Like year 2008 old. Like the first R code I ever wrote.&lt;/p&gt;
&lt;p&gt;I recently went digging in an old dropbox account for photos and to my surprise I had saved a copy of my undergraduate thesis, complete with code.&lt;/p&gt;
&lt;p&gt;My undergraduate degree was in Psychology and I had a keen interest in psychometrics. My thesis involved an application of &lt;a href=&#34;https://en.wikipedia.org/wiki/Item_response_theory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;item response theory&lt;/a&gt; to ordinal data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;if you are interested, I used &lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-1-4757-2691-6_5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Samejima&amp;rsquo;s Graded Response Model&lt;/a&gt; to analyze responses made to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Barratt_Impulsiveness_Scale&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Barratt Impulsiveness Scale&lt;/a&gt; from a sample of first year university students&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the time, my only experience with statistical software was with &lt;a href=&#34;https://en.wikipedia.org/wiki/SPSS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPSS&lt;/a&gt;. I remember teaching myself how to use it only a year prior in order to double check my intro stats homework assignments 🤓🔬📏. I think that was a good move in retrospect because I was also able to spin that experience into a &lt;strong&gt;paid&lt;/strong&gt; Stats Advisory position at the Psychology Resource Center.&lt;/p&gt;
&lt;p&gt;I digress.&lt;/p&gt;
&lt;p&gt;The type of model I needed to fit for my thesis was only available through proprietary software. My &lt;a href=&#34;https://health.yorku.ca/health-profiles/index.php?mid=498680&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;thesis advisor&lt;/a&gt; recommended I look into R as he had caught wind of a package that could help. The upside was that it would be 🆓 and open source 🤑. The downside was that I was going to have to learn &amp;ldquo;syntax&amp;rdquo; 🤢. I was aware that SPSS had syntax facilities for advanced users, but it was always intimidating 😣.&lt;/p&gt;
&lt;p&gt;But now I &lt;strong&gt;had&lt;/strong&gt; to learn &amp;ldquo;syntax&amp;rdquo;. &lt;em&gt;I&amp;rsquo;m laughing while typing this believe you me.&lt;/em&gt; 🤣 Anyway, I don&amp;rsquo;t quite recall the learning process, but I reckon it was difficult and in the end I was probably just relieved to get the job done. ✅🎓.I ended up having to write &amp;ldquo;syntax&amp;rdquo; for other supporting analyses in my thesis, namely Confirmatory Factor Analysis for assumption checking in &lt;a href=&#34;https://ssicentral.com/index.php/products/lisrel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LISREL&lt;/a&gt;. &lt;em&gt;shudders&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For historical (and sentimental reasons) I&amp;rsquo;ve included the R code in my thesis below. It marked the first steps on the path I&amp;rsquo;m on today.&lt;/p&gt;
&lt;p&gt;From what I can tell I was using R 2.8.1 and I&amp;rsquo;m happy to see the original 📦, &lt;a href=&#34;https://cran.r-project.org/web/packages/ltm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;ltm&lt;/strong&gt;&lt;/a&gt; is still active on CRAN today.&lt;/p&gt;
&lt;p&gt;Till next time, 🍻✌&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;ltm&amp;quot;, dependencies = TRUE)
#downloads and installs the &#39;LTM&#39; packageto the user’s hard drive.

library(ltm)
#loads the &#39;LTM&#39; package from the user’s hard drive

attention = read.table(file.choose(),header=T)
#prompts for location of data set

grm0 = grm(attention, constrained = TRUE, Hessian = TRUE)
#fits the constrained GRM to the specified data set. The HESSIAN = TRUE argument computes standard error values.

summary(grm0)
#returns the parameter estimates

grm1 = grm(attention, constrained = FALSE, Hessian = TRUE)
#fits the unconstrained GRM and computes standard error values

summary(grm1)
#returns the parameter estimates

anova(grm0,grm1)
#performs a likelihood ratio test on the two models.

plot(grm1, type = &amp;quot;IIC&amp;quot;, lwd = 2, cex = 1.2, legend = TRUE, cx = &amp;quot;topleft&amp;quot;,xlab = &amp;quot;Latent
Trait&amp;quot;, cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.1)
#plots the IIFs

plot(grm1, type = &amp;quot;IIC&amp;quot;, items = 0, lwd = 2, xlab = &amp;quot;Attention&amp;quot;,
     cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.1)
#plots the TIF

plot(grm1, lwd = 2, cex = 1.2, legend = TRUE, cx = &amp;quot;left&amp;quot;,
     xlab = &amp;quot;Attention&amp;quot;, cex.main = 1.5, cex.lab = 1.3, cex.ax
     is = 1.1)
#plots the CRCs

plot(grm1, type = &amp;quot;OCCu&amp;quot;, lwd = 2, cex = 1.2, legend = TRUE, cx = &amp;quot;topleft&amp;quot;,
     xlab = &amp;quot;Attention&amp;quot;, cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.1)
#plots the OCCs
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>tweaking shiny actionButton</title>
      <link>https://academic-demo.netlify.app/post/shinybuttons/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/shinybuttons/</guid>
      <description>&lt;p&gt;The default behavior in &lt;code&gt;shiny::actionButton()&lt;/code&gt; is to open a web link in the &lt;em&gt;current&lt;/em&gt; window. This approach has two potential implications for user-experience:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The current progress within the shiny app will be lost; clicking 🔙 on your browser will reload the app 😭&lt;/li&gt;
&lt;li&gt;This can (independent of #1) inadvertently divert users away from your app 🏃️💨&lt;/li&gt;
&lt;/ol&gt;
&lt;center&gt;
&lt;p&gt;⬇️⬇️⬇️ See for yourself ⬇️⬇️⬇️
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;button class=&#34;btn btn-default action-button btn-warning&#34; id=&#34;btn0&#34; onclick=&#34;alert(&amp;quot;Just kidding! Youre not going anywhere!&amp;quot;)&#34; type=&#34;button&#34;&gt;Click Me!&lt;/button&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;So what can we do?&lt;/p&gt;
&lt;p&gt;✖️ Do nothing. Leave it as is and let all the hard work you put into the app be overshadowed by the site your are linking to.&lt;/p&gt;
&lt;p&gt;✔️ Make the link open in a new tab or window.&lt;/p&gt;
&lt;p&gt;✔️ Force the link to open in a new window.&lt;/p&gt;
&lt;p&gt;The distinction between the two latter choices boils down to a users default browser settings. If you use Chrome like me, opening a link (designed to open in a tab or new window) defaults to opening it in a new tab. For you, it &lt;em&gt;might&lt;/em&gt; open in a new window. Who knows? 🎱&lt;/p&gt;
&lt;p&gt;If you really need the link to open in a separate window, luckily with a little elbow grease we can make that a sure thing.🎯 We just need to explicitly specify the window &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt;. You can also pass &lt;code&gt;fullscreen=1&lt;/code&gt; to make the new window, well, full screen. See the code snippet below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️Opening links in a new window may result in getting dinged by an ad-blocker. This is because the so-called new window is more of a pop-up rather than it being a truly new window (i.e. &lt;code&gt;CTRL + N&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thank you &lt;a href=&#34;https://github.com/iqis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iqis&lt;/a&gt; for pointing out that! 👽️&lt;/p&gt;
&lt;p&gt;Below, I have three buttons and their corresponding code you might use in a shiny app. It’s pretty straight forward so I’ll end with saying keep user-experience front and center in your design! ✌🍻&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Default - current
shiny::actionButton(&#39;btn1&#39;,
                    &#39;Current Window&#39;,
                    onclick =&amp;quot;location.href=&#39;http://google.com&#39;;&amp;quot;)

# New tab or window  
shiny::actionButton(&#39;btn2&#39;,
                    &#39;New Window or Tab&#39;, 
                    onclick =&amp;quot;window.open(&#39;http://google.com&#39;, &#39;_blank&#39;)&amp;quot;)

# New window
shiny::actionButton(&#39;btn3&#39;,
                    &#39;New Window&#39;, 
                    onclick =&amp;quot;window.open(&#39;http://google.com&#39;, &#39;_blank&#39;,&#39;width=800,height=800&#39;)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;button class=&#34;btn btn-default action-button btn btn-danger btn-lg  btn-huge&#34; id=&#34;btn1&#34; onclick=&#34;location.href=&amp;#39;http://google.com&amp;#39;;&#34; type=&#34;button&#34;&gt;Current Window&lt;/button&gt;
 
&lt;button class=&#34;btn btn-default action-button btn btn-warning btn-lg  btn-huge&#34; id=&#34;btn2&#34; onclick=&#34;window.open(&amp;#39;http://google.com&amp;#39;, &amp;#39;_blank&amp;#39;)&#34; type=&#34;button&#34;&gt;New Window or Tab&lt;/button&gt;
 
&lt;button class=&#34;btn btn-default action-button btn btn-success btn-lg  btn-huge&#34; id=&#34;btn3&#34; onclick=&#34;window.open(&amp;#39;http://google.com&amp;#39;, &amp;#39;_blank&amp;#39;,&amp;#39;width=800,height=800&amp;#39;)&#34; type=&#34;button&#34;&gt;New Window&lt;/button&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mustaches and whiskers</title>
      <link>https://academic-demo.netlify.app/post/whisker/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/whisker/</guid>
      <description>&lt;p&gt;I recently came across the &lt;code&gt;whisker&lt;/code&gt; 📦, which is an R implementation of &lt;a href=&#34;https://mustache.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;{{mustache}}.&lt;/a&gt; Say what 👨?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&amp;rsquo;ve authored either Rmarkdown documents or shiny apps (using &lt;a href=&#34;https://shiny.rstudio.com/articles/templates.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTML templates&lt;/a&gt;) chances are this will feel familiar. ✅&lt;/p&gt;
&lt;p&gt;In a &lt;a href=&#34;https://matt-kumar.netlify.app/project/rmarkdown-reporting-engine/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous post&lt;/a&gt;, I described a templating strategy to automatically generate patient profiles within a clinical trial context. Where as this strategy relied on Rmarkdown and &lt;em&gt;actual R code&lt;/em&gt; to produce the per-patient summaries, the &lt;code&gt;whisker&lt;/code&gt; approach is far more generic.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also &lt;em&gt;really&lt;/em&gt; easy to get started with. 🏁&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a generic template file with a placeholder for your content enclosed in &lt;code&gt;{{}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Read the template into R&lt;/li&gt;
&lt;li&gt;Assign your content using placeholder name&lt;/li&gt;
&lt;li&gt;Write the results back&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;ll demonstrate with a simple template I&amp;rsquo;ve made in notepad.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;template&#34; srcset=&#34;
               /post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_da963397c1c88fb6e549c8674a177de1.webp 400w,
               /post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_053a1ef8ed0c11c9793b36f78e122af3.webp 760w,
               /post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_da963397c1c88fb6e549c8674a177de1.webp&#34;
               width=&#34;498&#34;
               height=&#34;215&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Now, in R we can do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(whisker)

# read in template
my_template &amp;lt;- readLines(&#39;template.txt&#39;)

# assign {{name}} to be &amp;quot;matt&amp;quot;
data &amp;lt;- list(name = &amp;quot;matt&amp;quot;)

# write the results back
whisker.render(my_template, data = data) |&amp;gt;
  writeLines(&amp;quot;output.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the result of the output
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;output&#34; srcset=&#34;
               /post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_f29f2fe3142dadab86b1215a5074f7f6.webp 400w,
               /post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_0f7578ade967b757ec39cff773d61154.webp 760w,
               /post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_f29f2fe3142dadab86b1215a5074f7f6.webp&#34;
               width=&#34;498&#34;
               height=&#34;215&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;So what? Is this just a glorified search and replace functionality? 🤷️ No.&lt;/p&gt;
&lt;p&gt;This is actually quite powerful when you start to think of the applications 🤔. ️️💡 Consider a complete R script as a &amp;ldquo;template&amp;quot;️. Something you tend to reuse in your work time to time. With &lt;code&gt;whisker&lt;/code&gt; you can easily populate these templates and actually generate R (or other languages) scripts that can be executed &lt;strong&gt;as is&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Still not convinced? Okay, think about how you could share some of this 💪 with your end users in the form a shiny app! ✌🍻&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reticulate to the Rescue</title>
      <link>https://academic-demo.netlify.app/post/py-hyperlink/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/py-hyperlink/</guid>
      <description>&lt;p&gt;A prototype I was working on earlier this year needed to make use of data stored in an excel book. The data I needed were the &lt;strong&gt;URLS embedded in hyperlinks&lt;/strong&gt; within cells of a sheet.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;pre&#34; srcset=&#34;
               /post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_169e4ba0dabe10b7f3bac4d8eaa0aa07.webp 400w,
               /post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_6383141bb5eede82c62300f06d9c3994.webp 760w,
               /post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_169e4ba0dabe10b7f3bac4d8eaa0aa07.webp&#34;
               width=&#34;470&#34;
               height=&#34;370&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The cells in column B contain hyperlinks for which I need to extract out the URLs. For example, cell B4 has the value of: &lt;code&gt;http://www.amazon.ca/&lt;/code&gt;. This is what I need access to.&lt;/p&gt;
&lt;p&gt;I figured one of the existing R packages that could extract this information. I checked the usual: &lt;code&gt;readxl&lt;/code&gt;, &lt;code&gt;xlsx&lt;/code&gt;, and &lt;code&gt;openxlsx&lt;/code&gt; and was surprised that none could.&lt;/p&gt;
&lt;p&gt;My next thought was to just have the URLs extracted in Excel, prior to reading them into R. Surely this was possible, right? Not without using a VBA macro. 🤢 I gave this an honest shot and it proved too cumbersome. No thanks.&lt;/p&gt;
&lt;p&gt;I read that it might be possible in Python with the &lt;code&gt;openpyxl&lt;/code&gt; package. I haven&amp;rsquo;t a whole lot of experience with Python. I&amp;rsquo;ve been reading and hearing how easy it is to &lt;a href=&#34;https://rstudio.github.io/reticulate/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;use Python within R and RStudio&lt;/a&gt;. I decided to give a go. Enter &lt;code&gt;reticulate&lt;/code&gt;. 🐍🐍🐍&lt;/p&gt;
&lt;p&gt;The example that follows can be broken down into a few steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install reticulate and figure out how it works&lt;/li&gt;
&lt;li&gt;Install python packages (&lt;code&gt;openpyxl&lt;/code&gt;, &lt;code&gt;pandas&lt;/code&gt;) within RStudio and figure out how &lt;em&gt;they&lt;/em&gt; work&lt;/li&gt;
&lt;li&gt;Integrate everything into a simple workflow&lt;/li&gt;
&lt;li&gt;❓️❓️❓️&lt;/li&gt;
&lt;li&gt;Profit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Getting setup was actually the easy part. At least on my windows machine.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install reticulate
install.packages(&amp;quot;reticulate&amp;quot;)

# install a python distribution on my machine
reticulate::install_miniconda

# install python packages
reticulate::py_install(&#39;pandas&#39;)
reticulate::py_install(&#39;openpyxl&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next was actually figuring out how to use these packages. After a fair bit of reading documentation and tinkering, I was able to come up with the following function I&amp;rsquo;ve named &lt;code&gt;get_hyperlink.py&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import openpyxl as xl
import pandas as pd

def get_hyperlink(path, sheet):

  # Define workbook, worksheet
  wb = xl.load_workbook(path)
  ws = wb.get_sheet_by_name(sheet)
  
  # For all cells in the worksheet, if a hyperlink is detected:
  # 1. Extract the hyperlink target
  # 2. Otherwise just keep the original value as a string
  for row_cells in ws.iter_rows():
    for cell in row_cells:
      try:
        cell.value = cell.hyperlink.target
      except:
        cell.value = str(cell.value)
    
  # Store values to a data frame, clean up headers 
  tmp = pd.DataFrame(ws.values)
  tmp.rename(columns = tmp.iloc[0], inplace = True)
  tmp.drop(tmp.index[0], inplace = True)
  
  return tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, what&amp;rsquo;s left is integrating the python script into an existing R workflow so that I can actually use it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(reticulate)

# Load python function
source_python(&amp;quot;get_hyperlink.py&amp;quot;)

# Use python function
my_data &amp;lt;- get_hyperlink(path = &amp;quot;input.xlsx&amp;quot;, sheet = &amp;quot;Sheet1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(my_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   ID                   source1
## 2  1     http://www.gmail.com/
## 3  2 http://www.eventhubs.com/
## 4  3   http://www.rstudio.com/
## 5  4     http://www.amazon.ca/
## 6  5                      None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;rsquo;s a wrap! ✅🏁🍻&lt;/p&gt;
&lt;p&gt;Actually, there&amp;rsquo;s one other feature of the &lt;code&gt;reticulate&lt;/code&gt; package I want to share. If you&amp;rsquo;re new to Python like I am, it&amp;rsquo;s helpful to be able to tinker in a REPL (&lt;strong&gt;read-eval-print-loop&lt;/strong&gt;) fashion. Calling &lt;code&gt;reticulate::repl_python()&lt;/code&gt; provides one directly in your R session so you can tinker more naturally. 💪&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://academic-demo.netlify.app/post/hello-world/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/hello-world/</guid>
      <description>&lt;p&gt;Welcome to my new&amp;hellip; blog?&lt;/p&gt;
&lt;p&gt;This was a long time coming. My &lt;a href=&#34;https://matt-kumar.shinyapps.io/portfolio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous portfolio&lt;/a&gt; was getting cumbersome to maintain. I have no idea why I structured it as a shiny app. Whoopsies.&lt;/p&gt;
&lt;p&gt;Anyway, if you&amp;rsquo;re reading this, this is my new digital home. I plan to share my thoughts and some of my work here going forward. I&amp;rsquo;ve started to back-port some of the previous stuff I&amp;rsquo;ve worked in and plan to add newer content here in the future.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re into R, Shiny, or statistics I think you&amp;rsquo;ll enjoy this place. I hope you stick around!&lt;/p&gt;
&lt;p&gt;A special shoutout to Andreas Handel&amp;rsquo;s &lt;a href=&#34;https://www.andreashandel.com/posts/blogdown-website-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;guide&lt;/a&gt; for getting started with blogdown and Hugo.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
