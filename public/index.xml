<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matthew Kumar</title>
    <link>https://academic-demo.netlify.app/</link>
      <atom:link href="https://academic-demo.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <description>Matthew Kumar</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 02 Jan 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://academic-demo.netlify.app/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>Matthew Kumar</title>
      <link>https://academic-demo.netlify.app/</link>
    </image>
    
    <item>
      <title>LLM monitoring</title>
      <link>https://academic-demo.netlify.app/post/2025-01-02-llmlogging/llmlogging/</link>
      <pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/2025-01-02-llmlogging/llmlogging/</guid>
      <description>&lt;h1 id=&#34;forward&#34;&gt;Forward&lt;/h1&gt;
&lt;p&gt;To kick off the new year, I wanted to share a development in an AI-enabled R Shiny application I’ve been working on. 🍾 ✨&lt;/p&gt;
&lt;p&gt;If you’re curious about the application, you can check out the video and slides from the presentation at R/Pharma Gen AI Day last year:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?app=desktop&amp;amp;v=0XDVYdyuNGc&amp;amp;ab_channel=RinPharma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;video&lt;/a&gt; - &lt;a href=&#34;https://github.com/mattkumar/blog/raw/main/content/event/rpharma/NarromaticAI.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;taking-stock-r-and-gen-ai&#34;&gt;Taking Stock: R and Gen AI&lt;/h1&gt;
&lt;p&gt;Compared to languages like Python 🐍 or JS, R has seen relatively little official support for LLM-based SDKs, frameworks, and tools from platforms like OpenAI and LangChain. These tools have become essential for building feature-rich generative AI applications, but R users, myself included, aren’t holding our breath for parity anytime soon.&lt;/p&gt;
&lt;p&gt;Fortunately, the R community has stepped up, building innovative solutions to bridge the gap. Simply search CRAN for examples. Posit has also made strides with packages like &lt;a href=&#34;https://httr2.r-lib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;httr2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://ellmer.tidyverse.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;elmer&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://posit-dev.github.io/shinychat/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;shinychat&lt;/code&gt;&lt;/a&gt;, which streamline LLM integration for R users. Their work in the Python 🐍 ecosystem has further improved the experience for Shiny Python developers too.&lt;/p&gt;
&lt;h1 id=&#34;llm-logging&#34;&gt;LLM Logging&lt;/h1&gt;
&lt;p&gt;One challenge I tackled was building a logging system to monitor the utilization and costs 🤑 of my app, which relies on LLMs for text generation and figure interpretation.&lt;/p&gt;
&lt;p&gt;With a growing user base 👥, tracking this data is crucial for planning and requesting additional resources. Beyond cost management, this system provides insights into user behavior, helping us refine the app’s performance and user experience.&lt;/p&gt;
&lt;p&gt;While tools like &lt;a href=&#34;https://www.langchain.com/langsmith&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LangSmith&lt;/a&gt; offer similar functionality, integration with R or Shiny isn’t straightforward—so I decided to roll my own solution.👷 🔨 ⚒&lt;/p&gt;
&lt;h1 id=&#34;building-a-recipe&#34;&gt;Building a Recipe&lt;/h1&gt;
&lt;p&gt;To begin, I needed persistent storage ⬆️ for logging. Since &lt;strong&gt;our&lt;/strong&gt; Posit Connect lacks persistent storage, I opted for AWS S3 buckets due to their ease of setup over alternatives like PostgreSQL.&lt;/p&gt;
&lt;p&gt;Next, I determined what to log and how to capture it 🤔. My app uses custom JavaScript for API requests to internal LLM instances. This is something that I had the unpleasant task with figuring out how to pull out relevant pieces of information responses and relaying it back to R 🔄.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alright, it wasn&amp;rsquo;t &lt;em&gt;that&lt;/em&gt; bad, but I feel unnecessary. Remember the lack of R support? We went with a custom JS implementation because streaming was vital to our UX, and at the time there was no easy way to do it. I just needed to modify it further.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From the JS side, I logged:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ Cost (in dollars)&lt;/li&gt;
&lt;li&gt;✅ Token usage (completion, prompt, total)&lt;/li&gt;
&lt;li&gt;✅ Latency (response time: end-time - start-time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the R side, I logged:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;☑️ User ID&lt;/li&gt;
&lt;li&gt;☑️ A unique session ID (generated using &lt;code&gt;{uuid}&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;☑️ Date&lt;/li&gt;
&lt;li&gt;☑️ Order ID (tracks order in which LLMs are called)&lt;/li&gt;
&lt;li&gt;☑️ Module used&lt;/li&gt;
&lt;li&gt;☑️ LLM model name used&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these metrics, I created a data frame to hold this information which would become the foundation of a session log 📝.&lt;/p&gt;
&lt;h1 id=&#34;integration&#34;&gt;Integration&lt;/h1&gt;
&lt;p&gt;Using the &lt;code&gt;{aws.s3}&lt;/code&gt; 📦, I configured secure access to our S3 buckets. In the app’s global server, I initialized a reactive data frame to store log data of a users session. Each time a user interacted with an LLM in a module, that log was updated via &lt;code&gt;bind_rows()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To persist logs when sessions ended (often abruptly when users closed their browsers), I used &lt;code&gt;session$onSessionEnded&lt;/code&gt; to write the log to an S3 bucket as a CSV file 📤. A consistent naming convention ensured easier future retrieval 📥.&lt;/p&gt;
&lt;p&gt;The key functions here were &lt;code&gt;shiny::isolate&lt;/code&gt;, &lt;code&gt;write.csv&lt;/code&gt;, and &lt;code&gt;aws.s3::put_object&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;retrieval&#34;&gt;Retrieval&lt;/h1&gt;
&lt;p&gt;After local testing, I deployed this solution to a test instance. To my surprise, it worked flawlessly 🤩.&lt;/p&gt;
&lt;p&gt;Here’s an example of retrieving a log in R for inspection:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://github.com/mattkumar/shinysave/blob/main/snapshot.jpg?raw=true&#34; alt=&#34;problem&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I also wrote helper functions to pull logs (by date range or all at once), concatenate them, and prepare them for analysis.&lt;/p&gt;
&lt;h1 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;Further testing and optimization are needed, but the system is functional. My next goal is to build a Shiny dashboard for aggregating, slicing and visualizing metrics 📉 📊. This will provide data-driven insights and strengthen my case for additional funding if and when required.&lt;/p&gt;
&lt;p&gt;Till next time 🍻🙏 !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Athena</title>
      <link>https://academic-demo.netlify.app/project/athena/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/athena/</guid>
      <description>&lt;h2&gt;The App&lt;/h2&gt;
&lt;hr&gt;
Athena is a simple web app with a single purpose: allow users to easily obtain AI-assisted descriptions of their images. A lot of thought went into the user interface and experience, though not necessarily effort 😜. More on that later.  
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;At it&amp;rsquo;s core, Athena allows:&lt;/p&gt;
&lt;p&gt;👉 Easy upload of your images - drag and drop into the file drop area&lt;/p&gt;
&lt;p&gt;👉 You can also paste  files or drag  most images from the web too (e.g. google images)&lt;/p&gt;
&lt;p&gt;🌿 Each time a file is uploaded, a card is created. Each card contains the image thumbnail, editable prompt, trigger button and a response area.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /project/athena/athena_hu0af283eeca3a03fbf9a631392d47c4fd_779253_f0e44d6b8d595a4e44c1a16b79848fc7.webp 400w,
               /project/athena/athena_hu0af283eeca3a03fbf9a631392d47c4fd_779253_486b38decf015e27ff5d8f274a9cfc4c.webp 760w,
               /project/athena/athena_hu0af283eeca3a03fbf9a631392d47c4fd_779253_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/athena/athena_hu0af283eeca3a03fbf9a631392d47c4fd_779253_f0e44d6b8d595a4e44c1a16b79848fc7.webp&#34;
               width=&#34;760&#34;
               height=&#34;414&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s really that simple. Give it a try!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️ The app deployed on ghp is inert; you&amp;rsquo;ll need to clone the repo and adjust &lt;em&gt;utils.js&lt;/em&gt; to point to your LLM api end point along with your api key 🔐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2&gt;Why make this?&lt;/h2&gt;
&lt;hr&gt;
Well, UI has always been a passion of mine, but UX too. In our internal platforms for LLMs, it can be a bit cumbersome to perform image interpretation. I wanted a streamlined way to do a task I perform frequently at the drop of a hat 🏃🏻‍♂💨️   
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;I also chose to do this as a static webpage because I thought a shiny app would be overkill for this 😅.&lt;/p&gt;
&lt;h2&gt;Assurance&lt;/h2&gt;
&lt;hr&gt;
I didn&#39;t do the majority of the programming for Athena. GPT-4O and GPT-4O-mini &lt;i&gt;did&lt;/i&gt;. As a secondary objective, I was curious whether:  
&lt;br&gt;
&lt;br&gt;
❓ This app  could be generated completely by AI itself?    
&lt;br&gt;
❓ Will I have a job in a few years 😂   ?
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;I&amp;rsquo;m happy to share that generative AI, at the least the models I employed, were not enough to generate this completely. Even with several attempts and strategies of prompting 📝, it still required quite a bit of human-in-the-loop to get it right 👫. Here&amp;rsquo;s a few points on my experience:
&lt;br&gt;
&lt;br&gt;
✔️ AI was helpful in getting started from scratch. Everything from scaffolding files in a structured way that made working on the app easier
&lt;br&gt;
&lt;br&gt;
✔️ Basic CSS, HTML tasks were do-able with ease
&lt;br&gt;
&lt;br&gt;
⚠️ Advanced CSS and JS required frequent iteration and testing 🔄. This was frustrating and time ⌛ consuming.
&lt;br&gt;
&lt;br&gt;
✔️ Common tasks like using fetch API to access openai&amp;rsquo;s end point are well understood
&lt;br&gt;
&lt;br&gt;
⚠️ Specifying named JS libraries were amenable, but only after I specifically prompted it&amp;rsquo;s use. It was really hard to get the file-area-upload from first principles. However, I knew about &lt;a href=&#34;https://www.dropzone.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dropzone.js&lt;/a&gt;, so I asked it to use it instead. It didn&amp;rsquo;t work 100% out of the box, so I still had to read the documentation and alter the generated code.
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;In the end, I probably could have coded this myself more quickly than ask AI to generate it. I realize there&amp;rsquo;s a lot of things that you need to be deeply aware of before you can ask AI to generate you something as complex as a web app. For example, JS libraries, CSS frameworks (Bootstrap 5 class names), Names (HTML elements, CSS selectors, function names), and even coding approaches for efficiency. 
&lt;br&gt;
&lt;br&gt;
It&amp;rsquo;s not push start. At least not with these models. I wonder how Strawberry would do 🤔&lt;/p&gt;
&lt;p&gt;In sum, my job is at least safe for the next bit 🙆&lt;/p&gt;
&lt;p&gt;Till next time!&lt;/p&gt;
&lt;p&gt;🍻🌴&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NarromaticAI</title>
      <link>https://academic-demo.netlify.app/talk/narromaticai/</link>
      <pubDate>Tue, 17 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/talk/narromaticai/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data Insight Generation</title>
      <link>https://academic-demo.netlify.app/talk/data-insight-generation/</link>
      <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/talk/data-insight-generation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>custom langchain agents</title>
      <link>https://academic-demo.netlify.app/post/2024-03-28-langagents/purrr/</link>
      <pubDate>Thu, 28 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/2024-03-28-langagents/purrr/</guid>
      <description>&lt;p&gt;AI, LLMs and ChatGPT have been all the 🌊 the last 12 months and I
haven&amp;rsquo;t  written about it here&amp;hellip; until now. Today I want to write
about an interesting problem that the &lt;a href=&#34;https://www.langchain.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;langchain&lt;/a&gt; can potentially solve.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll assume from here on in you  have heard and (hopefully) tried
&amp;ldquo;ChatGPT&amp;rdquo; yourself 👨‍💻&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;A picture is worth a thousand words.&amp;rdquo; &lt;em&gt;In this case, a picture of words is
worth saving me a thousand keystrokes:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://github.com/mattkumar/shinysave/blob/main/problem.png?raw=true&#34; alt=&#34;problem&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;One of the reasons ChatGPT can&amp;rsquo;t give responses based on real-time information because the underlying model
was trained with data up to a certain point in time.&lt;/p&gt;
&lt;h2 id=&#34;langchain&#34;&gt;Langchain&lt;/h2&gt;
&lt;p&gt;Enter Langchain. Specifically Langchain Agents.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://qph.cf2.quoracdn.net/main-qimg-9935661f2ef938ba6a60d4e0c4447a09-lq&#34; alt=&#34;matrix-agents&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not going to go into an exposition on them (&lt;a href=&#34;https://python.langchain.com/docs/modules/agents/quick_start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;read the docs 📗📘📙&lt;/a&gt;)
but I want to show how we can leverage them to do things for us.&lt;/p&gt;
&lt;p&gt;At a high level, I&amp;rsquo;ll create a &amp;ldquo;tool&amp;rdquo; 🔨 to do a task. I&amp;rsquo;ll make this tool available to the LLM via Langchain. When the agent is invoked, it will reason whether to use my tool (or not 🤔) based on my prompt 🗯&lt;/p&gt;
&lt;h2 id=&#34;my-first-tool&#34;&gt;My First Tool&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s call him Smith 👤&lt;/p&gt;
&lt;p&gt;Smith is a Python 🐍 function that will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access a public API that suggests activities to someone who is bored 📡&lt;/li&gt;
&lt;li&gt;Return a random response 🔙&lt;/li&gt;
&lt;li&gt;Parse the response to a string 👷&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def Smith():
    res = requests.get(&#39;https://www.boredapi.com/api/activity?participants=1&#39;)
    return res.json()[&#39;activity&#39;] + &#39; Key:&#39; + res.json()[&#39;key&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s an example of a return:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Bake pastries for you and your neighbor Key:8125168&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We get a single activity recommendation, followed by a reference 🔑  to verify the message came from the API. See here: &lt;a href=&#34;http://www.boredapi.com/api/activity?key=8125168&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So our tool &lt;code&gt;Smith()&lt;/code&gt; does what we want. The task at hand now is to make &lt;code&gt;Smith()&lt;/code&gt; available to the LLM. And that&amp;rsquo;s where Langchain comes in.&lt;/p&gt;
&lt;h2 id=&#34;llms-and-smith&#34;&gt;LLMs and Smith&lt;/h2&gt;
&lt;p&gt;In this section I&amp;rsquo;ll show very briefly how to include &lt;code&gt;Smith()&lt;/code&gt; inside of a Langchain agent call:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from langchain_openai import ChatOpenAI
from langchain.tools import BaseTool
from langchain.agents import initialize_agent
import requests

llm = ChatOpenAI()

class Smith(BaseTool):
    name = &amp;quot;suggestions for boredom&amp;quot;
    description = &amp;quot;useful for when you need to give suggestions for boredom.&amp;quot;

    def _run(self, query: str) -&amp;gt; str:
        res = requests.get(&#39;https://www.boredapi.com/api/activity?participants=1&#39;)
        return res.json()[&#39;activity&#39;] + &#39; Key:&#39; + res.json()[&#39;key&#39;]

agent = initialize_agent(llm = llm, 
                         tools = [Smith()], 
                         agent = &amp;quot;zero-shot-react-description&amp;quot;, 
                         verbose = True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s about it.  Lets try running it with the following prompt and view the output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agent.run(&amp;quot;I am bored, suggest me a few activities. Provide me a key for each activity so I can reference it later.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://github.com/mattkumar/shinysave/blob/main/eg1.png?raw=true&#34; alt=&#34;output1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;💥 Pretty neat, right? This output log shows the reasoning of the agent through &lt;code&gt;Action&lt;/code&gt;, &lt;code&gt;Observation&lt;/code&gt;, &lt;code&gt;Thoughts&lt;/code&gt; steps until it arrives at a final answer. The point here is that it used &lt;code&gt;Smith()&lt;/code&gt; to reply because it was determined the tool was the right fit 💯&lt;/p&gt;
&lt;h2 id=&#34;my-second-tool&#34;&gt;My Second Tool&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s call him Johnson 👤&lt;/p&gt;
&lt;p&gt;Johnson is also a Python 🐍 function. He&amp;rsquo;s made with BeautifulSoup and his job is to scrape &lt;code&gt;google.ca&lt;/code&gt; for the current weather for a location of my choosing.&lt;/p&gt;
&lt;p&gt;Here he is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bs4 import BeautifulSoup
import requests

def Johnson(query: str) -&amp;gt; str:
    url = f&#39;https://google.ca/search?q=weather+{query}&#39;
    headers = {&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36&#39;}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, &#39;html.parser&#39;)
    
    temp_elem = soup.find(&#39;span&#39;, id=&#39;wob_tm&#39;)
    unit_elem = soup.find(&#39;div&#39;, class_=&#39;vk_bk wob-unit&#39;)
    desc_elem = soup.find(&#39;div&#39;, class_=&#39;VQF4g&#39;)
    
    return print( temp + unit + &#39; &#39; + desc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s see what he returns:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Johnson(query = &amp;quot;Toronto&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;-2°C Snow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool, so learning what we did in the previous example, we can probably use &lt;code&gt;Johnson()&lt;/code&gt; to get an answer to the question posed in the beginning of the article.&lt;/p&gt;
&lt;p&gt;But why stop there? 🤔&lt;/p&gt;
&lt;h2 id=&#34;agent-mania&#34;&gt;Agent Mania&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s see how we can utilize &lt;code&gt;Smith()&lt;/code&gt; and &lt;code&gt;Johnson()&lt;/code&gt; together 👥 to answer a more interesting question. Like before, we start with the prompt and view the output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agent.run(&amp;quot;Suggest me a few activities to do today, I am bored. If the activities are outdoors, comment on the weather. I am located in Toronto. Comment on whether the weather will be an issue for each activity.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://github.com/mattkumar/shinysave/blob/main/eg2.png?raw=true&#34; alt=&#34;output-2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;🤯 😱 🤯 Just take a few seconds and re-read that response log and appreciate what&amp;rsquo;s happening here 😱 🤯 😱&lt;/p&gt;
&lt;p&gt;🔥 Absolutely.  🔥 Positively.  🔥 Wild.&lt;/p&gt;
&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;I hope this short demo of custom Langchain agents will be useful in your own work, the skies the limit 🚀&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://github.com/mattkumar/shinysave/blob/main/smithflex.jpg?raw=true&#34; alt=&#34;power&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Langchain already has a set of predefined &amp;ldquo;tools&amp;rdquo; for agentic modeling you can use including weather  (&lt;a href=&#34;https://python.langchain.com/docs/integrations/tools/openweathermap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenWeather&lt;/a&gt;) and internet search (&lt;a href=&#34;https://python.langchain.com/docs/integrations/providers/serpapi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SerpAPI&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The point here was to show how to do this yourself in case you have custom requirements for which no off-the-shelf tool exists 💪💪🏻💪🏼&lt;/p&gt;
&lt;p&gt;Till next time 🍻🙏 !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>story creator</title>
      <link>https://academic-demo.netlify.app/project/react/</link>
      <pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/react/</guid>
      <description>&lt;h2&gt;The App&lt;/h2&gt;
&lt;hr&gt;
This is a simple React &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; height=&#34;16&#34; width=&#34;16&#34; viewBox=&#34;0 0 512 512&#34;&gt;&lt;!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--&gt;&lt;path d=&#34;M418.2 177.2c-5.4-1.8-10.8-3.5-16.2-5.1 .9-3.7 1.7-7.4 2.5-11.1 12.3-59.6 4.2-107.5-23.1-123.3-26.3-15.1-69.2 .6-112.6 38.4-4.3 3.7-8.5 7.6-12.5 11.5-2.7-2.6-5.5-5.2-8.3-7.7-45.5-40.4-91.1-57.4-118.4-41.5-26.2 15.2-34 60.3-23 116.7 1.1 5.6 2.3 11.1 3.7 16.7-6.4 1.8-12.7 3.8-18.6 5.9C38.3 196.2 0 225.4 0 255.6c0 31.2 40.8 62.5 96.3 81.5 4.5 1.5 9 3 13.6 4.3-1.5 6-2.8 11.9-4 18-10.5 55.5-2.3 99.5 23.9 114.6 27 15.6 72.4-.4 116.6-39.1 3.5-3.1 7-6.3 10.5-9.7 4.4 4.3 9 8.4 13.6 12.4 42.8 36.8 85.1 51.7 111.2 36.6 27-15.6 35.8-62.9 24.4-120.5-.9-4.4-1.9-8.9-3-13.5 3.2-.9 6.3-1.9 9.4-2.9 57.7-19.1 99.5-50 99.5-81.7 0-30.3-39.4-59.7-93.8-78.4zM282.9 92.3c37.2-32.4 71.9-45.1 87.7-36 16.9 9.7 23.4 48.9 12.8 100.4-.7 3.4-1.4 6.7-2.3 10-22.2-5-44.7-8.6-67.3-10.6-13-18.6-27.2-36.4-42.6-53.1 3.9-3.7 7.7-7.2 11.7-10.7zM167.2 307.5c5.1 8.7 10.3 17.4 15.8 25.9-15.6-1.7-31.1-4.2-46.4-7.5 4.4-14.4 9.9-29.3 16.3-44.5 4.6 8.8 9.3 17.5 14.3 26.1zm-30.3-120.3c14.4-3.2 29.7-5.8 45.6-7.8-5.3 8.3-10.5 16.8-15.4 25.4-4.9 8.5-9.7 17.2-14.2 26-6.3-14.9-11.6-29.5-16-43.6zm27.4 68.9c6.6-13.8 13.8-27.3 21.4-40.6s15.8-26.2 24.4-38.9c15-1.1 30.3-1.7 45.9-1.7s31 .6 45.9 1.7c8.5 12.6 16.6 25.5 24.3 38.7s14.9 26.7 21.7 40.4c-6.7 13.8-13.9 27.4-21.6 40.8-7.6 13.3-15.7 26.2-24.2 39-14.9 1.1-30.4 1.6-46.1 1.6s-30.9-.5-45.6-1.4c-8.7-12.7-16.9-25.7-24.6-39s-14.8-26.8-21.5-40.6zm180.6 51.2c5.1-8.8 9.9-17.7 14.6-26.7 6.4 14.5 12 29.2 16.9 44.3-15.5 3.5-31.2 6.2-47 8 5.4-8.4 10.5-17 15.5-25.6zm14.4-76.5c-4.7-8.8-9.5-17.6-14.5-26.2-4.9-8.5-10-16.9-15.3-25.2 16.1 2 31.5 4.7 45.9 8-4.6 14.8-10 29.2-16.1 43.4zM256.2 118.3c10.5 11.4 20.4 23.4 29.6 35.8-19.8-.9-39.7-.9-59.5 0 9.8-12.9 19.9-24.9 29.9-35.8zM140.2 57c16.8-9.8 54.1 4.2 93.4 39 2.5 2.2 5 4.6 7.6 7-15.5 16.7-29.8 34.5-42.9 53.1-22.6 2-45 5.5-67.2 10.4-1.3-5.1-2.4-10.3-3.5-15.5-9.4-48.4-3.2-84.9 12.6-94zm-24.5 263.6c-4.2-1.2-8.3-2.5-12.4-3.9-21.3-6.7-45.5-17.3-63-31.2-10.1-7-16.9-17.8-18.8-29.9 0-18.3 31.6-41.7 77.2-57.6 5.7-2 11.5-3.8 17.3-5.5 6.8 21.7 15 43 24.5 63.6-9.6 20.9-17.9 42.5-24.8 64.5zm116.6 98c-16.5 15.1-35.6 27.1-56.4 35.3-11.1 5.3-23.9 5.8-35.3 1.3-15.9-9.2-22.5-44.5-13.5-92 1.1-5.6 2.3-11.2 3.7-16.7 22.4 4.8 45 8.1 67.9 9.8 13.2 18.7 27.7 36.6 43.2 53.4-3.2 3.1-6.4 6.1-9.6 8.9zm24.5-24.3c-10.2-11-20.4-23.2-30.3-36.3 9.6 .4 19.5 .6 29.5 .6 10.3 0 20.4-.2 30.4-.7-9.2 12.7-19.1 24.8-29.6 36.4zm130.7 30c-.9 12.2-6.9 23.6-16.5 31.3-15.9 9.2-49.8-2.8-86.4-34.2-4.2-3.6-8.4-7.5-12.7-11.5 15.3-16.9 29.4-34.8 42.2-53.6 22.9-1.9 45.7-5.4 68.2-10.5 1 4.1 1.9 8.2 2.7 12.2 4.9 21.6 5.7 44.1 2.5 66.3zm18.2-107.5c-2.8 .9-5.6 1.8-8.5 2.6-7-21.8-15.6-43.1-25.5-63.8 9.6-20.4 17.7-41.4 24.5-62.9 5.2 1.5 10.2 3.1 15 4.7 46.6 16 79.3 39.8 79.3 58 0 19.6-34.9 44.9-84.8 61.4zm-149.7-15c25.3 0 45.8-20.5 45.8-45.8s-20.5-45.8-45.8-45.8c-25.3 0-45.8 20.5-45.8 45.8s20.5 45.8 45.8 45.8z&#34;/&gt;&lt;/svg&gt; app I wrote that has the following intention:  
&lt;ul&gt;
&lt;li&gt;A user provides 4 topic areas they want a funny, short story written about&lt;/li&gt;
&lt;li&gt;A prompt is created in the background based on that input&lt;/li&gt;
&lt;li&gt;The prompt is sent to Open AI via an API to request a story&lt;/li&gt;
&lt;li&gt;The returned story is displayed to the user&lt;/li&gt;
&lt;li&gt;The app is styled to give an &amp;lsquo;authors&amp;rsquo; feel via borrowed CSS and MS Paint&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It turns out my API usage hit it&amp;rsquo;s limit 🥀, so I&amp;rsquo;ve slightly altered the code to just display a static message. The ChatGPT part was secondary to actually learning and applying react, which was the real purpose of this. See below! &lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2&gt;The Journey&lt;/h2&gt;
&lt;hr&gt;
I&#39;ll start by saying I 😍 shiny. It&#39;s my 🔝. But this year has shown me a few things, namely, it&#39;s 😢 to need a Connect server to share apps. I&#39;ve also wanted to learn something a bit more broad strokes, and so I chose React &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; height=&#34;16&#34; width=&#34;16&#34; viewBox=&#34;0 0 512 512&#34;&gt;&lt;!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--&gt;&lt;path d=&#34;M418.2 177.2c-5.4-1.8-10.8-3.5-16.2-5.1 .9-3.7 1.7-7.4 2.5-11.1 12.3-59.6 4.2-107.5-23.1-123.3-26.3-15.1-69.2 .6-112.6 38.4-4.3 3.7-8.5 7.6-12.5 11.5-2.7-2.6-5.5-5.2-8.3-7.7-45.5-40.4-91.1-57.4-118.4-41.5-26.2 15.2-34 60.3-23 116.7 1.1 5.6 2.3 11.1 3.7 16.7-6.4 1.8-12.7 3.8-18.6 5.9C38.3 196.2 0 225.4 0 255.6c0 31.2 40.8 62.5 96.3 81.5 4.5 1.5 9 3 13.6 4.3-1.5 6-2.8 11.9-4 18-10.5 55.5-2.3 99.5 23.9 114.6 27 15.6 72.4-.4 116.6-39.1 3.5-3.1 7-6.3 10.5-9.7 4.4 4.3 9 8.4 13.6 12.4 42.8 36.8 85.1 51.7 111.2 36.6 27-15.6 35.8-62.9 24.4-120.5-.9-4.4-1.9-8.9-3-13.5 3.2-.9 6.3-1.9 9.4-2.9 57.7-19.1 99.5-50 99.5-81.7 0-30.3-39.4-59.7-93.8-78.4zM282.9 92.3c37.2-32.4 71.9-45.1 87.7-36 16.9 9.7 23.4 48.9 12.8 100.4-.7 3.4-1.4 6.7-2.3 10-22.2-5-44.7-8.6-67.3-10.6-13-18.6-27.2-36.4-42.6-53.1 3.9-3.7 7.7-7.2 11.7-10.7zM167.2 307.5c5.1 8.7 10.3 17.4 15.8 25.9-15.6-1.7-31.1-4.2-46.4-7.5 4.4-14.4 9.9-29.3 16.3-44.5 4.6 8.8 9.3 17.5 14.3 26.1zm-30.3-120.3c14.4-3.2 29.7-5.8 45.6-7.8-5.3 8.3-10.5 16.8-15.4 25.4-4.9 8.5-9.7 17.2-14.2 26-6.3-14.9-11.6-29.5-16-43.6zm27.4 68.9c6.6-13.8 13.8-27.3 21.4-40.6s15.8-26.2 24.4-38.9c15-1.1 30.3-1.7 45.9-1.7s31 .6 45.9 1.7c8.5 12.6 16.6 25.5 24.3 38.7s14.9 26.7 21.7 40.4c-6.7 13.8-13.9 27.4-21.6 40.8-7.6 13.3-15.7 26.2-24.2 39-14.9 1.1-30.4 1.6-46.1 1.6s-30.9-.5-45.6-1.4c-8.7-12.7-16.9-25.7-24.6-39s-14.8-26.8-21.5-40.6zm180.6 51.2c5.1-8.8 9.9-17.7 14.6-26.7 6.4 14.5 12 29.2 16.9 44.3-15.5 3.5-31.2 6.2-47 8 5.4-8.4 10.5-17 15.5-25.6zm14.4-76.5c-4.7-8.8-9.5-17.6-14.5-26.2-4.9-8.5-10-16.9-15.3-25.2 16.1 2 31.5 4.7 45.9 8-4.6 14.8-10 29.2-16.1 43.4zM256.2 118.3c10.5 11.4 20.4 23.4 29.6 35.8-19.8-.9-39.7-.9-59.5 0 9.8-12.9 19.9-24.9 29.9-35.8zM140.2 57c16.8-9.8 54.1 4.2 93.4 39 2.5 2.2 5 4.6 7.6 7-15.5 16.7-29.8 34.5-42.9 53.1-22.6 2-45 5.5-67.2 10.4-1.3-5.1-2.4-10.3-3.5-15.5-9.4-48.4-3.2-84.9 12.6-94zm-24.5 263.6c-4.2-1.2-8.3-2.5-12.4-3.9-21.3-6.7-45.5-17.3-63-31.2-10.1-7-16.9-17.8-18.8-29.9 0-18.3 31.6-41.7 77.2-57.6 5.7-2 11.5-3.8 17.3-5.5 6.8 21.7 15 43 24.5 63.6-9.6 20.9-17.9 42.5-24.8 64.5zm116.6 98c-16.5 15.1-35.6 27.1-56.4 35.3-11.1 5.3-23.9 5.8-35.3 1.3-15.9-9.2-22.5-44.5-13.5-92 1.1-5.6 2.3-11.2 3.7-16.7 22.4 4.8 45 8.1 67.9 9.8 13.2 18.7 27.7 36.6 43.2 53.4-3.2 3.1-6.4 6.1-9.6 8.9zm24.5-24.3c-10.2-11-20.4-23.2-30.3-36.3 9.6 .4 19.5 .6 29.5 .6 10.3 0 20.4-.2 30.4-.7-9.2 12.7-19.1 24.8-29.6 36.4zm130.7 30c-.9 12.2-6.9 23.6-16.5 31.3-15.9 9.2-49.8-2.8-86.4-34.2-4.2-3.6-8.4-7.5-12.7-11.5 15.3-16.9 29.4-34.8 42.2-53.6 22.9-1.9 45.7-5.4 68.2-10.5 1 4.1 1.9 8.2 2.7 12.2 4.9 21.6 5.7 44.1 2.5 66.3zm18.2-107.5c-2.8 .9-5.6 1.8-8.5 2.6-7-21.8-15.6-43.1-25.5-63.8 9.6-20.4 17.7-41.4 24.5-62.9 5.2 1.5 10.2 3.1 15 4.7 46.6 16 79.3 39.8 79.3 58 0 19.6-34.9 44.9-84.8 61.4zm-149.7-15c25.3 0 45.8-20.5 45.8-45.8s-20.5-45.8-45.8-45.8c-25.3 0-45.8 20.5-45.8 45.8s20.5 45.8 45.8 45.8z&#34;/&gt;&lt;/svg&gt;
&lt;br&gt;&lt;br&gt;
This app, while simple, was a bit of a pain to get up and running. Here are the things I needed to learn:
&lt;br&gt;&lt;br&gt;
- &lt;strong&gt;🔨 fundamental react concepts and syntax 👨‍💻:&lt;/strong&gt; I mostly followed Youtube 🎥 and surprisingly... the official 📝. I tried &lt;strong&gt;not&lt;/strong&gt; to use GPT in generating any code as that would defeat the purpose 🎯
&lt;br&gt;
&lt;br&gt;
- &lt;strong&gt;◀️ adapting ideas ▶️:&lt;/strong&gt; What I mean by this is pretty much switching mindsets and translating my ideas, couched Shiny&#39;s reactive framework, to React. The UI side was easy since I use a lot of custom CSS and JS in my shiny apps 💅
&lt;br&gt;
&lt;br&gt;
- &lt;strong&gt;👷 development environment setup:&lt;/strong&gt; I (begrudgingly) used VSCode to do the development. This involved setting up Node, using `npm` and getting familiar with testing and debugging in Chrome developer tools. `npm create-react-app` allowed me to hit the ground running 🏃💨
&lt;br&gt;
&lt;br&gt;
- &lt;strong&gt;CI/CD:&lt;/strong&gt; kind of, I first setup a github repository in VSCode, which was a learning by itself 👨‍🏫. I then had to figure out how to actually `build` 🛠 a react app and deploy it somewhere! Here I setup a process to compile and push to gh-pages for hosting.
&lt;br&gt;&lt;br&gt;
I realize a lot of these things I take for granted using R Studio and I see the value in knowing how to do it through other means ✅. I&#39;ll  most likely continue working on my react skills next year, so keep an eye out!
&lt;br&gt;&lt;br&gt;
Till next time 🍻✌
</description>
    </item>
    
    <item>
      <title>shinyMeta</title>
      <link>https://academic-demo.netlify.app/project/shinymeta/</link>
      <pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/shinymeta/</guid>
      <description>&lt;h2&gt;...catching Up&lt;/h2&gt;
&lt;p&gt;This is sort of an overdue post 😊&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m now sharing the supporting app to my talk on &lt;strong&gt;Reproducibility of Interactive Analyses&lt;/strong&gt;, which I presented at &lt;a href=&#34;https://phuse.global/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Phuse US Connect 2023&lt;/a&gt; earlier this year.&lt;/p&gt;
&lt;p&gt;Links to the original slides and accompanying paper are found up above ☝&lt;/p&gt;
&lt;p&gt;Till next time 🍻✌&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>saving sessions (&#43; shinylive)</title>
      <link>https://academic-demo.netlify.app/post/2023-11-25-shinysave/purrr/</link>
      <pubDate>Sat, 25 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/2023-11-25-shinysave/purrr/</guid>
      <description>&lt;p&gt;It pains me 😩 that whenever I contemplate using shiny for a work-related project, the question of allowing users to save and restore their progress 💬🗨 inevitably arises.&lt;/p&gt;
&lt;p&gt;While there are a variety of ways to do so in shiny (e.g. bookmarks), work-related apps aren&amp;rsquo;t always so straight forward 🔀&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They are usually tied to remote raw data that must be accessed with a live connection 📲&lt;/li&gt;
&lt;li&gt;They involve intermediate calculations that aren&amp;rsquo;t easily restored by simply saving and reloading input values on the UI  👨‍🔬&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, I finally took the time to 🔨 and I&amp;rsquo;m here to share what I&amp;rsquo;ve learned 👨‍🏫
&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;⚡️&lt;strong&gt;Sidebar⚡️ &lt;/strong&gt;Today is a bit of a 2 for 1. The demo app I&amp;rsquo;ve cooked up is using &lt;a href=&#34;https://posit-dev.github.io/r-shinylive/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shinylive&lt;/a&gt;! In a nutshell, the app is ran serverless in the browser via &lt;a href=&#34;https://docs.r-wasm.org/webr/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;webR&lt;/a&gt;. More on that later.&lt;/p&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;
&lt;p&gt;For simplicity, I&amp;rsquo;ve crafted a small app enabling users to upload a SAS Transport (.XPT) data file. The file is parsed using the &lt;code&gt;{haven}&lt;/code&gt; package and presented as a table on the UI. There&amp;rsquo;s also an additional textInput field for users to enter their name.&lt;/p&gt;
&lt;p&gt;Upon visiting the app, users can either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start by uploading a fresh file 📄&lt;/li&gt;
&lt;li&gt;Begin by restoring a previously saved session 💾&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is achieved through a radioButtons control. Upon making a choice, the corresponding fileInput widget is displayed.&lt;/p&gt;
&lt;p&gt;When a fresh file is uploaded 📤, it is read in as binary 👨‍💻 (using &lt;code&gt;readBin&lt;/code&gt; and &lt;code&gt;writeBin&lt;/code&gt;) in a reactiveValues container. Additional 🛠 steps, such as implementing &lt;code&gt;haven::read_xpt()&lt;/code&gt; to another value in the reactiveValues, occur to make it immediately available for use in the app and later. This process unfolds inside an observeEvent 🔍.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;session saving&amp;rdquo; ✨ is managed by a &lt;code&gt;downloadHandler &lt;/code&gt;📥. The content is populated by all current values in the reactiveValues via &lt;code&gt;reactiveValuesToList&lt;/code&gt; 💪. This includes the binary representation of the .XPT file and possibly the processed version. Additionally, other inputs 🎚 can be arbitrarily specified for storage in the file (remember the random textInput asking for your name?).&lt;/p&gt;
&lt;p&gt;So, what happens when you start the app by wanting to restore a previous session❓️ Using the radioButton choice for that, the appropriate fileInput widget is first made available. Once uploaded, the processing essentially involves reassigning all values 📝 from the saved file to the current values in the reactiveValues. For other inputs, such as the textInput, the corresponding updateTextInput is used to restore that value directly. This process takes place within an observeEvent 🔍.&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;A consequence of this approach is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The save file retains a binary representation of your original file. As such you can recreate that file behind the scenes thus making &lt;strong&gt;your app no longer depend on remote access to it&lt;/strong&gt;. Consider that anything can be represented as binary including file types like CSVs, Docx, Images, etc. 😵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;shinylive-app&#34;&gt;Shinylive App&lt;/h2&gt;
&lt;p&gt;You can give this a try in the live app embedded below 👇👇👇&lt;/p&gt;
&lt;p&gt;👉 Use this save file I generated: &lt;a href=&#34;https://raw.githubusercontent.com/mattkumar/blog/main/content/post/2023-11-25-shinysave/my_saved_session.RData&#34; download=&#34;my_saved_session.RData&#34;&gt;Download my_saved_session.RData&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you upload it, you&amp;rsquo;ll see my progress. You&amp;rsquo;ll also see the contents of the save file, which shows both the binary representation of the source file (which you don&amp;rsquo;t have).&lt;/p&gt;
&lt;iframe src=&#34;https://mattkumar.github.io/shinysave&#34; width=&#34;100%&#34; height=&#34;600&#34;, style = &#34;border: none;&#34;&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m not sure if I&amp;rsquo;m idealizing 😍 finally having a solution to a long-standing problem, but I&amp;rsquo;m excited 🤣. The scalability remains uncertain, so it&amp;rsquo;s probably best implemented prospectively 🔜 rather than retro 🔙.&lt;/p&gt;
&lt;p&gt;Another consideration is the source files themselves. In some cases, storing a &amp;ldquo;copy&amp;rdquo; of the data outside its origin might violate company policy 🕵. There&amp;rsquo;s definitely some gray area. In other roles, users already self-manage their own document files in various ways 🤔 🤔 🤔&lt;/p&gt;
&lt;p&gt;And what about file size 📈 ? In this example, the original XPT was 116 kb and the save file was 33.9 kb. Obviously some savings there, but where does that bottom out 🏋? It might depend on the format of the original file type.&lt;/p&gt;
&lt;h2 id=&#34;shinylive&#34;&gt;Shinylive&lt;/h2&gt;
&lt;p&gt;As mentioned earlier, I&amp;rsquo;ve used this post as a two-for-one. Since this app is relatively lightweight, I employed &lt;code&gt;shinylive::export&lt;/code&gt; to convert it to a format I can host as static content (currently on GitHub pages) 🤑&lt;/p&gt;
&lt;p&gt;It was pretty straight forward and overall looks promising. However, there are a few things to be ⚠️ mindful of: Because all of the work 👷 is done in the browser it may take time for things to load ⌛. Another key consideration is whether your app package dependencies 📦 are compatible with &lt;code&gt;webR&lt;/code&gt;. Interactive documentation 📋 on the latter can be found &lt;a href=&#34;https://repo.r-wasm.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://mattkumar.github.io/shinysave&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link to shinylive app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://github.com/mattkumar/shinysave/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github repository with code&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Till next time 🍻🙏 !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DevOps Bootcamp</title>
      <link>https://academic-demo.netlify.app/post/azure/</link>
      <pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/azure/</guid>
      <description>&lt;h4&gt;Preface&lt;/h4&gt;
&lt;p&gt;I&amp;rsquo;ll preface with this post is related to a project I lead at work. I can&amp;rsquo;t share too many details about it here unfortunately (including code), but what I can safely share is my experience and process 💡.&lt;/p&gt;
&lt;h4&gt;tl;dr&lt;/h4&gt;
&lt;p&gt;I lead the development of a medium-size shiny application that is used by users within my organization. This app has evolved to the state where I need to move it from the current platform to a platform that is capable of scaling 📈 and has storage 📁. How can I re-factor my existing app to integrate with this? Keep in mind, not only the access, but the &lt;em&gt;data access&lt;/em&gt; too.🎯&lt;/p&gt;
&lt;h4&gt;First Steps&lt;/h4&gt;
&lt;p&gt;Until very recently, I had almost no experience with Azure or it&amp;rsquo;s systems, or it&amp;rsquo;s esoteric lingo 💬.My first step was to attempt to read test data (prepared by an engineer in a File Container) into my local R. I&amp;rsquo;ll ⏭️ the details of this setup, mostly because I don&amp;rsquo;t quite understand all that the Azure DevOps Engineers️ 👨‍🔧 had to configure, but also my scope is restricted to R and shiny in this post.&lt;/p&gt;
&lt;p&gt;I looked into the &lt;code&gt;AzureStor&lt;/code&gt; package because by it&amp;rsquo;s description alone, it&amp;rsquo;s what I was going to need to do: Access files from Azure Storage. Straight forward right 🤷‍♂️? Not exactly ❌.&lt;/p&gt;
&lt;p&gt;It turns out I needed to use the &lt;code&gt;AzureAuth&lt;/code&gt; package first, whose sole focus is on establishing authentication with services on Azure using Active Directory. OK, so game plan. Use &lt;code&gt;AzureAuth&lt;/code&gt; to &amp;ldquo;connect&amp;rdquo;, get a token 🌕, then pass it to functions in &lt;code&gt;AzureStor&lt;/code&gt; to do operations like read/write/list. Once I could do this, I was confident my app would work in it&amp;rsquo;s entirety. ✔️&lt;/p&gt;
&lt;p&gt;This task in reality took quite a bit of time to map 🕵. Remember, I don&amp;rsquo;t speak Azure. I also don&amp;rsquo;t expect the DevOps engineers 👷 to be familiar with this R package nor support it. Enter growing pains 😭 🏋️‍♀️ 👨‍🔧.&lt;/p&gt;
&lt;p&gt;In the end we did get it mapped out, some parameters / settings more obvious than others, and I could finally read Azure File Containers hosted on the platform in my local R instance. 🎉&lt;/p&gt;
&lt;p&gt;Here is the function I used:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AzureAuth::get_azure_token(resource,   tenant,   app,   password = NULL,   username = NULL,   certificate = NULL,   auth_type = NULL,   aad_host = &amp;quot;https://login.microsoftonline.com/&amp;quot;,   version = 1,   authorize_args = list(),   token_args = list(),   use_cache = NULL,   on_behalf_of = NULL,   auth_code = NULL,   device_creds = NULL )&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Shiny&lt;/h4&gt;
&lt;p&gt;Oh man, you would think just because you can produce something in a local R session, you can throw it into a shiny app and have it work right? right? Wrong ❌.. That was a learning here.&lt;/p&gt;
&lt;img src = &#34;https://i.imgflip.com/5c7lwq.png&#34;&gt;
&lt;p&gt;I&amp;rsquo;ll mention too that on this new platform, we&amp;rsquo;ve chosen to use Posit Connect to host our shiny apps going forward. This product is definitely new to the DevOps team and while I have experience deploying apps to it, I don&amp;rsquo;t have experience in configuring it. 😶.&lt;/p&gt;
&lt;p&gt;Some weeks later, the connect server was setup, and I could deploy hello world apps to it from my local R instance. I could actually deploy my full app, but it essentially didn&amp;rsquo;t do anything since I didn&amp;rsquo;t re-factor the data connectivity. Small victories. 🏁&lt;/p&gt;
&lt;h5&gt;Hello App, with Azure&lt;/h5&gt;
&lt;p&gt;Our first task was to setup any kind of hello world shiny app that could read the files stored in the Azure file container. We eventually got this to work by using the &lt;strong&gt;app-password&lt;/strong&gt; (defined in the link above). This was a reassuring sign of being on the right track ☀️. But what we really needed was to use the &lt;strong&gt;user&lt;/strong&gt; 👥 credentials (since they will be tied to data access within the app). This was a lot more challenging, but an absolute necessity given what my app does.📝&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll say this vignette was &lt;a href=&#34;https://cran.r-project.org/web/packages/AzureAuth/vignettes/shiny.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;super-helpful&lt;/a&gt; &lt;em&gt;in theory&lt;/em&gt;, but a lot of the pains ⌛ were configurations specific to &lt;strong&gt;our companies internal systems&lt;/strong&gt; 👨‍💻&lt;/p&gt;
&lt;h5&gt;Hello Matt, with Azure&lt;/h5&gt;
&lt;p&gt;I tried for the life of me to get the app to pull &lt;strong&gt;my&lt;/strong&gt; credentials with no luck. Relying on the app-password was just a non-starter for this project. Enter &lt;code&gt;AzureGraph&lt;/code&gt; 🌄&lt;/p&gt;
&lt;p&gt;We had Microsoft Graph setup in our Azure system. In the end, after many hours of googling (GPT-4 was not helpful here) and experimenting, I was able to get it working locally. &lt;em&gt;Two steps forward, one step back.&lt;/em&gt; In the end, I managed to integrate the Graph work flow into a shiny app ✔️.&lt;/p&gt;
&lt;p&gt;This is what I did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request a token 🌕️ using Microsoft Graph service. This toke️n &lt;strong&gt;did&lt;/strong&gt; contain my user creds&lt;/li&gt;
&lt;li&gt;clone that token for use in another Microsoft Service, namely Azure Storage&lt;/li&gt;
&lt;li&gt;pass that token when listing/reading/writing files in Azure using &lt;code&gt;AzureStor&lt;/code&gt; within the shiny app ↪️&lt;/li&gt;
&lt;li&gt;❓️❓️❓️&lt;/li&gt;
&lt;li&gt;Profit 🤑.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It worked.&lt;/p&gt;
&lt;p&gt;Below is the culmination of many hours and weeks of learning about Azure, and it&amp;rsquo;s integration into R and Shiny, with the added complexity of our companies systems/policies. 😝😝😝&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/azure/azure_huf0740c0fe63961dde67ca094cffb01c3_38534_c2446936da907ae750a0476b05a7cb0c.webp 400w,
               /post/azure/azure_huf0740c0fe63961dde67ca094cffb01c3_38534_903ef077fa60c597f8c14469be9b08e0.webp 760w,
               /post/azure/azure_huf0740c0fe63961dde67ca094cffb01c3_38534_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/post/azure/azure_huf0740c0fe63961dde67ca094cffb01c3_38534_c2446936da907ae750a0476b05a7cb0c.webp&#34;
               width=&#34;760&#34;
               height=&#34;367&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In the above, I have a simple dashboard with a user card displaying credentials. What&amp;rsquo;s really neat is that since SSO is enabled, I only really need to click a button to actually get a token using the chain of events defined above. What&amp;rsquo;s this mean?&lt;/p&gt;
&lt;p&gt;&amp;lt;em&amp;gt;User&amp;rsquo;s don&amp;rsquo;t really have to &amp;ldquo;login&amp;rdquo; anymore 🔓. Even better, because the storage is setup and the ACL maintained, users only see what they are supposed to see. No more manual setups ☑️ &amp;hellip;at least from my end and from the perspective of Shiny.&amp;lt;/em&amp;gt;&lt;/p&gt;
&lt;p&gt;Okay that&amp;rsquo;s it. I just want to also say I&amp;rsquo;ve learned so much from working with the Azure folks 💪🏻; really I have 🙏. They were super patient with me, and really took the time to explain micro-concepts (much of which abbreviated here or skipped for brevity).&lt;/p&gt;
&lt;p&gt;👉&lt;a href=&#34;https://github.com/Azure/AzureR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;👈 is a nice link to the Azure* Ecosystem of R Packages. All sorts of useful stuff for interacting with Azure, Sharepoint and lots of other services:&lt;/p&gt;
&lt;p&gt;Till next time, 🍻🥂🥃&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GHA and Shiny</title>
      <link>https://academic-demo.netlify.app/project/shiny_gha/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/shiny_gha/</guid>
      <description>&lt;p&gt;This was a fun 🤓 experiment to build the intuition of using Github Actions (GHA) to automate &amp;ldquo;things&amp;rdquo;. In this case, I use GHA to auto-deploy a shiny app to my personal shinyapps.io account.&lt;/p&gt;
&lt;p&gt;In a nutshell, it works like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Everytime a push is made to the master branch of this repo, a github action script is triggered 🏃🏃🏻🏃🏼 💨&lt;/li&gt;
&lt;li&gt;The set of GHAs is specified using a &lt;code&gt;yaml&lt;/code&gt; file, here &lt;code&gt;~/.github/workflows/deploy.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the yaml file, you provide explicit instructions to build your app from the ground up. This includes everything from first installing R, R packages to deployment to shinyapps.io via the &lt;code&gt;{rsconnect}&lt;/code&gt; package.🔀🔁&lt;/li&gt;
&lt;li&gt;One the GHAs are finished, the app is made available at the destination. ✅&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pretty neat!&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://i.imgflip.com/65l2yb.jpg&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In order to test whether GHA was working, the sample app I created is a super-simple dashboard 📈📉📊 that takes a single reactive: the date and time of deployment ⏰. There are other, more informative ways to monitor their progress and I will be covering this and more in depth in my Quarto use-case write up 💬. Stay tuned!&lt;/p&gt;
&lt;p&gt;For now, I want to make this available as it reflects a recent learning and a pattern I can see myself reusing in the future. Many thanks to the following people + resources 💪💪💪&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kcuilla/USgasprices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kyle Cuilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/iqis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Siqi Zhang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ca.coursera.org/learn/making-data-science-work-for-clinical-reporting&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Making Data Science Work for Clinical Reporting Coursera&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Till next time, 🍻!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>reading files with purrr</title>
      <link>https://academic-demo.netlify.app/post/2023-03-13-reading/purrr/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/2023-03-13-reading/purrr/</guid>
      <description>&lt;p&gt;I feel like there are countless examples on how to read a directory of .csv files into R using &lt;code&gt;purrr&lt;/code&gt; 😺. However, in those examples the setup is potentially many CSV files being read in &lt;strong&gt;and stacked into a single data frame&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What if we need to read several .csv (or other types) data files into &lt;em&gt;their own data frame&lt;/em&gt;❓️💡&lt;/p&gt;
&lt;p&gt;In my own work, this is an operation I typically do. Until recently, I haven&amp;rsquo;t bothered how to figure this out in &lt;code&gt;purrr&lt;/code&gt;. Don&amp;rsquo;t ask how I was doing it before. 🤢&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a small snippet that will demonstrate how to use &lt;code&gt;purrr::pmap()&lt;/code&gt; to perform this operation. Instead of .csv files, we&amp;rsquo;ll read in .xpt (SAS Transport) using &lt;code&gt;haven::read_xpt()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-1&#34;&gt;Step 1&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s first identify the relevant files we want to read in using &lt;code&gt;list.files()&lt;/code&gt; and store this as a character vector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(purrr)
library(dplyr)

files &amp;lt;- list.files(&amp;quot;C:\\&amp;quot;, pattern = &amp;quot;*.xpt&amp;quot;, full.names = TRUE)

# preview
files
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## character(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;step-2&#34;&gt;Step 2&lt;/h2&gt;
&lt;p&gt;Next, for each element of the files character vector, we&amp;rsquo;ll read in the corresponding file using a combination of &lt;code&gt;purrr::map&lt;/code&gt; and &lt;code&gt;haven::read_xpt&lt;/code&gt;. This will result in a list where each element corresponds to a tibble of the respective xpt file. At the sometime, we&amp;rsquo;ll attach the name to each element using &lt;code&gt;purrr::setnames&lt;/code&gt; so we can identify what&amp;rsquo;s what.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;filelists &amp;lt;- files %&amp;gt;%
  map(., haven::read_xpt) %&amp;gt;%
  set_names(files %&amp;gt;% basename(.) %&amp;gt;% tools::file_path_sans_ext(.))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s what &lt;code&gt;filelists&lt;/code&gt; looks like in R Studio:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;file1.png&#34; alt=&#34;filelist&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;step-3&#34;&gt;Step 3&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s the cool part. Let&amp;rsquo;s use &lt;code&gt;purrr::pmap()&lt;/code&gt; and &lt;code&gt;assign()&lt;/code&gt; to make a separate data frame for it in the global environment. We start by specifying .x to be the list of files and .y to be the names of the files. With these two inputs, we need to simply map them to a single &lt;code&gt;assign()&lt;/code&gt; call and we&amp;rsquo;re done.💯&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;purrr::pmap(.l = list(.x = filelists, .y = names(filelists)),
            .f = ~assign(.y, .x, envir = globalenv()))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s what my global environment looks like in R Studio:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;file2.png&#34; alt=&#34;globalenv&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Till next time 🍻🙏 !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reproducibility of Interactive Analyses</title>
      <link>https://academic-demo.netlify.app/talk/reproducibility-of-interactive-analyses/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/talk/reproducibility-of-interactive-analyses/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Reproducibility of Interactive Analyses</title>
      <link>https://academic-demo.netlify.app/publication/shinymeta/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/publication/shinymeta/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dynamic TLFs</title>
      <link>https://academic-demo.netlify.app/project/dynamic-tlf/</link>
      <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/dynamic-tlf/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is another entry into the ⚡&lt;a href=&#34;https://mattkumar.quarto.pub/time-travel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio 2022 Table Contest.&lt;/a&gt;
This app enables the exploration of subgroups on-the-fly through linked, interactive tables, listings and figures (TLFs) for clinical trial data. It leverages Tplyr, reactable and reactablefmtr for computing and is presented as a dashboard using Quarto. &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;My aims for this project were two-fold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Investigate whether we can dynamically create tables which can be used to guide an exploratory analysis.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The analysis starts with an anchor table, where individual cells can be clicked to retrieve the study participants ID&amp;rsquo;s who comprise it. These are subsequently fed into additional tables, listings and figures through reactives.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://matt-kumar.netlify.app/project/tplyr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous work&lt;/a&gt;, I&amp;rsquo;ve hard coded the anchor table by pre-specifying the variables to be displayed. With this work, you can now dynamically specify the anchor table to include any variables you like, which in turn can be used explore subgroups on-the-fly.&lt;/p&gt;
&lt;p&gt;This work is largely enabled by utilizing the metadata building features of the &lt;a href=&#34;https://cran.r-project.org/web/packages/Tplyr/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tplyr&lt;/a&gt; 📦.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Currently, no dashboard extension or package exists for Quarto. I used this opportunity to also see if I could (roughly) mimic what flexdashboard offers by using Quarto and custom css. My inspiration was the bootswatch lux theme. 👀&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;
&lt;p&gt;The linked TLFs are also interactive and share the spirit of &amp;ldquo;drilling down&amp;rdquo; 🔃&lt;/p&gt;
&lt;h3 id=&#34;adverse-events-table-&#34;&gt;Adverse Events Table 🕵&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Uses reactable&amp;rsquo;s groupBy to succinctly present a large table&lt;/li&gt;
&lt;li&gt;Cells (in the second column) are hyper-linked to open a MedlinePlus search of that term. I found this resource was helpful in learning about medical conditions when analyzing clinical trials data.&lt;/li&gt;
&lt;li&gt;A table-wide search functionality to pin-point certain SOCs/PTs of interest&lt;/li&gt;
&lt;li&gt;A button to expand all SOCs at once to show the nested PTs&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;adverse-event-figure-&#34;&gt;Adverse Event Figure 📊&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The highcharter column chart is a drill down plot. The first layer displays the top 4 System Organ Classes for a given subset&lt;/li&gt;
&lt;li&gt;Clicking each of bars lets you drill down into a stacked column chart for the Preferred Terms x Severity&lt;/li&gt;
&lt;li&gt;Customized tool tips to display information more clearly (i.e. severity of adverse event)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;patient-listing-1-&#34;&gt;Patient Listing 1 📝&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Uses reactable&amp;rsquo;s filter + search to navigate a potentially exhaustive table&lt;/li&gt;
&lt;li&gt;Leverages reactable&amp;rsquo;s columnGroups + formatting to organize the data layout&lt;/li&gt;
&lt;li&gt;Capable of exporting a list subject identifiers as a CSV file to enable further analyses of interesting subgroups&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;patient-listing-2-&#34;&gt;Patient Listing 2 📋&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Uses reactablefmtr&amp;rsquo;s inline visual to show vital signs measured at three times relative to baseline (i.e. percent change)&lt;/li&gt;
&lt;li&gt;Leverages reactable&amp;rsquo;s columnGroups + formatting to organize the data layout&lt;/li&gt;
&lt;li&gt;Paired with shiny inputs to enable switching of Blood Pressure Parameters and Visits&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;p&gt;This app can be extended in a number of different ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Including additional, linked TLFs; the sky&amp;rsquo;s the limit! 🤩&lt;/li&gt;
&lt;li&gt;Uploading data - the way I&amp;rsquo;ve began to structure the server will enable this in the future ⏫&lt;/li&gt;
&lt;li&gt;More robust organization, control and validation for when the anchor table is updated 🛠&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Till next time, 🍻!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>highlights of 2022</title>
      <link>https://academic-demo.netlify.app/post/year-end/</link>
      <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/year-end/</guid>
      <description>&lt;p&gt;&amp;hellip; or rather the latter the half of 2022 since I&amp;rsquo;m getting old and can&amp;rsquo;t remember the first half&lt;/p&gt;
&lt;h2 id=&#34;this-blog&#34;&gt;This Blog&lt;/h2&gt;
&lt;p&gt;I set out to initially redesign my portfolio this year. It involved migrating a lot of the content from my previous portfolio, which was hosted as a shiny app. At the same time, I said I&amp;rsquo;d try and use this portfolio as a general purpose for my &amp;ldquo;digital presence&amp;rdquo;. I&amp;rsquo;m happy that I&amp;rsquo;ve been able to keep up with writing blog posts and sharing side projects or code demonstrations. All of this is infinitely easier now that I use blogdown-github-netlify chain for content management. ⚡&lt;/p&gt;
&lt;h2 id=&#34;posit-2022-table-contest&#34;&gt;Posit 2022 Table Contest&lt;/h2&gt;
&lt;p&gt;This year I decided to participate in the Posit 2022 table contest. I was quite surprised that all 3 of my entries placed! 1 received a runner-up and the other two both received honorable mentions! 🙏&lt;/p&gt;
&lt;p&gt;Overall, it was a rewarding experience because it was a natural outlet to experiment with new tech (Quarto, R packages) while finally putting to work some of the &lt;a href=&#34;https://www.coursera.org/learn/html-css-javascript-for-web-developers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS/JS/HTML stuff I learned&lt;/a&gt; earlier in the year into something meaningful. ⚡&lt;/p&gt;
&lt;p&gt;You can read the Posit announcement article here:&lt;br&gt;
👉 &lt;a href=&#34;https://posit.co/blog/winners-of-the-2022-table-contest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Posit Blog - Winners of the 2022 Table Contest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All of my entries to the contest are &lt;a href=&#34;https://matt-kumar.netlify.app/#projects&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; on this site:&lt;br&gt;
🏃 &lt;a href=&#34;https://matt-kumar.netlify.app/project/dynamic-tlf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dynamic TLFs&lt;/a&gt; - Runner Up&lt;br&gt;
📣 &lt;a href=&#34;https://matt-kumar.netlify.app/project/time_machine/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Time Machine&lt;/a&gt; - Honorable Mention&lt;br&gt;
📣 &lt;a href=&#34;https://matt-kumar.netlify.app/project/jeopardy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jeopardy!&lt;/a&gt; - Honorable Mention&lt;/p&gt;
&lt;p&gt;Lastly, I encourage everyone to check out the full list of entries submitted my the community. Truly creative and inspiring takes on tabular representations of data! 😍 💪&lt;/p&gt;
&lt;h2 id=&#34;work&#34;&gt;Work&lt;/h2&gt;
&lt;p&gt;I want to briefly 💬 about my working or professional life this year.&lt;/p&gt;
&lt;p&gt;The majority of my team is spread throughout the 🌍. In spite of this, 2022 was a year where we connected more closely than ever. I just want to say I&amp;rsquo;m super fortunate to work with my team and have their unrelenting support and encouragement. This also goes for the leadership teams that orbit my immediate and adjacent functions. I&amp;rsquo;ve never felt more empowered in a position knowing I having the trust and backing of management in my corner 🤜🤛. All things considered, I&amp;rsquo;m truly grateful to have such an amazing opportunity at Bayer. 🙏&lt;/p&gt;
&lt;p&gt;So long, 2022 🍻!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time Machine</title>
      <link>https://academic-demo.netlify.app/project/time_machine/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/time_machine/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is another entry into the ⚡&lt;a href=&#34;https://mattkumar.quarto.pub/time-travel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio 2022 Table Contest.&lt;/a&gt;
It uses reactable, countup and css to recreate the time machine gizmo seen in the movie &lt;a href=&#34;https://www.imdb.com/title/tt0088763/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Back To The Future&lt;/a&gt; &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;My aims for this project were two-fold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To think about creative uses of tables! ✅&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue to experiment with reactable, css and Quarto. ✅&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;
&lt;p&gt;My goal was to reenvision the following image as a table using R. 
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://images.squarespace-cdn.com/content/v1/545f5b33e4b0719cb5aee3a5/1606653495764-HE8UCUWTBZR2M4IWXOLA/Screen&amp;#43;Shot&amp;#43;2020-11-29&amp;#43;at&amp;#43;12.36.14.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I can divide my approach into 2 sections: general and styling&lt;/p&gt;
&lt;h3 id=&#34;general&#34;&gt;General&lt;/h3&gt;
&lt;p&gt;When I first saw the above image, I thought it would make a great use-case for getting creative with tables. It was immediately apparent that the bulk of this work was going to boil down to styling. The general approach is quite simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a data frame with the required data&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;data &amp;lt;- tibble::tribble(
  ~MONTH, ~DAY, ~YEAR, ~AMPM, ~HOUR, ~COLON, ~MIN,
   &amp;quot;OCT&amp;quot;,   26,  1985,    NA,    10,     NA,   21,
   &amp;quot;OCT&amp;quot;,   26,  1985,    NA,    10,     NA,   22,
   &amp;quot;OCT&amp;quot;,   26,  1985,    NA,    10,     NA,   20
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;AMPM&lt;/strong&gt; and &lt;strong&gt;COLON&lt;/strong&gt; columns are left as placeholders which get rendered in &lt;code&gt;reactable&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Execute &lt;strong&gt;3&lt;/strong&gt; successive calls to a custom &lt;code&gt;reactable&lt;/code&gt; function, one for each row of the table. E.g.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;data %&amp;gt;%
  filter(row_number() == 1) %&amp;gt;%
  my_reactable()
  
# etc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;my_reactable()&lt;/code&gt; is a wrapper that is written by me and takes care of the formatting of a single table row including the cell, column and footer rendering along with css. A great use-case for a function! 🎯&lt;/p&gt;
&lt;h3 id=&#34;styling&#34;&gt;Styling&lt;/h3&gt;
&lt;p&gt;Much of my effort in this table was around styling. This involved quite a bit of work and playing around, and in the end I&amp;rsquo;m glad I saw it through to completion. 😥 ➡ 🤓&lt;/p&gt;
&lt;h4 id=&#34;css&#34;&gt;CSS&lt;/h4&gt;
&lt;p&gt;Yes, much of this table relies on custom css classes. It shouldn&amp;rsquo;t be taken for granted the amount of work needed however, including research on the following to match aesthetics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;custom fonts, font sizes, color schemes&lt;/li&gt;
&lt;li&gt;using new html elements (i.e. &lt;code&gt;&amp;lt;mark&amp;gt;&amp;lt;/mark&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;animations with css&lt;/li&gt;
&lt;li&gt;leveraging the &lt;code&gt;@extend&lt;/code&gt; directive to make my css file shorter and more compact 💥💥💥&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;countup&#34;&gt;Countup&lt;/h4&gt;
&lt;p&gt;One neat package I was finally thrilled to have a use for was the &lt;a href=&#34;https://github.com/JohnCoene/countup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;countup&lt;/a&gt; by &lt;a href=&#34;https://john-coene.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Coene&lt;/a&gt;. In short, his package lets you transform the appearance of a number as if a counter were running as an html element. This integrated quite nicely with &lt;code&gt;reactable&lt;/code&gt; and serves to give the illusion that the time machine is calibrating! 😵&lt;/p&gt;
&lt;h4 id=&#34;3d&#34;&gt;3D&lt;/h4&gt;
&lt;p&gt;I also spent a bit of time learning some additional methods of css, namely &lt;code&gt;perspective&lt;/code&gt;, &lt;code&gt;skew&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt;. I decided to integrate this into this work as well as a separate table. 📦 This image was my inspiration:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://www.rookscastle.com/tutorials/bttf-int-016-1.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;forward&#34;&gt;Forward&lt;/h3&gt;
&lt;p&gt;You can view these tables and all their interactive glory &lt;a href=&#34;https://mattkumar.quarto.pub/time-travel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🍻✌  Till next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jeopardy!</title>
      <link>https://academic-demo.netlify.app/project/jeopardy/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/jeopardy/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is my entry into the ⚡&lt;a href=&#34;https://www.rstudio.com/blog/rstudio-table-contest-2022/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio 2022 Table Contest.&lt;/a&gt;
It uses reactable and scss in Quarto to style a Jeopardy! game board. &lt;/br&gt;&lt;/p&gt;
&lt;p&gt;My aims for this project were three-fold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To think about creative uses of tables! ✅&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn how to use some of &lt;code&gt;reactable&lt;/code&gt;&amp;rsquo;s custom rendering capabilities ✅&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue to investigate and experiment (s)css and Quarto. ✅&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;
&lt;p&gt;I start by pulling archived Jeopardy! game data using the &lt;code&gt;whatr&lt;/code&gt; 📦. What&amp;rsquo;s nice is that each row of data is indexed by the row and column it appears on in the actual board 😝. This makes it simple to ensure the &lt;em&gt;right content&lt;/em&gt; is in the &lt;em&gt;right place.&lt;/em&gt; ✅&lt;/p&gt;
&lt;p&gt;In the next step, I borrow some preexisting css for creating &lt;a href=&#34;https://www.w3schools.com/howto/howto_css_flip_card.asp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;flip cards&lt;/a&gt; 🔍. I ♻️, 🔨  and 🗑 elements in order to match the aesthetic of Jeopardy! This was relatively straightforward, though researching colors and fonts took a bit of time.&lt;/p&gt;
&lt;p&gt;The last step is to arrange the data once it&amp;rsquo;s been read into R into a format serviceable for display. I knew I planned to use &lt;code&gt;reactable&lt;/code&gt; as the display table package and leverage escaping html.&lt;/p&gt;
&lt;h3 id=&#34;method-1&#34;&gt;Method 1&lt;/h3&gt;
&lt;p&gt;My first approach was to bake the html/css stuff directly into each cell, before passing it to reactable for escaping. It looked something like this:&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;👉️ See Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,&#34;&gt;raw_data %&amp;gt;%
  .... %&amp;gt;%
  mutate(content = if_else(row == 1,
                           # html for header
                           glue::glue(&#39;&amp;lt;div class=&amp;quot;flip-card&amp;quot;&amp;gt;
                                        &amp;lt;div class=&amp;quot;flip-card-inner&amp;quot;&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-head&amp;quot;&amp;gt;
                                            &amp;lt;p&amp;gt;{category}&amp;lt;/p&amp;gt;
                                          &amp;lt;/div&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-head&amp;quot;&amp;gt;
                                            {category}
                                          &amp;lt;/div&amp;gt;
                                        &amp;lt;/div&amp;gt;
                                      &amp;lt;/div&amp;gt;&#39;),
                           # html for clues
                           glue::glue(&#39;&amp;lt;div class=&amp;quot;flip-card&amp;quot;&amp;gt;
                                        &amp;lt;div class=&amp;quot;flip-card-inner&amp;quot;&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-front&amp;quot;&amp;gt;
                                            {value}
                                          &amp;lt;/div&amp;gt;
                                          &amp;lt;div class=&amp;quot;flip-card-back&amp;quot;&amp;gt;
                                            &amp;lt;p&amp;gt;{clue}&amp;lt;/p&amp;gt;
                                            &amp;lt;details&amp;gt;
                                            &amp;lt;summary&amp;gt;Answer&amp;lt;/summary&amp;gt;
                                            &amp;lt;p&amp;gt;{answer}&amp;lt;/p&amp;gt;
                                          &amp;lt;/details&amp;gt;
                                          &amp;lt;/div&amp;gt;
                                        &amp;lt;/div&amp;gt;
                                      &amp;lt;/div&amp;gt;&#39;))) %&amp;gt;%
 .... %&amp;gt;%
 reactable(.,
           defaultColDef = colDef(html = TRUE))
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;While this certainly worked (it has in the past for me), I knew reactable had more to offer in terms of custom rendering. It was time to have a closer look at specifics. 😨&lt;/p&gt;
&lt;h3 id=&#34;method-2&#34;&gt;Method 2&lt;/h3&gt;
&lt;p&gt;It turns reactables &lt;code&gt;defaultColDef&lt;/code&gt; argument works great for custom rendering in this case since every cell in my Jeopardy! board needs the same html/css treatment. It looks something like this:&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;👉️ See Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r,&#34;&gt;reactable(table_data,
  sortable = FALSE,
  defaultColDef = colDef(
    html = TRUE,
    align = &amp;quot;center&amp;quot;,
    # Header Rendering
    header = function(value) {
      tags$div(
        class = &amp;quot;flip-card flip-card-head&amp;quot;,
        value
      )
    },
    # Cell Rendering
    cell = function(value, index) {
      # parse clue, answer from table cell
      content &amp;lt;- str_split(value, &amp;quot;;&amp;quot;, simplify = TRUE)
      clue &amp;lt;- content[1]
      answer &amp;lt;- content[2]
      # cell content
      tags$div(
        class = &amp;quot;flip-card&amp;quot;,
        tags$div(
          class = &amp;quot;flip-card-inner&amp;quot;,
          tags$div(
            class = &amp;quot;flip-card-front&amp;quot;,
            # multiply row index by 200 for tile value
            paste(&amp;quot;$&amp;quot;, index * 200)
          ),
          tags$div(
            class = &amp;quot;flip-card-back&amp;quot;,
            clue,
            tags$details(
              tags$summary(&amp;quot;Answer&amp;quot;),
              answer
            )
          )
        )
      )
    }
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;I like this approach much better than the first because I&amp;rsquo;m keeping table and data wrangling parts of my workflow separate and hopefully more clear for readers. 🤓&lt;/p&gt;
&lt;h2 id=&#34;forward&#34;&gt;Forward&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s been an awesome ride so far experimenting with Quarto and continuing to learn how to create and modify existing CSS. I&amp;rsquo;m happy that the &lt;a href=&#34;https://www.rstudio.com/blog/rstudio-table-contest-2022/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio 2022 Table Contest&lt;/a&gt; is currently taking place because it was a constructive outlet to build something that uses things I&amp;rsquo;ve recently learned.&lt;/p&gt;
&lt;p&gt;🍻✌ Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny &amp; Python</title>
      <link>https://academic-demo.netlify.app/project/shinypy/</link>
      <pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/shinypy/</guid>
      <description>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This app is an initial exploration into
&lt;a href=&#34;https://shiny.rstudio.com/py/&#34;&gt;shiny for Python&lt;/a&gt; which was
revealed at
&lt;a href=&#34;https://www.rstudio.com/conference/&#34;&gt;&lt;strong&gt;rstudio::&lt;/strong&gt;conf(2022)&lt;/a&gt;
earlier this summer.🐍🐍🐍 &lt;br&gt; &lt;h2&gt;Aim&lt;/h2&gt;&lt;/p&gt;
&lt;p&gt;The aim of the exploration was to try out the API and
see whether I can recreate common patterns/functionalities
I use in my other apps. &lt;br&gt; &lt;br&gt; The app is simple: Use the
sample data (or upload your own) to run a basic linear regression
analysis and display the resulting plot. &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Functionalities&lt;/h2&gt;
&lt;p&gt;Here are the functionalities covered in the app:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ custom CSS (could you tell?) 🤣&lt;/li&gt;
&lt;li&gt;✅ data processing (file upload and external files)&lt;/li&gt;
&lt;li&gt;✅ creating reactive objects&lt;/li&gt;
&lt;li&gt;✅ rendering UI, plots, etc&lt;/li&gt;
&lt;li&gt;✅ validation with &lt;code&gt;req()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;p&gt;I currently have my app running on shinylive.io which seems to be a
very promising &lt;em&gt;serverless&lt;/em&gt; solution. You can also build your app as a
static site (locally) and serve it via github pages or netlify.🤯🤯🤯
&lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;div style = &#34;box-shadow: rgba(3, 102, 214, 0.3) 0px 0px 0px 3px;&#34;&gt;
👉View the app + code in &lt;strong&gt;editor mode&lt;/strong&gt;: make changes and
execute it all within the browser
&lt;a href=&#34;https://shinylive.io/py/editor/#code=&#34;&gt;See
Here&lt;/a&gt;👈 &lt;br&gt;&lt;br&gt;
&lt;p&gt;👉 View the app served on github pages
&lt;a href=&#34;https://mattkumar.github.io/shinypy/&#34;&gt;See Here&lt;/a&gt;👈&lt;/div&gt;
&lt;br&gt; The one downside is that not all libraries are supported, which is
understandable. I originally used the &lt;code&gt;xport&lt;/code&gt; library to read SAS .xpt
files instead of .csv files in development. Winston Chang&amp;rsquo;s &lt;a href=&#34;https://www.rstudio.com/conference/2022/talks/running-shiny-without-server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;talk&lt;/a&gt; provides more detail about this and the technology in general.&lt;br&gt; &lt;h2&gt;Future&lt;/h2&gt; If and
when this is included (or I figure out the rsconnect deployment, which is also an option by the way), the
following code can be replaced easily to read .xpt &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import xport

def p():
        if input.file1() is None:
            return &amp;quot;Please upload a csv file&amp;quot;
        f: list[FileInfo] = input.file1()
        with open(f[0][&amp;quot;datapath&amp;quot;], &#39;rb&#39;) as z:
          df = xport.to_dataframe(z)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s about it. I plan to do a blog post summarizing the experience
further and my thoughts around the news of Rstudio&amp;rsquo;s &amp;ldquo;move&amp;rdquo; into the
Python space later.&lt;/p&gt;
&lt;p&gt;🍻✌&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>old code and beginnings</title>
      <link>https://academic-demo.netlify.app/post/r-code/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/r-code/</guid>
      <description>&lt;p&gt;&amp;hellip; and by old, I mean really old. Like year 2008 old. Like the first R code I ever wrote.&lt;/p&gt;
&lt;p&gt;I recently went digging in an old dropbox account for photos and to my surprise I had saved a copy of my undergraduate thesis, complete with code.&lt;/p&gt;
&lt;p&gt;My undergraduate degree was in Psychology and I had a keen interest in psychometrics. My thesis involved an application of &lt;a href=&#34;https://en.wikipedia.org/wiki/Item_response_theory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;item response theory&lt;/a&gt; to ordinal data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;if you are interested, I used &lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-1-4757-2691-6_5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Samejima&amp;rsquo;s Graded Response Model&lt;/a&gt; to analyze responses made to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Barratt_Impulsiveness_Scale&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Barratt Impulsiveness Scale&lt;/a&gt; from a sample of first year university students&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the time, my only experience with statistical software was with &lt;a href=&#34;https://en.wikipedia.org/wiki/SPSS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPSS&lt;/a&gt;. I remember teaching myself how to use it only a year prior in order to double check my intro stats homework assignments 🤓🔬📏. I think that was a good move in retrospect because I was also able to spin that experience into a &lt;strong&gt;paid&lt;/strong&gt; Stats Advisory position at the Psychology Resource Center.&lt;/p&gt;
&lt;p&gt;I digress.&lt;/p&gt;
&lt;p&gt;The type of model I needed to fit for my thesis was only available through proprietary software. My &lt;a href=&#34;https://health.yorku.ca/health-profiles/index.php?mid=498680&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;thesis advisor&lt;/a&gt; recommended I look into R as he had caught wind of a package that could help. The upside was that it would be 🆓 and open source 🤑. The downside was that I was going to have to learn &amp;ldquo;syntax&amp;rdquo; 🤢. I was aware that SPSS had syntax facilities for advanced users, but it was always intimidating 😣.&lt;/p&gt;
&lt;p&gt;But now I &lt;strong&gt;had&lt;/strong&gt; to learn &amp;ldquo;syntax&amp;rdquo;. &lt;em&gt;I&amp;rsquo;m laughing while typing this believe you me.&lt;/em&gt; 🤣 Anyway, I don&amp;rsquo;t quite recall the learning process, but I reckon it was difficult and in the end I was probably just relieved to get the job done. ✅🎓.I ended up having to write &amp;ldquo;syntax&amp;rdquo; for other supporting analyses in my thesis, namely Confirmatory Factor Analysis for assumption checking in &lt;a href=&#34;https://ssicentral.com/index.php/products/lisrel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LISREL&lt;/a&gt;. &lt;em&gt;shudders&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For historical (and sentimental reasons) I&amp;rsquo;ve included the R code in my thesis below. It marked the first steps on the path I&amp;rsquo;m on today.&lt;/p&gt;
&lt;p&gt;From what I can tell I was using R 2.8.1 and I&amp;rsquo;m happy to see the original 📦, &lt;a href=&#34;https://cran.r-project.org/web/packages/ltm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;ltm&lt;/strong&gt;&lt;/a&gt; is still active on CRAN today.&lt;/p&gt;
&lt;p&gt;Till next time, 🍻✌&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;ltm&amp;quot;, dependencies = TRUE)
#downloads and installs the &#39;LTM&#39; packageto the user’s hard drive.

library(ltm)
#loads the &#39;LTM&#39; package from the user’s hard drive

attention = read.table(file.choose(),header=T)
#prompts for location of data set

grm0 = grm(attention, constrained = TRUE, Hessian = TRUE)
#fits the constrained GRM to the specified data set. The HESSIAN = TRUE argument computes standard error values.

summary(grm0)
#returns the parameter estimates

grm1 = grm(attention, constrained = FALSE, Hessian = TRUE)
#fits the unconstrained GRM and computes standard error values

summary(grm1)
#returns the parameter estimates

anova(grm0,grm1)
#performs a likelihood ratio test on the two models.

plot(grm1, type = &amp;quot;IIC&amp;quot;, lwd = 2, cex = 1.2, legend = TRUE, cx = &amp;quot;topleft&amp;quot;,xlab = &amp;quot;Latent
Trait&amp;quot;, cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.1)
#plots the IIFs

plot(grm1, type = &amp;quot;IIC&amp;quot;, items = 0, lwd = 2, xlab = &amp;quot;Attention&amp;quot;,
     cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.1)
#plots the TIF

plot(grm1, lwd = 2, cex = 1.2, legend = TRUE, cx = &amp;quot;left&amp;quot;,
     xlab = &amp;quot;Attention&amp;quot;, cex.main = 1.5, cex.lab = 1.3, cex.ax
     is = 1.1)
#plots the CRCs

plot(grm1, type = &amp;quot;OCCu&amp;quot;, lwd = 2, cex = 1.2, legend = TRUE, cx = &amp;quot;topleft&amp;quot;,
     xlab = &amp;quot;Attention&amp;quot;, cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.1)
#plots the OCCs
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>tweaking shiny actionButton</title>
      <link>https://academic-demo.netlify.app/post/shinybuttons/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/shinybuttons/</guid>
      <description>&lt;p&gt;The default behavior in &lt;code&gt;shiny::actionButton()&lt;/code&gt; is to open a web link in the &lt;em&gt;current&lt;/em&gt; window. This approach has two potential implications for user-experience:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The current progress within the shiny app will be lost; clicking 🔙 on your browser will reload the app 😭&lt;/li&gt;
&lt;li&gt;This can (independent of #1) inadvertently divert users away from your app 🏃️💨&lt;/li&gt;
&lt;/ol&gt;
&lt;center&gt;
&lt;p&gt;⬇️⬇️⬇️ See for yourself ⬇️⬇️⬇️
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;button class=&#34;btn btn-default action-button btn-warning&#34; id=&#34;btn0&#34; onclick=&#34;alert(&amp;quot;Just kidding! Youre not going anywhere!&amp;quot;)&#34; type=&#34;button&#34;&gt;Click Me!&lt;/button&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;So what can we do?&lt;/p&gt;
&lt;p&gt;✖️ Do nothing. Leave it as is and let all the hard work you put into the app be overshadowed by the site your are linking to.&lt;/p&gt;
&lt;p&gt;✔️ Make the link open in a new tab or window.&lt;/p&gt;
&lt;p&gt;✔️ Force the link to open in a new window.&lt;/p&gt;
&lt;p&gt;The distinction between the two latter choices boils down to a users default browser settings. If you use Chrome like me, opening a link (designed to open in a tab or new window) defaults to opening it in a new tab. For you, it &lt;em&gt;might&lt;/em&gt; open in a new window. Who knows? 🎱&lt;/p&gt;
&lt;p&gt;If you really need the link to open in a separate window, luckily with a little elbow grease we can make that a sure thing.🎯 We just need to explicitly specify the window &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt;. You can also pass &lt;code&gt;fullscreen=1&lt;/code&gt; to make the new window, well, full screen. See the code snippet below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️Opening links in a new window may result in getting dinged by an ad-blocker. This is because the so-called new window is more of a pop-up rather than it being a truly new window (i.e. &lt;code&gt;CTRL + N&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thank you &lt;a href=&#34;https://github.com/iqis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iqis&lt;/a&gt; for pointing out that! 👽️&lt;/p&gt;
&lt;p&gt;Below, I have three buttons and their corresponding code you might use in a shiny app. It’s pretty straight forward so I’ll end with saying keep user-experience front and center in your design! ✌🍻&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Default - current
shiny::actionButton(&#39;btn1&#39;,
                    &#39;Current Window&#39;,
                    onclick =&amp;quot;location.href=&#39;http://google.com&#39;;&amp;quot;)

# New tab or window  
shiny::actionButton(&#39;btn2&#39;,
                    &#39;New Window or Tab&#39;, 
                    onclick =&amp;quot;window.open(&#39;http://google.com&#39;, &#39;_blank&#39;)&amp;quot;)

# New window
shiny::actionButton(&#39;btn3&#39;,
                    &#39;New Window&#39;, 
                    onclick =&amp;quot;window.open(&#39;http://google.com&#39;, &#39;_blank&#39;,&#39;width=800,height=800&#39;)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;button class=&#34;btn btn-default action-button btn btn-danger btn-lg  btn-huge&#34; id=&#34;btn1&#34; onclick=&#34;location.href=&amp;#39;http://google.com&amp;#39;;&#34; type=&#34;button&#34;&gt;Current Window&lt;/button&gt;
 
&lt;button class=&#34;btn btn-default action-button btn btn-warning btn-lg  btn-huge&#34; id=&#34;btn2&#34; onclick=&#34;window.open(&amp;#39;http://google.com&amp;#39;, &amp;#39;_blank&amp;#39;)&#34; type=&#34;button&#34;&gt;New Window or Tab&lt;/button&gt;
 
&lt;button class=&#34;btn btn-default action-button btn btn-success btn-lg  btn-huge&#34; id=&#34;btn3&#34; onclick=&#34;window.open(&amp;#39;http://google.com&amp;#39;, &amp;#39;_blank&amp;#39;,&amp;#39;width=800,height=800&amp;#39;)&#34; type=&#34;button&#34;&gt;New Window&lt;/button&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mustaches and whiskers</title>
      <link>https://academic-demo.netlify.app/post/whisker/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/whisker/</guid>
      <description>&lt;p&gt;I recently came across the &lt;code&gt;whisker&lt;/code&gt; 📦, which is an R implementation of &lt;a href=&#34;https://mustache.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;{{mustache}}.&lt;/a&gt; Say what 👨?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&amp;rsquo;ve authored either Rmarkdown documents or shiny apps (using &lt;a href=&#34;https://shiny.rstudio.com/articles/templates.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTML templates&lt;/a&gt;) chances are this will feel familiar. ✅&lt;/p&gt;
&lt;p&gt;In a &lt;a href=&#34;https://matt-kumar.netlify.app/project/rmarkdown-reporting-engine/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous post&lt;/a&gt;, I described a templating strategy to automatically generate patient profiles within a clinical trial context. Where as this strategy relied on Rmarkdown and &lt;em&gt;actual R code&lt;/em&gt; to produce the per-patient summaries, the &lt;code&gt;whisker&lt;/code&gt; approach is far more generic.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also &lt;em&gt;really&lt;/em&gt; easy to get started with. 🏁&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a generic template file with a placeholder for your content enclosed in &lt;code&gt;{{}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Read the template into R&lt;/li&gt;
&lt;li&gt;Assign your content using placeholder name&lt;/li&gt;
&lt;li&gt;Write the results back&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;ll demonstrate with a simple template I&amp;rsquo;ve made in notepad.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;template&#34; srcset=&#34;
               /post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_da963397c1c88fb6e549c8674a177de1.webp 400w,
               /post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_053a1ef8ed0c11c9793b36f78e122af3.webp 760w,
               /post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/post/whisker/template_hu4419162416b4e1f9cedd9602278ae2f7_6889_da963397c1c88fb6e549c8674a177de1.webp&#34;
               width=&#34;498&#34;
               height=&#34;215&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Now, in R we can do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(whisker)

# read in template
my_template &amp;lt;- readLines(&#39;template.txt&#39;)

# assign {{name}} to be &amp;quot;matt&amp;quot;
data &amp;lt;- list(name = &amp;quot;matt&amp;quot;)

# write the results back
whisker.render(my_template, data = data) |&amp;gt;
  writeLines(&amp;quot;output.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the result of the output
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;output&#34; srcset=&#34;
               /post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_f29f2fe3142dadab86b1215a5074f7f6.webp 400w,
               /post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_0f7578ade967b757ec39cff773d61154.webp 760w,
               /post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/post/whisker/output_huc427c044dc08fd0bfffd4beb9d73948e_6649_f29f2fe3142dadab86b1215a5074f7f6.webp&#34;
               width=&#34;498&#34;
               height=&#34;215&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;So what? Is this just a glorified search and replace functionality? 🤷️ No.&lt;/p&gt;
&lt;p&gt;This is actually quite powerful when you start to think of the applications 🤔. ️️💡 Consider a complete R script as a &amp;ldquo;template&amp;quot;️. Something you tend to reuse in your work time to time. With &lt;code&gt;whisker&lt;/code&gt; you can easily populate these templates and actually generate R (or other languages) scripts that can be executed &lt;strong&gt;as is&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Still not convinced? Okay, think about how you could share some of this 💪 with your end users in the form a shiny app! ✌🍻&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reticulate to the Rescue</title>
      <link>https://academic-demo.netlify.app/post/py-hyperlink/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/py-hyperlink/</guid>
      <description>&lt;p&gt;A prototype I was working on earlier this year needed to make use of data stored in an excel book. The data I needed were the &lt;strong&gt;URLS embedded in hyperlinks&lt;/strong&gt; within cells of a sheet.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;pre&#34; srcset=&#34;
               /post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_169e4ba0dabe10b7f3bac4d8eaa0aa07.webp 400w,
               /post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_6383141bb5eede82c62300f06d9c3994.webp 760w,
               /post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/post/py-hyperlink/pre_hu441e53b175d0b25b83600e99ba33b99d_14530_169e4ba0dabe10b7f3bac4d8eaa0aa07.webp&#34;
               width=&#34;470&#34;
               height=&#34;370&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The cells in column B contain hyperlinks for which I need to extract out the URLs. For example, cell B4 has the value of: &lt;code&gt;http://www.amazon.ca/&lt;/code&gt;. This is what I need access to.&lt;/p&gt;
&lt;p&gt;I figured one of the existing R packages that could extract this information. I checked the usual: &lt;code&gt;readxl&lt;/code&gt;, &lt;code&gt;xlsx&lt;/code&gt;, and &lt;code&gt;openxlsx&lt;/code&gt; and was surprised that none could.&lt;/p&gt;
&lt;p&gt;My next thought was to just have the URLs extracted in Excel, prior to reading them into R. Surely this was possible, right? Not without using a VBA macro. 🤢 I gave this an honest shot and it proved too cumbersome. No thanks.&lt;/p&gt;
&lt;p&gt;I read that it might be possible in Python with the &lt;code&gt;openpyxl&lt;/code&gt; package. I haven&amp;rsquo;t a whole lot of experience with Python. I&amp;rsquo;ve been reading and hearing how easy it is to &lt;a href=&#34;https://rstudio.github.io/reticulate/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;use Python within R and RStudio&lt;/a&gt;. I decided to give a go. Enter &lt;code&gt;reticulate&lt;/code&gt;. 🐍🐍🐍&lt;/p&gt;
&lt;p&gt;The example that follows can be broken down into a few steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install reticulate and figure out how it works&lt;/li&gt;
&lt;li&gt;Install python packages (&lt;code&gt;openpyxl&lt;/code&gt;, &lt;code&gt;pandas&lt;/code&gt;) within RStudio and figure out how &lt;em&gt;they&lt;/em&gt; work&lt;/li&gt;
&lt;li&gt;Integrate everything into a simple workflow&lt;/li&gt;
&lt;li&gt;❓️❓️❓️&lt;/li&gt;
&lt;li&gt;Profit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Getting setup was actually the easy part. At least on my windows machine.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install reticulate
install.packages(&amp;quot;reticulate&amp;quot;)

# install a python distribution on my machine
reticulate::install_miniconda

# install python packages
reticulate::py_install(&#39;pandas&#39;)
reticulate::py_install(&#39;openpyxl&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next was actually figuring out how to use these packages. After a fair bit of reading documentation and tinkering, I was able to come up with the following function I&amp;rsquo;ve named &lt;code&gt;get_hyperlink.py&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import openpyxl as xl
import pandas as pd

def get_hyperlink(path, sheet):

  # Define workbook, worksheet
  wb = xl.load_workbook(path)
  ws = wb.get_sheet_by_name(sheet)
  
  # For all cells in the worksheet, if a hyperlink is detected:
  # 1. Extract the hyperlink target
  # 2. Otherwise just keep the original value as a string
  for row_cells in ws.iter_rows():
    for cell in row_cells:
      try:
        cell.value = cell.hyperlink.target
      except:
        cell.value = str(cell.value)
    
  # Store values to a data frame, clean up headers 
  tmp = pd.DataFrame(ws.values)
  tmp.rename(columns = tmp.iloc[0], inplace = True)
  tmp.drop(tmp.index[0], inplace = True)
  
  return tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, what&amp;rsquo;s left is integrating the python script into an existing R workflow so that I can actually use it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(reticulate)

# Load python function
source_python(&amp;quot;get_hyperlink.py&amp;quot;)

# Use python function
my_data &amp;lt;- get_hyperlink(path = &amp;quot;input.xlsx&amp;quot;, sheet = &amp;quot;Sheet1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(my_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   ID                   source1
## 2  1     http://www.gmail.com/
## 3  2 http://www.eventhubs.com/
## 4  3   http://www.rstudio.com/
## 5  4     http://www.amazon.ca/
## 6  5                      None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;rsquo;s a wrap! ✅🏁🍻&lt;/p&gt;
&lt;p&gt;Actually, there&amp;rsquo;s one other feature of the &lt;code&gt;reticulate&lt;/code&gt; package I want to share. If you&amp;rsquo;re new to Python like I am, it&amp;rsquo;s helpful to be able to tinker in a REPL (&lt;strong&gt;read-eval-print-loop&lt;/strong&gt;) fashion. Calling &lt;code&gt;reticulate::repl_python()&lt;/code&gt; provides one directly in your R session so you can tinker more naturally. 💪&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://academic-demo.netlify.app/post/hello-world/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/hello-world/</guid>
      <description>&lt;p&gt;Welcome to my new&amp;hellip; blog?&lt;/p&gt;
&lt;p&gt;This was a long time coming. My &lt;a href=&#34;https://matt-kumar.shinyapps.io/portfolio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous portfolio&lt;/a&gt; was getting cumbersome to maintain. I have no idea why I structured it as a shiny app. Whoopsies.&lt;/p&gt;
&lt;p&gt;Anyway, if you&amp;rsquo;re reading this, this is my new digital home. I plan to share my thoughts and some of my work here going forward. I&amp;rsquo;ve started to back-port some of the previous stuff I&amp;rsquo;ve worked in and plan to add newer content here in the future.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re into R, Shiny, or statistics I think you&amp;rsquo;ll enjoy this place. I hope you stick around!&lt;/p&gt;
&lt;p&gt;A special shoutout to Andreas Handel&amp;rsquo;s &lt;a href=&#34;https://www.andreashandel.com/posts/blogdown-website-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;guide&lt;/a&gt; for getting started with blogdown and Hugo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linked TLFs</title>
      <link>https://academic-demo.netlify.app/project/tplyr/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/tplyr/</guid>
      <description>&lt;h2&gt;Overview&lt;/h2&gt;
On March 31, 2022 I had the pleasure of attending the CDISC Open Source Alliance (COSA) Spotlight where  from various CDISC community members shared exciting developments from their work. If you&#39;re interested in the recording, it can be viewed &lt;a href=&#34;https://www.cdisc.org/events/webinar/cdisc-open-source-alliance-spotlight&#34;&gt;here.&lt;/a&gt; 
&lt;br&gt;
&lt;br&gt;
Among presenters were &lt;a href=&#34;https://www.linkedin.com/in/michael-s-stackhouse/&#34;&gt;Mike Stackhouse&lt;/a&gt; and &lt;a href=&#34;https://www.linkedin.com/in/eli-miller-90532a87/&#34;&gt;Eli Miller&lt;/a&gt; from &lt;a href=&#34;https://www.atorusresearch.com/&#34;&gt;Atorus&lt;/a&gt; demonstrating a new feature coming to &lt;code&gt;{Tplyr}&lt;/code&gt;: &lt;b&gt;the ability to to query and retrieve individual observations from a summary table using a metadata-driven approach.&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
Imagine a generic table. Imagine clicking on a particular cell of that table. Imagine being able to easily identify patients that comprise that cell. Let that sink in for a second as I did. Pretty powerful stuff...
&lt;h2&gt;An Example&lt;/h2&gt;
Excited to give it a try, I spent the weekend coding up this example. It uses a demographics table as an anchor. Once a cell is selected, a variety of TLFs are &lt;b&gt;linked&lt;/b&gt; for the patients in that cell.
&lt;/br&gt;
&lt;/br&gt;
Here is the anchor TLF. I&#39;ve clicked on the overall total cell for patients categorized as being &gt; 80 years of age. There are N = 77 such patients.  
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;anchor&#34; srcset=&#34;
               /project/tplyr/t1_hud0f9c355be00ffbf55516980e7c03402_68375_0c95c0e0468d3f309507d0db1191fe2a.webp 400w,
               /project/tplyr/t1_hud0f9c355be00ffbf55516980e7c03402_68375_5cacf636a8e0ff3b5e2ea314ccc7dbd4.webp 760w,
               /project/tplyr/t1_hud0f9c355be00ffbf55516980e7c03402_68375_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/tplyr/t1_hud0f9c355be00ffbf55516980e7c03402_68375_0c95c0e0468d3f309507d0db1191fe2a.webp&#34;
               width=&#34;760&#34;
               height=&#34;576&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Here is the first linked TLF. A simple listing of the N = 77 patients. In Tplyr, you can specify any additional columns you wish to have too.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;listing&#34; srcset=&#34;
               /project/tplyr/t2_hub2aa4f4dd0f50af8aad19c52f1210e24_29694_d84f335c4a6db0c54a46a4bc5efef0d8.webp 400w,
               /project/tplyr/t2_hub2aa4f4dd0f50af8aad19c52f1210e24_29694_7f824f4b050aa6f41cedf060f8a2aa38.webp 760w,
               /project/tplyr/t2_hub2aa4f4dd0f50af8aad19c52f1210e24_29694_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/tplyr/t2_hub2aa4f4dd0f50af8aad19c52f1210e24_29694_d84f335c4a6db0c54a46a4bc5efef0d8.webp&#34;
               width=&#34;424&#34;
               height=&#34;638&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I mentioned figures! Here is a safety figure and an efficacy figure for those N = 77 patients. Each of these figures are also interactive thanks to &lt;code&gt;{highcharter}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;figures&#34; srcset=&#34;
               /project/tplyr/t3_hued9bccd0b40c21f207dcbcb72b66b4a6_61270_923ea559bc1feafdbb493019fd48bdd7.webp 400w,
               /project/tplyr/t3_hued9bccd0b40c21f207dcbcb72b66b4a6_61270_13fb13383987b3630ef29e490962230e.webp 760w,
               /project/tplyr/t3_hued9bccd0b40c21f207dcbcb72b66b4a6_61270_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/tplyr/t3_hued9bccd0b40c21f207dcbcb72b66b4a6_61270_923ea559bc1feafdbb493019fd48bdd7.webp&#34;
               width=&#34;760&#34;
               height=&#34;398&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Lastly, here is a TLF from a completely separate section (i.e. safety) for those N = 77 patients. I&amp;rsquo;ve leveraged some of the neat features of &lt;code&gt;{reactable}&lt;/code&gt; to nest things.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;tlf2&#34; srcset=&#34;
               /project/tplyr/t4_hu661b4305fbdc0509785935e60a5a364d_94981_925eb2975b88deec5721e76c49608dd0.webp 400w,
               /project/tplyr/t4_hu661b4305fbdc0509785935e60a5a364d_94981_777df67d149219e193c4b64b479f2e72.webp 760w,
               /project/tplyr/t4_hu661b4305fbdc0509785935e60a5a364d_94981_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/tplyr/t4_hu661b4305fbdc0509785935e60a5a364d_94981_925eb2975b88deec5721e76c49608dd0.webp&#34;
               width=&#34;760&#34;
               height=&#34;446&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2&gt;Forward&lt;/h2&gt;
Now take this impulse and multiply it by an entire catalog of TLFs and add to it Shiny&#39;s capabilities - what have you got? 
&lt;/br&gt;
&lt;/br&gt;
A Swiss army knife of productivity capable of serving many functions. Think stat analysts, statisticians, medical writing and more...
&lt;h2&gt;Access&lt;/h2&gt;
You can try the app I created for this example &lt;a href=&#34;https://matt-kumar.shinyapps.io/linked_tlfs/&#34;&gt;here.&lt;/a&gt;
&lt;/br&gt;
&lt;/br&gt;
You can also access the specific build of `{Tplyr}` with these capabilities by going &lt;a href=&#34;https://github.com/atorus-research/Tplyr/tree/gh_issue_32&#34;&gt;here.&lt;/a&gt; 
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;remotes::install_github(&amp;quot;atorus-research/Tplyr@20beb73cd4c202308afbbb57c1f2b6e1590295b7&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ll definitely be keeping an eye on more developments and hope to share more with you here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Behavioral Nudges to Improve Audit and Feedback Report Opening Among Antibiotic Prescribers A Randomized Controlled Trial</title>
      <link>https://academic-demo.netlify.app/publication/rct/</link>
      <pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/publication/rct/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Visual MCMC</title>
      <link>https://academic-demo.netlify.app/project/mcmc/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/mcmc/</guid>
      <description>&lt;p&gt;My educational background and training was in Biostatistics. Throughout my career, I&amp;rsquo;ve served many different roles, from statistician to programmer to epidemiologist to most recently, computational scientist. Over the last bit, I&amp;rsquo;ve kind of lost touch with my mathematical and statistical roots. Every so often, I will dive back into some concepts to remind myself how it works and learn of any new developments.&lt;/p&gt;
&lt;p&gt;Bayesian statistics was an interesting course in my graduate program. Unfortunately, I haven&amp;rsquo;t used it as much as I would have wished, but I am simply fascinated by the math. At the same time, it can be challenging to wrap your head around what&amp;rsquo;s going on underneath the hood in the estimation process. This is precisely why I made this post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ll stop here to direct you towards the original (more comprehensive) post I made concerning this topic, which can be found &lt;a href=&#34;https://rpubs.com/matt-kumar/mcmc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In short, this project involved a few key activities that helped refresh my memory and deepen my understanding, all through using R, animation and simulation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simulating data arising from a statistical model with known parameters. Logistic regression was the use case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fitting the model on simulated data to recover the known parameters, verifying the simulation worked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building an MCMC sampler (Random Walks Metropolis-Hastings) in order to fit a Bayesian version of the logistic regression model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understand exactly what the algorithm does at each step and visualize this via animation. Understand the impact of different priors, candidate distributions, and jump steps in the algorithm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compare results obtained through the MCMC sampler against what we previously obtained.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To this end, I prepared three visualizations I&amp;rsquo;d like to share.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;part&#34;
           src=&#34;https://academic-demo.netlify.app/project/mcmc/part.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This visualization shows the first 100 iterations of a single chain in estimating the parameters of the Bayesian logistic regression analysis. I&amp;rsquo;ve overlaid a table that shows the current and previous values, and the decision taken by the algorithim.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;full&#34;
           src=&#34;https://academic-demo.netlify.app/project/mcmc/full.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This visualization shows the full 10,000 iterations of the single chain. I&amp;rsquo;ve removed the table of estimates. Here it&amp;rsquo;s quite clear that the chain quickly settles into the area of the known parameter estimates.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;multi&#34;
           src=&#34;https://academic-demo.netlify.app/project/mcmc/multi.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The last visualization mixes things up a bit, by providing 4 chains, each with different starting or initialization values. In the end, they all converge. Kind of.&lt;/p&gt;
&lt;p&gt;Hope you find it useful!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Animated KM</title>
      <link>https://academic-demo.netlify.app/project/tte_animations/</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/tte_animations/</guid>
      <description>&lt;p&gt;This was a neat experiment using the &lt;code&gt;{gganimate}&lt;/code&gt; package for storytelling purposes. In the Kaplan-Meier plot, animation serves as the vehicle to unravel chronological events in a fictitious Oncology clinical trial.&lt;/p&gt;
&lt;p&gt;Some features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Animation of the individual survival curves over time - here you can see how fast the probability of survival drops quite clearly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tracking of number of events and number at risk in real time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The use of stopping points to emphasize when the median survival time is achieved&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The use of stopping points to emphasize contextual information such as planned analyses dates and results of interim stats. Note: may or may not make actual sense given the data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;km&#34;
           src=&#34;https://academic-demo.netlify.app/project/tte_animations/km.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I also had a bit of fun to see where else this could potentially play a role. In the below graph, we compare theoretical versus observed values from a simulation study to see where across the axes the biggest differences lie.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;sim&#34;
           src=&#34;https://academic-demo.netlify.app/project/tte_animations/curve.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This was experiment sparked further discussion into how we can help our Stat colleagues during their round-table discussions. It was eventually spun off into a shiny app.&lt;/p&gt;
&lt;p&gt;Good times.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shinyTrumbowyg</title>
      <link>https://academic-demo.netlify.app/project/shiny-richtext/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/shiny-richtext/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://alex-d.github.io/Trumbowyg/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Trumboywg.js&lt;/a&gt; is a lightweight, what-you-see-is-what-you-get, text editor written in jQuery.&lt;/p&gt;
&lt;p&gt;I really wanted to use this library in my shiny apps (some work related, some personal), but I couldn&amp;rsquo;t locate any prior efforts in an R port. Therefore, I used this opportunity to learn to do it myself using the &lt;code&gt;{htmlwidgets}&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;I was able to successfully port over the base version of Trumbowyg and it can be called quite easily using the familiar shiny widget:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trumbowygInput(id = &amp;quot;id&amp;quot;, label = &amp;quot;text&amp;quot;, value = &amp;quot;Hello world!&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;At the same time, many plugins are available for Trumbowyg, such as emoji&amp;rsquo;s, text coloring, highlighting, and more. I was able to also learn enough to use them natively and to have them be a part of the package.&lt;/p&gt;
&lt;p&gt;This was a great learning experience to see how javascript integrates with R and Shiny &lt;em&gt;under the hood&lt;/em&gt;. It&amp;rsquo;s helped me develop a deeper appreciation for the work that goes into creating shiny extensions that I think we all (certainly I!) sometimes take for granted!&lt;/p&gt;
&lt;p&gt;A quick shoutout to &lt;a href=&#34;https://john-coene.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Coene&lt;/a&gt; and &lt;a href=&#34;https://maya.rbind.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maya Gans&lt;/a&gt; for their various works in describing how to bridge the gap between javascript and R!&lt;/p&gt;
&lt;p&gt;You may view a demo of this &lt;a href=&#34;https://matt-kumar.shinyapps.io/demo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Table-based Data Visualizations using R</title>
      <link>https://academic-demo.netlify.app/talk/table-based-data-visualizations-using-r/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/talk/table-based-data-visualizations-using-r/</guid>
      <description></description>
    </item>
    
    <item>
      <title>frappe Charts</title>
      <link>https://academic-demo.netlify.app/project/frappe/</link>
      <pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/frappe/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://frappe.io/charts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Frappe charts&lt;/a&gt; is a modern, open source SVG charting library written in javascript.&lt;/p&gt;
&lt;p&gt;I had been reading John Coene&amp;rsquo;s &lt;a href=&#34;https://javascript-for-r.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Javascript for R&lt;/a&gt;, an excellent exposition into building widgets for R, and was inspired to put my new-found knowledge to the test. I selected the Frappe charts library as my use case and wanted to see how far down the rabbit hole I could go.&lt;/p&gt;
&lt;p&gt;I was successful in porting over some of the charts and put them (very crudely) into a few R functions for use in Shiny, Rmarkdown and the viewer in R Studio IDE. I probably won&amp;rsquo;t flesh this package out further as it was for educational purposes.&lt;/p&gt;
&lt;p&gt;Below you can find a sample of what it can currently create:&lt;/p&gt;
&lt;div&gt;
&lt;iframe
    src=&#34;https://rstudio-pubs-static.s3.amazonaws.com/781074_8197ded96dc34034b92dff8f87d28e8d.html&#34;
    frameborder=&#34;0&#34;
    style=&#34;overflow:hidden;height:1000;width:100%&#34;
    height=&#34;1000&#34;
    width=&#34;100%&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Nothing earth-shattering, but very satisfying in being able to do some of this myself rather than waiting for someone else to.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Long-term macrolide therapy for chronic obstructive pulmonary disease a population-based time series analysis</title>
      <link>https://academic-demo.netlify.app/publication/macrolide/</link>
      <pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/publication/macrolide/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Auto-Narratives</title>
      <link>https://academic-demo.netlify.app/project/rmarkdown-reporting-engine/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/rmarkdown-reporting-engine/</guid>
      <description>&lt;p&gt;I had recently learned about &lt;a href=&#34;https://drug-dev.com/patient-safety-narratives-clinical-trials-medical-writing-patient-safety-narratives/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;patient safety narratives&lt;/a&gt;, a key deliverable in clinical study reporting that is prepared on a per-patient basis. At the same time, I was also looking to extend my Rmarkdown knowledge to create automated workflows or &amp;ldquo;pipelines&amp;rdquo;. You can see where this is going right?&lt;/p&gt;
&lt;p&gt;My aim was pretty clear: I wanted to create an Rmarkdown-based reporting engine, capable of automatically creating safety narratives for all participants in a clinical trial based on a single template.&lt;/p&gt;
&lt;p&gt;For this example, I borrowed the clinical trial data from the PHUSE Github Repository, openly available &lt;a href=&#34;https://github.com/phuse-org/phuse-scripts/tree/master/data/adam/cdiscpilot01&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next, I got to work in seeing what data elements I would want to pick out for my narratives. I was less concerned with what&amp;rsquo;s actually in a narrative and more interested in the process of automating their creation. Nevertheless, I picked some elements that I think are relevant such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Patient Age/Sex/Race&lt;/li&gt;
&lt;li&gt;Dates of first and last treatment&lt;/li&gt;
&lt;li&gt;Adverse Events, including reported term, severity, outcome and associated dates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The technical part of this project was interesting to think about and research. I ultimately decided with the following approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a template or skeleton structure of a narrative that will be applied to each patients data&lt;/li&gt;
&lt;li&gt;The template includes data wrangling steps that will be repeated for each subject. In here, I also include a table object just to test out variety.&lt;/li&gt;
&lt;li&gt;Using Rmarkdown&amp;rsquo;s &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/parameterized-reports.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;parameters&lt;/a&gt; (here each subject&amp;rsquo;s unique identifier), loop through the unique identifier list and have the corresponding report created.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This was great and I was able to get it to work almost immediately.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;However&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I wanted extend the current approach by providing a user interface to the engine. This is especially useful for non-programming colleagues (or colleagues not familiar with R or Rmarkdown). Enter Shiny.&lt;/p&gt;
&lt;p&gt;Briefly, the user experience can be described as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A list of patient identifiers are populated in a DataTable, and the user is instructed to select all or some of the patients they wish to generate a report for.&lt;/li&gt;
&lt;li&gt;The user then has the option to select the format of their narratives: .docx, .html, or .pdf&lt;/li&gt;
&lt;li&gt;Once selections are made, from here the process works similar to the above, but within the Shiny server context.&lt;/li&gt;
&lt;li&gt;The last step involves collecting all generated reports, bundling them into a single zip file, and returning them to the user as a download. While this process happens in real time, a progress bar is provided to the user as feedback.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;That last part still amazes me.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve since taken this a few steps further, investigating even more approaches (e.g. parent-child reports) and conditional execution of narrative text based on values of users data and including graphics. I will likely update this repo to include those enhancements, but for now enjoy as is!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React Calendar</title>
      <link>https://academic-demo.netlify.app/project/calendar/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/calendar/</guid>
      <description>&lt;p&gt;The following project was a second entry into the first R Studio table contest held in 2020.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t even know where to start with this one. I was looking at creative uses of a table and I landed on the idea of using a table as a calendar.&lt;/p&gt;
&lt;p&gt;At the same time, I was really into figuring out how to incorporate custom CSS into shiny. I had found this awesome 8-bit inspired CSS library and immediately wanted to use it. You can view it &lt;a href=&#34;https://nostalgic-css.github.io/NES.css/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Building on my previous experience of the &lt;code&gt;reactable&lt;/code&gt; package (and custom JS), I kind of went HAM on this one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In addition to the custom bezel, added animated gifs from the super mario games&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added (borrwed) JS code to give the particle effect of snow falling (it was December afterall!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using JS, set custom modals on certain dates to mimic the feel of a calendar invite in Outlook. These are also stylized to match the overall aesthetic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;NAR Table&#34;
           src=&#34;https://academic-demo.netlify.app/project/calendar/screencap.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Survival Tables</title>
      <link>https://academic-demo.netlify.app/project/surv_tables/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/surv_tables/</guid>
      <description>&lt;p&gt;The following project was an entry into the first R Studio table contest held in 2020.&lt;/p&gt;
&lt;p&gt;It depicts a standard survival analysis using the Kaplan-Meier method. Accompanying the graph is an interactive Number at Risk (DT) table which can be clicked.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;NAR Table&#34; srcset=&#34;
               /project/surv_tables/t1_hu115f7e56b7edb68c77d990046f66e7aa_42029_7ccfc8aca693c795dfbdcca2fd3e291a.webp 400w,
               /project/surv_tables/t1_hu115f7e56b7edb68c77d990046f66e7aa_42029_74ae0797eaee4fe1d814d48d3646fc3d.webp 760w,
               /project/surv_tables/t1_hu115f7e56b7edb68c77d990046f66e7aa_42029_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/surv_tables/t1_hu115f7e56b7edb68c77d990046f66e7aa_42029_7ccfc8aca693c795dfbdcca2fd3e291a.webp&#34;
               width=&#34;760&#34;
               height=&#34;718&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Upon clicking a cell of the Number at Risk table, a second (Reactable) table is produced for those subjects.&lt;/p&gt;
&lt;p&gt;In this table, contextual information is given for these subjects and an inline, interactive swimmer plot (Highcharter) is also produced.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Swimmer Table&#34; srcset=&#34;
               /project/surv_tables/t2_hu2daaac5208347fb142655b02ef0e3d02_34684_13a00c72137e35a3b6b3e702ad6c6803.webp 400w,
               /project/surv_tables/t2_hu2daaac5208347fb142655b02ef0e3d02_34684_99b60cee1f737c3e250fb08ed2ed9f5c.webp 760w,
               /project/surv_tables/t2_hu2daaac5208347fb142655b02ef0e3d02_34684_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://academic-demo.netlify.app/project/surv_tables/t2_hu2daaac5208347fb142655b02ef0e3d02_34684_13a00c72137e35a3b6b3e702ad6c6803.webp&#34;
               width=&#34;760&#34;
               height=&#34;650&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Sadly this table did not place in the contest, though parts of it have made it&amp;rsquo;s way into some of our team projects.&lt;/p&gt;
&lt;p&gt;I learned a lot about JS and Reactable in this project, which has since become my display table package of choice within R :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implementation of a Physician Incentive Program for 18-Month Developmental Screening in Ontario, Canada</title>
      <link>https://academic-demo.netlify.app/publication/ewbv-paper/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/publication/ewbv-paper/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Validation of a type 1 diabetes algorithm using electronic medical records and administrative healthcare data to study the population incidence and prevalence of type 1 diabetes in Ontario, Canada</title>
      <link>https://academic-demo.netlify.app/publication/type2diabetes/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/publication/type2diabetes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data Manipulation with R</title>
      <link>https://academic-demo.netlify.app/talk/data-manipulation-with-r/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/talk/data-manipulation-with-r/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Time trends in opioid prescribing among Ontario long-term care residents - a repeated cross-sectional study</title>
      <link>https://academic-demo.netlify.app/publication/opioid/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/publication/opioid/</guid>
      <description></description>
    </item>
    
    <item>
      <title>forestR</title>
      <link>https://academic-demo.netlify.app/project/forestr/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/forestr/</guid>
      <description>&lt;p&gt;In a previous role, creating forest plots were a routine task in almost any project that involved studying statistical associations between various exposures and outcomes using population-level data. These usually came in the form of logistic regression (odds ratios) or Cox models (hazard ratios) and needed to be visualized, often using a forest plot.&lt;/p&gt;
&lt;p&gt;While that role (and organization) was very SAS-centric, no macro or PROC, to my knowledge, existed at the time that made this process painless. Often analysts would turn to Excel (cringe) and spend needless hours trying to &lt;del&gt;format&lt;/del&gt; shoehorn their results into a template.&lt;/p&gt;
&lt;p&gt;To help overcome this, I created a forest plot in R and shared it with colleagues. As more and more wished to use it and adapt it, I realized this was a good candidate for a Shiny app. So, regardless of familiarity with R, all project members could craft a high-quality, publication ready forest plot for the journal article submission.&lt;/p&gt;
&lt;p&gt;To help bridge the gap between SAS and R, I structured the input data set required by the shiny app around what PROC logistic or Lifetest would spit out via ODS (or something very near). This was also because at the time, most statistical analyses were &lt;em&gt;not&lt;/em&gt; done in R.&lt;/p&gt;
&lt;p&gt;So, the app works like this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I provide you a template with some light conventions to follow. These mimic most SAS PROCS ODS outputs.&lt;/li&gt;
&lt;li&gt;Fill in the template and upload it to the app.&lt;/li&gt;
&lt;li&gt;I provide you a good deal of aesthetic control (color, log-scaling, custom breaks, text, etc) to customize your plot.&lt;/li&gt;
&lt;li&gt;Download your plot as a high-res PDF.&lt;/li&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;li&gt;Profit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&amp;rsquo;s sample data in the app. You can edit it to your liking or just click &lt;strong&gt;Proceed&lt;/strong&gt;. Give it a shot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visual Abstracts</title>
      <link>https://academic-demo.netlify.app/project/abstractr/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/abstractr/</guid>
      <description>&lt;p&gt;The idea of &amp;lsquo;Visual Abstracts&amp;rsquo; have recently become popular and are particularly efficient in distilling the main findings of original research.&lt;/p&gt;
&lt;p&gt;I wanted to create an application that enabled users (or non programmers in general) to create nice visual summaries for their research projects they could share over social media. I&amp;rsquo;ve added a fair bit of control and customization in the application mostly related to layout and aesthetics.&lt;/p&gt;
&lt;p&gt;This project was entered into the first ever (2019) Shiny Competition hosted by R Studio and received an honorable mention. You can view the original blog entry &lt;a href=&#34;https://www.rstudio.com/blog/first-shiny-contest-winners/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also ended up turning this app into a package, which can be installed locally on your machine from &lt;a href=&#34;https://cran.rstudio.com/web/packages/abstractr/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN.&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;install.packages(&amp;quot;abstractr&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Long-term macrolide therapy for chronic obstructive pulmonary disease a population-based time series analysis</title>
      <link>https://academic-demo.netlify.app/publication/olis-ltc/</link>
      <pubDate>Sat, 21 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/publication/olis-ltc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>funnelR</title>
      <link>https://academic-demo.netlify.app/project/funnelr/</link>
      <pubDate>Wed, 14 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/project/funnelr/</guid>
      <description>&lt;p&gt;Ah yes, my first expedition into building an R package and having it submitted to CRAN.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;install.packages(&#39;funnelR&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In retrospect, I&amp;rsquo;ve learned quite a bit since about package building, reproducibility and the need for tests. Many of which are &lt;em&gt;absent&lt;/em&gt; here.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve included this entry here as it served as a major milestone for personal development. It even made the &lt;a href=&#34;https://rviews.rstudio.com/2018/04/30/march-2018-top-40-new-package-picks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Top 40 New Package Picks&lt;/a&gt; shortly after it was released.&lt;/p&gt;
&lt;p&gt;I leave you with the vignettes to see what this package is all about. To give some context, in a previous role funnel plots were a staple of most statistical analyses involving our population-level data holdings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;funnelR&lt;/code&gt; package provides a flexible framework for creating funnel plots for proportion data. A funnel plot is a powerful visualization in the analysis of unit level performance relative to some criterion. It readily allows identification of units that are &lt;code&gt;In Control&lt;/code&gt; or &lt;code&gt;Extreme&lt;/code&gt; according to a benchmark at a specified level of confidence (e.g.95%).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Framed this way, a funnel plot can be applied to any number of fields of study to monitor and identify units that deviate from what is considered typical. For example, it could be used to differentiate schools that are high, average or low performing on a standardized test according to a National or State benchmark. From a quality improvement point of view, they might help identify which hospitals have extreme mortality or surgical complication rates relative to a benchmark prescribed by a government body.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The funnelR package provides many options to specify elements of a funnel plot including user defined: control limits, benchmarks, and estimation methods. It also has the capability to write scored results (i.e. a variable that records whether a unit is In Control or Extreme according to the specifications of the funnel plot) to your sample data set. This variable might then be included in further analysis such as cross-tabulations (e.g. stratification) or regression modeling (e.g. covariate).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;While many flavors of funnel plots exist (rates, ratios, etc.), the current package considers funnel plots assuming proportion data that is binomially distributed. The interested reader is referred to Spiegelhalter (2005) for further details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re interested in a specific use case (the one highlighted in the banner), &lt;a href=&#34;https://github.com/mattkumar/mmr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;I got you covered&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to see more flavors, I turn you to the &lt;a href=&#34;https://cran.r-project.org/web/packages/FunnelPlotR/readme/README.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FunnelPlotR&lt;/a&gt; package which is more comprehensive in types of analyses covered and actively maintained.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The association of dyslipidemia with Chronic Lymphocytic Leukemia - a population-based study</title>
      <link>https://academic-demo.netlify.app/publication/cll/</link>
      <pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/publication/cll/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Outcomes of Daytime Procedures Performed by Attending Surgeons after Night Work</title>
      <link>https://academic-demo.netlify.app/publication/nighttime-outcomes/</link>
      <pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/publication/nighttime-outcomes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Breast cancer screening disparities among immigrant women by world region of origin - a population-based study in Ontario, Canada</title>
      <link>https://academic-demo.netlify.app/publication/breast_immigrant/</link>
      <pubDate>Sun, 05 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/publication/breast_immigrant/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Breast cancer screening disparities among urban immigrants - a population-based study in Ontario, Canada</title>
      <link>https://academic-demo.netlify.app/publication/breast_urban/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/publication/breast_urban/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://academic-demo.netlify.app/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/admin/config.yml</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
